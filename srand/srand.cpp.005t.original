
;; Function void std::__terminate() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    extern void terminate (void);

    <<cleanup_point <<< Unknown tree: expr_stmt
      std::terminate () >>>>>;
  }
   >>>;


;; Function constexpr bool std::__is_constant_evaluated() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable trap ();


;; Function void std::__glibcxx_assert_fail() (null)
;; enabled by -tree-original





;; Function std::exception::exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception *) this)->_vptr.exception = &_ZTVSt9exception + 16) >>>>>;
  }
   >>>;


;; Function std::bad_exception::bad_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_exception *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::exception::exception (&((struct bad_exception *) this)->D.3866) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_exception *) this)->D.3866._vptr.exception = &_ZTVSt13bad_exception + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_exception *) this)->D.3866);
      }
  }
   >>>;


;; Function const char* std::type_info::name() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *(const char *) ((const struct type_info *) this)->__name == 42 ? (const char *) ((const struct type_info *) this)->__name + 1 : (const char *) ((const struct type_info *) this)->__name
   >>>;
__builtin_unreachable trap ();


;; Function bool std::type_info::operator!=(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::type_info::operator== ((const struct type_info *) this, __arg)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::type_info::hash_code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_bytes ((const void *) std::type_info::name ((const struct type_info *) this), __builtin_strlen (std::type_info::name ((const struct type_info *) this)), 3339675911)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::type_info::type_info(const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct type_info *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct type_info *) this)->_vptr.type_info = &_ZTVSt9type_info + 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct type_info *) this)->__name = __n) >>>>>;
}


;; Function bool std::type_info::before(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (*(const char *) ((const struct type_info *) this)->__name != 42 || *(const char *) __arg->__name != 42)
    {
      return <retval> = __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, (const char *) __arg->__name) < 0;
    }
  return <retval> = (const char *) ((const struct type_info *) this)->__name < (const char *) __arg->__name;
   >>>;
__builtin_unreachable trap ();


;; Function bool std::type_info::operator==(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point std::__is_constant_evaluated ()>>)
    {
      return <retval> = (const struct type_info *) this == (const struct type_info *) __arg;
    }
  if ((const char *) ((const struct type_info *) this)->__name == (const char *) __arg->__name)
    {
      return <retval> = 1;
    }
  <<cleanup_point return <retval> = *(const char *) ((const struct type_info *) this)->__name != 42 && __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, std::type_info::name ((const struct type_info *) __arg)) == 0>>;
   >>>;
__builtin_unreachable trap ();


;; Function std::bad_cast::bad_cast() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_cast *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::exception::exception (&((struct bad_cast *) this)->D.4060) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_cast *) this)->D.4060._vptr.exception = &_ZTVSt8bad_cast + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_cast *) this)->D.4060);
      }
  }
   >>>;


;; Function std::bad_typeid::bad_typeid() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_typeid *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::exception::exception (&((struct bad_typeid *) this)->D.4094) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_typeid *) this)->D.4094._vptr.exception = &_ZTVSt10bad_typeid + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_typeid *) this)->D.4094);
      }
  }
   >>>;


;; Function std::bad_alloc::bad_alloc() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_alloc *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::exception::exception (&((struct bad_alloc *) this)->D.4149) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_alloc *) this)->D.4149._vptr.exception = &_ZTVSt9bad_alloc + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_alloc *) this)->D.4149);
      }
  }
   >>>;


;; Function std::bad_array_new_length::bad_array_new_length() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_array_new_length *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::bad_alloc::bad_alloc (&((struct bad_array_new_length *) this)->D.4183) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_array_new_length *) this)->D.4183.D.4149._vptr.exception = &_ZTVSt20bad_array_new_length + 16) >>>>>;
      }
    catch
      {
        std::bad_alloc::~bad_alloc (&((struct bad_array_new_length *) this)->D.4183);
      }
  }
   >>>;


;; Function void* operator new(std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;
__builtin_unreachable trap ();


;; Function void* operator new [](std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;
__builtin_unreachable trap ();


;; Function void operator delete(void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void operator delete [](void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::nullptr_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception_ptr *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception_ptr *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = __o->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__o->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.8356, <<< Unknown tree: aggr_init_expr
      5
      __ct_comp 
      D.8356
      (struct exception_ptr *) <<< Unknown tree: void_cst >>>
      NON_LVALUE_EXPR <__o> >>>>, (struct exception_ptr &) this) >>>>>;
  return <retval> = (struct exception_ptr &) this;
   >>>;
__builtin_unreachable trap ();


;; Function std::__exception_ptr::exception_ptr::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (void *) ((const struct exception_ptr *) this)->_M_exception_object != 0B
   >>>;
__builtin_unreachable trap ();


;; Function bool std::__exception_ptr::operator==(const exception_ptr&, const exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (void *) __x->_M_exception_object == (void *) __y->_M_exception_object
   >>>;
__builtin_unreachable trap ();


;; Function bool std::__exception_ptr::operator!=(const exception_ptr&, const exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (void *) __x->_M_exception_object != (void *) __y->_M_exception_object
   >>>;
__builtin_unreachable trap ();


;; Function std::__exception_ptr::exception_ptr::exception_ptr() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception_ptr *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(const std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception_ptr *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = (void *) __other->_M_exception_object) >>>>>;
    if (((struct exception_ptr *) this)->_M_exception_object != 0B)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__exception_ptr::exception_ptr::_M_addref ((struct exception_ptr *) this) >>>>>;
      }
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::~exception_ptr() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct exception_ptr *) this)->_M_exception_object != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__exception_ptr::exception_ptr::_M_release ((struct exception_ptr *) this) >>>>>;
          }
      }
    finally
      {
        *(struct exception_ptr *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(const std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.8385, <<< Unknown tree: aggr_init_expr
      5
      __ct_comp 
      D.8385
      (struct exception_ptr *) <<< Unknown tree: void_cst >>>
      __other >>>>, (struct exception_ptr &) this) >>>>>;
  return <retval> = (struct exception_ptr &) this;
   >>>;
__builtin_unreachable trap ();


;; Function void std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    void * __tmp = ((struct exception_ptr *) this)->_M_exception_object;

        void * __tmp = ((struct exception_ptr *) this)->_M_exception_object;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = __other->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__other->_M_exception_object = __tmp) >>>>>;
  }
   >>>;


;; Function void std::__exception_ptr::swap(exception_ptr&, exception_ptr&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap ((struct exception_ptr *) __lhs, __rhs) >>>>>;


;; Function std::nested_exception::nested_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct nested_exception *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct nested_exception *) this)->_vptr.nested_exception = &_ZTVSt16nested_exception + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct nested_exception *) this)->_M_ptr = TARGET_EXPR <D.8470, <<< Unknown tree: aggr_init_expr
        3
        current_exception
        D.8470 >>>>) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__exception_ptr::exception_ptr::~exception_ptr (&((struct nested_exception *) this)->_M_ptr);
      }
  }
   >>>;


;; Function void std::nested_exception::rethrow_nested() const (null)
;; enabled by -tree-original


if (<<cleanup_point std::__exception_ptr::exception_ptr::operator bool (&((const struct nested_exception *) this)->_M_ptr)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::rethrow_exception (&TARGET_EXPR <D.8474, <<< Unknown tree: aggr_init_expr
        5
        __ct_comp 
        D.8474
        (struct exception_ptr *) <<< Unknown tree: void_cst >>>
        (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;


;; Function std::__exception_ptr::exception_ptr std::nested_exception::nested_ptr() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.8475, <<< Unknown tree: aggr_init_expr
    5
    __ct_comp 
    D.8475
    (struct exception_ptr *) <<< Unknown tree: void_cst >>>
    (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>>>
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr void std::char_traits<char>::assign(char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr bool std::char_traits<char>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned char) *__c1 < (unsigned char) *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr int std::char_traits<char>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  if (__n == 0)
    {
      return <retval> = 0;
    }
  {
    if (<<cleanup_point std::__is_constant_evaluated ()>>)
      {
        {
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            goto <D.8755>;
            <D.8754>:;
            if (<<cleanup_point std::char_traits<char>::lt ((const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
              {
                return <retval> = -1;
              }
            else
              {
                if (<<cleanup_point std::char_traits<char>::lt ((const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
                  {
                    return <retval> = 1;
                  }
              }
            <<cleanup_point (void)  ++__i>>;
            <D.8755>:;
            if (__i < __n) goto <D.8754>; else goto <D.8752>;
            <D.8752>:;
          }
          return <retval> = 0;
        }
      }
  }
  return <retval> = __builtin_memcmp ((const void *) __s1, (const void *) __s2, __n);
}


;; Function static constexpr std::size_t std::char_traits<char>::length(const char_type*) (null)
;; enabled by -tree-original


if (<<cleanup_point std::__is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<char>::length (__s)>>;
  }
return <retval> = __builtin_strlen (__s);


;; Function static constexpr const std::char_traits<char>::char_type* std::char_traits<char>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
if (<<cleanup_point std::__is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<char>::find (__s, __n, (const char_type &) __a)>>;
  }
return <retval> = (const char_type *) __builtin_memchr ((const void *) __s, (int) *__a, __n);


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::move(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::copy(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::assign(char_type*, std::size_t, char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memset ((void *) __s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type std::char_traits<char>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) (unsigned char) *__c
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr bool std::char_traits<char>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (int) *__c != std::char_traits<char>::eof () ? (int_type) *__c : 0>>
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr void std::char_traits<wchar_t>::assign(char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr bool std::char_traits<wchar_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr int std::char_traits<wchar_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
if (<<cleanup_point std::__is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<wchar_t>::compare (__s1, __s2, __n)>>;
  }
return <retval> = wmemcmp (__s1, __s2, __n);


;; Function static constexpr std::size_t std::char_traits<wchar_t>::length(const char_type*) (null)
;; enabled by -tree-original


if (<<cleanup_point std::__is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<wchar_t>::length (__s)>>;
  }
return <retval> = wcslen (__s);


;; Function static constexpr const std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
if (<<cleanup_point std::__is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<wchar_t>::find (__s, __n, (const char_type &) __a)>>;
  }
return <retval> = (const char_type *) wmemchr (__s, (char_type) *__a, __n);


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::move(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemmove (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::copy(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemcpy (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::assign(char_type*, std::size_t, char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) wmemset (__s, __a, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type std::char_traits<wchar_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr bool std::char_traits<wchar_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<wchar_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.8978, std::char_traits<wchar_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr void std::char_traits<char16_t>::assign(char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr bool std::char_traits<char16_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr int std::char_traits<char16_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9063>;
    <D.9062>:;
    if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 2)), (const char_type &) (__s2 + (sizetype) (__i * 2)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 2)), (const char_type &) (__s1 + (sizetype) (__i * 2)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.9063>:;
    if (__i < __n) goto <D.9062>; else goto <D.9060>;
    <D.9060>:;
  }
  return <retval> = 0;
}


;; Function static constexpr std::size_t std::char_traits<char16_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.9071>;
  <D.9072>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void)  ++__i >>>>>;
  <D.9071>:;
  if (<<cleanup_point !std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &TARGET_EXPR <D.9065, 0>)>>) goto <D.9072>; else goto <D.9070>;
  <D.9070>:;
  return <retval> = __i;
}


;; Function static constexpr const std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9082>;
    <D.9081>:;
    if (<<cleanup_point std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 2);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.9082>:;
    if (__i < __n) goto <D.9081>; else goto <D.9079>;
    <D.9079>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::move(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::copy(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::assign(char_type*, std::size_t, char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9087>;
    <D.9086>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char16_t>::assign ((char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &__a) >>>>>;
    <<cleanup_point (void)  ++__i>>;
    <D.9087>:;
    if (__i < __n) goto <D.9086>; else goto <D.9084>;
    <D.9084>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char16_t>::char_type std::char_traits<char16_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr bool std::char_traits<char16_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__c != (const char_type) std::char_traits<char16_t>::eof () ? (int_type) *__c : 65533>>
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char16_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.9096, std::char_traits<char16_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr void std::char_traits<char32_t>::assign(char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr bool std::char_traits<char32_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr int std::char_traits<char32_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9181>;
    <D.9180>:;
    if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.9181>:;
    if (__i < __n) goto <D.9180>; else goto <D.9178>;
    <D.9178>:;
  }
  return <retval> = 0;
}


;; Function static constexpr std::size_t std::char_traits<char32_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.9189>;
  <D.9190>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void)  ++__i >>>>>;
  <D.9189>:;
  if (<<cleanup_point !std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.9183, 0>)>>) goto <D.9190>; else goto <D.9188>;
  <D.9188>:;
  return <retval> = __i;
}


;; Function static constexpr const std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9200>;
    <D.9199>:;
    if (<<cleanup_point std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 4);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.9200>:;
    if (__i < __n) goto <D.9199>; else goto <D.9197>;
    <D.9197>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::move(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::copy(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::assign(char_type*, std::size_t, char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9205>;
    <D.9204>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char32_t>::assign ((char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &__a) >>>>>;
    <<cleanup_point (void)  ++__i>>;
    <D.9205>:;
    if (__i < __n) goto <D.9204>; else goto <D.9202>;
    <D.9202>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char32_t>::char_type std::char_traits<char32_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr bool std::char_traits<char32_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;
__builtin_unreachable trap ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char32_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.9214, std::char_traits<char32_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;
__builtin_unreachable trap ();


;; Function int std::__convert_from_v(__locale_struct* const&, char*, int, const char*, ...) (null)
;; enabled by -tree-original


{
  struct __locale_struct * __old;
  struct  __args[1];
  const int __ret;

    struct __locale_struct * __old;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__old = __gnu_cxx::__uselocale ((struct __locale_struct *) *__cloc)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
    __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __ret;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__ret = __builtin_vsnprintf (__out, (long unsigned int) __size, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) __gnu_cxx::__uselocale (__old) >>>>>;
  return <retval> = (int) __ret;
}


;; Function __pthread_cleanup_class::__pthread_cleanup_class(void (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __pthread_cleanup_class *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct __pthread_cleanup_class *) this)->__cancel_routine = __fct) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct __pthread_cleanup_class *) this)->__cancel_arg = __arg) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct __pthread_cleanup_class *) this)->__do_it = 1) >>>>>;
}


;; Function __pthread_cleanup_class::~__pthread_cleanup_class() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct __pthread_cleanup_class *) this)->__do_it != 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              ((struct __pthread_cleanup_class *) this)->__cancel_routine (((struct __pthread_cleanup_class *) this)->__cancel_arg) >>>>>;
          }
      }
    finally
      {
        *(struct __pthread_cleanup_class *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void __pthread_cleanup_class::__setdoit(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__do_it = __newval) >>>>>;


;; Function void __pthread_cleanup_class::__defer() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype (0, &((struct __pthread_cleanup_class *) this)->__cancel_type) >>>>>;


;; Function void __pthread_cleanup_class::__restore() const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype ((int) ((const struct __pthread_cleanup_class *) this)->__cancel_type, 0B) >>>>>;


;; Function int __gthread_active_p() (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function int __gthread_create(__gthread_t*, void* (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_create (__threadid, 0B, __func, __args)>>;


;; Function int __gthread_join(__gthread_t, void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_join (__threadid, __value_ptr)>>;


;; Function int __gthread_detach(__gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_detach (__threadid)>>;


;; Function int __gthread_equal(__gthread_t, __gthread_t) (null)
;; enabled by -tree-original


return <retval> = pthread_equal (__t1, __t2);


;; Function __gthread_t __gthread_self() (null)
;; enabled by -tree-original


return <retval> = pthread_self ();


;; Function int __gthread_yield() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = sched_yield ()>>;


;; Function int __gthread_once(__gthread_once_t*, void (*)()) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_once (__once, __func)>>;
  }
else
  {
    return <retval> = -1;
  }
__builtin_unreachable trap ();


;; Function int __gthread_key_create(__gthread_key_t*, void (*)(void*)) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_key_create (__key, __dtor)>>;


;; Function int __gthread_key_delete(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_key_delete (__key)>>;


;; Function void* __gthread_getspecific(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_getspecific (__key)>>;


;; Function int __gthread_setspecific(__gthread_key_t, const void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_setspecific (__key, __ptr)>>;


;; Function void __gthread_mutex_init_function(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) pthread_mutex_init (__mutex, 0B) >>>>>;
  }


;; Function int __gthread_mutex_destroy(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_destroy (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable trap ();


;; Function int __gthread_mutex_lock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_lock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable trap ();


;; Function int __gthread_mutex_trylock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_trylock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable trap ();


;; Function int __gthread_mutex_timedlock(__gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_timedlock (__mutex, __abs_timeout)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable trap ();


;; Function int __gthread_mutex_unlock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_unlock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable trap ();


;; Function int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_lock (__mutex)>>;


;; Function int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_trylock (__mutex)>>;


;; Function int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_timedlock (__mutex, __abs_timeout)>>;


;; Function int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_unlock (__mutex)>>;


;; Function int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_destroy (__mutex)>>;


;; Function int __gthread_cond_broadcast(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_broadcast (__cond)>>;


;; Function int __gthread_cond_signal(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_signal (__cond)>>;


;; Function int __gthread_cond_wait(__gthread_cond_t*, __gthread_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_timedwait(__gthread_cond_t*, __gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_timedwait (__cond, __mutex, __abs_timeout)>>;


;; Function int __gthread_cond_wait_recursive(__gthread_cond_t*, __gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_destroy(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_destroy (__cond)>>;


;; Function bool __gnu_cxx::__is_single_threaded() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __libc_single_threaded != 0
   >>>;
__builtin_unreachable trap ();


;; Function _Atomic_word __gnu_cxx::__exchange_and_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4)>>;


;; Function void __gnu_cxx::__atomic_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


{
  _Atomic_word __result = *__mem;

    _Atomic_word __result = *__mem;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__mem = *__mem + __val) >>>>>;
  return <retval> = __result;
}


;; Function void __gnu_cxx::__atomic_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::__is_single_threaded ()>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add_single (__mem, __val)>>;
  }
else
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add ((volatile _Atomic_word *) __mem, __val)>>;
  }
__builtin_unreachable trap ();


;; Function void __gnu_cxx::__atomic_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::__is_single_threaded ()>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      __gnu_cxx::__atomic_add_single (__mem, __val) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      __gnu_cxx::__atomic_add ((volatile _Atomic_word *) __mem, __val) >>>>>;
  }


;; Function constexpr bool __gnu_cxx::__is_null_pointer(std::nullptr_t) (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr __gnu_cxx::__ops::_Iter_less_iter __gnu_cxx::__ops::__iter_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16681, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val::_Iter_less_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_less_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16758, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_comp_val(_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16763, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter::_Val_less_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16829, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_comp_iter(_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16834, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16874, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_equal_to_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16923, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_comp_val(_Iter_equal_to_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16936, {}>>>;


;; Function constexpr int std::__size_to_integer(int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr unsigned int std::__size_to_integer(unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long int std::__size_to_integer(long int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long unsigned int std::__size_to_integer(long unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long int std::__size_to_integer(long long int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long unsigned int std::__size_to_integer(long long unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr __int128 std::__size_to_integer(__int128) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr __int128 unsigned std::__size_to_integer(__int128 unsigned) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long int std::__size_to_integer(float) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr long long int std::__size_to_integer(double) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr long long int std::__size_to_integer(long double) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr long long int std::__size_to_integer(__float128) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function static std::allocator_traits<std::allocator<void> >::allocator_type std::allocator_traits<std::allocator<void> >::select_on_container_copy_construction(const allocator_type&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.20878, *(const struct allocator &) __rhs>>>;


;; Function std::size_t std::hash<bool>::operator()(bool) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<char>::operator()(char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<signed char>::operator()(signed char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<unsigned char>::operator()(unsigned char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<wchar_t>::operator()(wchar_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<char16_t>::operator()(char16_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<char32_t>::operator()(char32_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<short int>::operator()(short int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<int>::operator()(int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<long int>::operator()(long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<long long int>::operator()(long long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<short unsigned int>::operator()(short unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<unsigned int>::operator()(unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<long unsigned int>::operator()(long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<long long unsigned int>::operator()(long long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<__int128>::operator()(__int128) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<__int128 unsigned>::operator()(__int128 unsigned) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable trap ();


;; Function static std::size_t std::_Hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_bytes (__ptr, __clength, __seed)>>;


;; Function static std::size_t std::_Fnv_hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Fnv_hash_bytes (__ptr, __clength, __seed)>>;


;; Function std::size_t std::hash<float>::operator()(float) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<float> ((const float &) &__val) : 0>>
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<double>::operator()(double) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<double> ((const double &) &__val) : 0>>
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<std::nullptr_t>::operator()(std::nullptr_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::size_t std::__sv_check(size_t, size_t, const char*) (null)
;; enabled by -tree-original


if (__pos > __size)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > __size (which is %zu)", __s, __pos, __size) >>>>>;
  }
return <retval> = __pos;


;; Function constexpr std::size_t std::__sv_limit(size_t, size_t, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff = __size - __pos > __off;

        const bool __testoff = __size - __pos > __off;
    return <retval> = (bool) __testoff ? __off : __size - __pos;
  }
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<std::basic_string_view<char> >::operator()(const std::string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char>::data ((const struct string_view *) __str), std::basic_string_view<char>::length ((const struct string_view *) __str), 3339675911)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<std::basic_string_view<wchar_t> >::operator()(const std::wstring_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<wchar_t>::data ((const struct wstring_view *) __s), std::basic_string_view<wchar_t>::length ((const struct wstring_view *) __s) * 4, 3339675911)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<std::basic_string_view<char16_t> >::operator()(const std::u16string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char16_t>::data ((const struct u16string_view *) __s), std::basic_string_view<char16_t>::length ((const struct u16string_view *) __s) * 2, 3339675911)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<std::basic_string_view<char32_t> >::operator()(const std::u32string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char32_t>::data ((const struct u32string_view *) __s), std::basic_string_view<char32_t>::length ((const struct u32string_view *) __s) * 4, 3339675911)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::basic_string_view<char> std::literals::string_view_literals::operator""sv(const char*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.23387, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.23387
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    __str
    __len >>>>;, D.23387>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::basic_string_view<wchar_t> std::literals::string_view_literals::operator""sv(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.23405, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.23405
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    __str
    __len >>>>;, D.23405>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::basic_string_view<char16_t> std::literals::string_view_literals::operator""sv(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.23423, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.23423
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    __str
    __len >>>>;, D.23423>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::basic_string_view<char32_t> std::literals::string_view_literals::operator""sv(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.23441, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.23441
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    __str
    __len >>>>;, D.23441>>
   >>>;
__builtin_unreachable trap ();


;; Function __uint16_t __bswap_16(__uint16_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap16 ((int) __bsx);


;; Function __uint32_t __bswap_32(__uint32_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap32 (__bsx);


;; Function __uint64_t __bswap_64(__uint64_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap64 (__bsx);


;; Function __uint16_t __uint16_identity(__uint16_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function __uint32_t __uint32_identity(__uint32_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function __uint64_t __uint64_identity(__uint64_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function long int std::abs(long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__i>;


;; Function long long int std::abs(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr double std::abs(double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::abs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::abs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __int128 std::abs(__int128) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __float128 std::abs(__float128) (null)
;; enabled by -tree-original


return <retval> = (__float128) ABS_EXPR <(_Float128) __x>;


;; Function ldiv_t std::div(long int, long int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.26435, ldiv (__i, __j)>>>
   >>>;
__builtin_unreachable trap ();


;; Function lldiv_t __gnu_cxx::div(long long int, long long int) (null)
;; enabled by -tree-original


{
  struct lldiv_t __q;

    struct lldiv_t __q;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__q.quot = __n / __d) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__q.rem = __n % __d) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.26486, *(struct lldiv_t &) &__q>>>;
}


;; Function int std::__cxx11::stoi(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, char, int> ((long int (*<T4ee1>) (const char *, char * *, int)) strtol, (const char *) "stoi", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, long int, char, int> ((long int (*<T4ee1>) (const char *, char * *, int)) strtol, (const char *) "stol", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int> ((long unsigned int (*<T4ef4>) (const char *, char * *, int)) strtoul, (const char *) "stoul", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int, long long int, char, int> ((long long int (*<T4eff>) (const char *, char * *, int)) strtoll, (const char *) "stoll", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int> ((long long unsigned int (*<T4f0c>) (const char *, char * *, int)) strtoull, (const char *) "stoull", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function double std::__cxx11::stod(const std::string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double, double, char> ((double (*<T4f17>) (const char *, char * *)) strtod, (const char *) "stod", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function float std::__cxx11::stof(const std::string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float, float, char> ((float (*<T4f21>) (const char *, char * *)) strtof, (const char *) "stof", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const std::string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double, long double, char> ((long double (*<T4f2b>) (const char *, char * *)) strtold, (const char *) "stold", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function constexpr std::integral_constant<_Tp, __v>::operator value_type() const [with _Tp = bool; _Tp __v = true; value_type = bool] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = allocator<char>; long unsigned int <anonymous> = 1; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.28606, {}>>>;


;; Function std::__cxx11::to_string(int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const bool __neg [value-expr: __closure->____neg];
  const unsigned int __len [value-expr: __closure->____len];
  const unsigned int __uval [value-expr: __closure->____uval];

    const bool __neg [value-expr: __closure->____neg];
    const unsigned int __len [value-expr: __closure->____len];
    const unsigned int __uval [value-expr: __closure->____uval];
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*NON_LVALUE_EXPR <__p> = 45) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<unsigned int> (__p + (sizetype) __neg, (unsigned int) __len, (unsigned int) __uval) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __neg = __val < 0;
    const unsigned int __uval = (bool) __neg ? -(unsigned int) __val : (unsigned int) __val;
    const unsigned int __len;
    struct string __str [value-expr: *<retval>];
    typedef struct ._anon_82 ._anon_82;
    bool D.28710 = 0;

        bool D.28710 = 0;
        const bool __neg = __val < 0;
        const unsigned int __uval = (bool) __neg ? -(unsigned int) __val : (unsigned int) __val;
        const unsigned int __len;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__len = std::__detail::__to_chars_len<unsigned int> ((unsigned int) __uval, 10)) >>>>>;
    (void) 0;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), TARGET_EXPR <D.28641, {.____neg=(bool) __neg, .____len=(unsigned int) __len, .____uval=(unsigned int) __uval}>) >>>>>;
        <<cleanup_point return *<retval>;, D.28710 = 1;>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
      }
  }
   >>>;
__builtin_unreachable trap ();


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.28733>:;
    if (__value < (unsigned int) __base)
      {
        return <retval> = __n;
      }
    if (__value < (unsigned int) __b2)
      {
        return <retval> = __n + 1;
      }
    if (__value < (unsigned int) __b3)
      {
        return <retval> = __n + 2;
      }
    if ((long unsigned int) __value < (long unsigned int) __b4)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__value = (unsigned int) ((long unsigned int) __value / (long unsigned int) __b4)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__n = __n + 4) >>>>>;
    goto <D.28733>;
  }
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const unsigned int __val [value-expr: __closure->____val];

    const unsigned int __val [value-expr: __closure->____val];
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<unsigned int> (__p, (unsigned int) __n, (unsigned int) __val) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(unsigned int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const unsigned int __len;
    struct string __str [value-expr: *<retval>];
    typedef struct ._anon_83 ._anon_83;
    bool D.28761 = 0;

        bool D.28761 = 0;
        const unsigned int __len;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__len = std::__detail::__to_chars_len<unsigned int> (__val, 10)) >>>>>;
    (void) 0;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) __len, TARGET_EXPR <D.28746, {.____val=__val}>) >>>>>;
        <<cleanup_point return *<retval>;, D.28761 = 1;>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
      }
  }
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const bool __neg [value-expr: __closure->____neg];
  const unsigned int __len [value-expr: __closure->____len];
  const long unsigned int __uval [value-expr: __closure->____uval];

    const bool __neg [value-expr: __closure->____neg];
    const unsigned int __len [value-expr: __closure->____len];
    const long unsigned int __uval [value-expr: __closure->____uval];
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*NON_LVALUE_EXPR <__p> = 45) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<long unsigned int> (__p + (sizetype) __neg, (unsigned int) __len, (long unsigned int) __uval) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(long int) (null)
;; enabled by -tree-original


{
  const bool __neg = __val < 0;
  const long unsigned int __uval = (bool) __neg ? -(long unsigned int) __val : (long unsigned int) __val;
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];
  typedef struct ._anon_84 ._anon_84;
  bool D.28807 = 0;

    bool D.28807 = 0;
    const bool __neg = __val < 0;
    const long unsigned int __uval = (bool) __neg ? -(long unsigned int) __val : (long unsigned int) __val;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = std::__detail::__to_chars_len<long unsigned int> ((long unsigned int) __uval, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), TARGET_EXPR <D.28792, {.____neg=(bool) __neg, .____len=(unsigned int) __len, .____uval=(long unsigned int) __uval}>) >>>>>;
      <<cleanup_point return *<retval>;, D.28807 = 1;>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
  __builtin_unreachable trap ();
}


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.28830>:;
    if ((long unsigned int) (unsigned int) __base > __value)
      {
        return <retval> = __n;
      }
    if ((long unsigned int) __b2 > __value)
      {
        return <retval> = __n + 1;
      }
    if ((long unsigned int) __b3 > __value)
      {
        return <retval> = __n + 2;
      }
    if (__value < (long unsigned int) __b4)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__value = __value / (long unsigned int) __b4) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__n = __n + 4) >>>>>;
    goto <D.28830>;
  }
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const long unsigned int __val [value-expr: __closure->____val];

    const long unsigned int __val [value-expr: __closure->____val];
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<long unsigned int> (__p, (unsigned int) __n, (long unsigned int) __val) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(long unsigned int) (null)
;; enabled by -tree-original


{
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];
  typedef struct ._anon_85 ._anon_85;
  bool D.28858 = 0;

    bool D.28858 = 0;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = std::__detail::__to_chars_len<long unsigned int> (__val, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) __len, TARGET_EXPR <D.28843, {.____val=__val}>) >>>>>;
      <<cleanup_point return *<retval>;, D.28858 = 1;>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
  __builtin_unreachable trap ();
}


;; Function std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const bool __neg [value-expr: __closure->____neg];
  const unsigned int __len [value-expr: __closure->____len];
  const long long unsigned int __uval [value-expr: __closure->____uval];

    const bool __neg [value-expr: __closure->____neg];
    const unsigned int __len [value-expr: __closure->____len];
    const long long unsigned int __uval [value-expr: __closure->____uval];
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*NON_LVALUE_EXPR <__p> = 45) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<long long unsigned int> (__p + (sizetype) __neg, (unsigned int) __len, (long long unsigned int) __uval) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(long long int) (null)
;; enabled by -tree-original


{
  const bool __neg = __val < 0;
  const long long unsigned int __uval = (bool) __neg ? -(long long unsigned int) __val : (long long unsigned int) __val;
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];
  typedef struct ._anon_86 ._anon_86;
  bool D.28904 = 0;

    bool D.28904 = 0;
    const bool __neg = __val < 0;
    const long long unsigned int __uval = (bool) __neg ? -(long long unsigned int) __val : (long long unsigned int) __val;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = std::__detail::__to_chars_len<long long unsigned int> ((long long unsigned int) __uval, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), TARGET_EXPR <D.28889, {.____neg=(bool) __neg, .____len=(unsigned int) __len, .____uval=(long long unsigned int) __uval}>) >>>>>;
      <<cleanup_point return *<retval>;, D.28904 = 1;>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
  __builtin_unreachable trap ();
}


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.28927>:;
    if ((long long unsigned int) (unsigned int) __base > __value)
      {
        return <retval> = __n;
      }
    if ((long long unsigned int) __b2 > __value)
      {
        return <retval> = __n + 1;
      }
    if ((long long unsigned int) __b3 > __value)
      {
        return <retval> = __n + 2;
      }
    if (__value < (long long unsigned int) __b4)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__value = __value / (long long unsigned int) __b4) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__n = __n + 4) >>>>>;
    goto <D.28927>;
  }
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const long long unsigned int __val [value-expr: __closure->____val];

    const long long unsigned int __val [value-expr: __closure->____val];
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<long long unsigned int> (__p, (unsigned int) __n, (long long unsigned int) __val) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(long long unsigned int) (null)
;; enabled by -tree-original


{
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];
  typedef struct ._anon_87 ._anon_87;
  bool D.28955 = 0;

    bool D.28955 = 0;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = std::__detail::__to_chars_len<long long unsigned int> (__val, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) __len, TARGET_EXPR <D.28940, {.____val=__val}>) >>>>>;
      <<cleanup_point return *<retval>;, D.28955 = 1;>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
  __builtin_unreachable trap ();
}


;; Function std::string std::__cxx11::to_string(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.28978, <<< Unknown tree: aggr_init_expr
    7
    __to_xstring
    D.28978
    (int (*<T5069>) (char *, size_t, const char *, struct  *)) vsnprintf
    58
    (const char *) "%f"
    (double) __val >>>>>>;
}


;; Function std::string std::__cxx11::to_string(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.28997, <<< Unknown tree: aggr_init_expr
    7
    __to_xstring
    D.28997
    (int (*<T5069>) (char *, size_t, const char *, struct  *)) vsnprintf
    328
    (const char *) "%f"
    __val >>>>>>;
}


;; Function std::string std::__cxx11::to_string(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.29016, <<< Unknown tree: aggr_init_expr
    7
    __to_xstring
    D.29016
    (int (*<T5069>) (char *, size_t, const char *, struct  *)) vsnprintf
    4952
    (const char *) "%Lf"
    __val >>>>>>;
}


;; Function int std::__cxx11::stoi(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, wchar_t, int> ((long int (*<T529d>) (const wchar_t *, wchar_t * *, int)) wcstol, (const char *) "stoi", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, long int, wchar_t, int> ((long int (*<T529d>) (const wchar_t *, wchar_t * *, int)) wcstol, (const char *) "stol", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int> ((long unsigned int (*<T52ad>) (const wchar_t *, wchar_t * *, int)) wcstoul, (const char *) "stoul", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int, long long int, wchar_t, int> ((long long int (*<T52b6>) (const wchar_t *, wchar_t * *, int)) wcstoll, (const char *) "stoll", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int> ((long long unsigned int (*<T52bf>) (const wchar_t *, wchar_t * *, int)) wcstoull, (const char *) "stoull", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const std::wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float, float, wchar_t> ((float (*<T52c8>) (const wchar_t *, wchar_t * *)) wcstof, (const char *) "stof", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const std::wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double, double, wchar_t> ((double (*<T52d1>) (const wchar_t *, wchar_t * *)) wcstod, (const char *) "stod", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const std::wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double, long double, wchar_t> ((long double (*<T52da>) (const wchar_t *, wchar_t * *)) wcstold, (const char *) "stold", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function void std::__cxx11::__to_wstring_numeric(const char*, int, wchar_t*) (null)
;; enabled by -tree-original


{
  {
    {
      {
        int __i = 0;

        <<cleanup_point         int __i = 0;>>;
        goto <D.30340>;
        <D.30339>:;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*(__wout + (sizetype) ((long unsigned int) __i * 4)) = (wchar_t) *(__s + (sizetype) __i)) >>>>>;
        <<cleanup_point (void)  ++__i>>;
        <D.30340>:;
        if (__i < __len) goto <D.30339>; else goto <D.30337>;
        <D.30337>:;
      }
    }
  }
}


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = allocator<wchar_t>; long unsigned int <anonymous> = 1; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.30580, {}>>>;


;; Function constexpr const std::basic_string_view<_CharT, _Traits>::value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char; _Traits = std::char_traits<char>; const_pointer = const char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::__to_wstring_numeric(std::string_view)::<lambda(wchar_t*, int)> (null)
;; enabled by -tree-original


{
  const char * const __f [value-expr: __closure->____f];

    const char * const __f [value-expr: __closure->____f];
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::__to_wstring_numeric ((const char *) __f, __n, __to) >>>>>;
  return <retval> = __n;
}


;; Function std::wstring std::__cxx11::__to_wstring_numeric(std::string_view) (null)
;; enabled by -tree-original


{
  {
    <<cleanup_point return *<retval> = TARGET_EXPR <D.30515, <<< Unknown tree: aggr_init_expr
      7
      __ct_comp 
      D.30515
      (struct basic_string *) <<< Unknown tree: void_cst >>>
      std::basic_string_view<char>::data (&__s)
      std::basic_string_view<char>::data (&__s) + (sizetype) std::basic_string_view<char>::size (&__s)
      (const struct allocator &) &TARGET_EXPR <D.30514, <<< Unknown tree: aggr_init_expr
        4
        __ct_comp 
        D.30514
        (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
  }
}


;; Function std::wstring std::__cxx11::to_wstring(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30623, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30623
  TARGET_EXPR <D.30622, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30621, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30621
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30629, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30629
  TARGET_EXPR <D.30628, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30627, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30627
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30635, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30635
  TARGET_EXPR <D.30634, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30633, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30633
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30641, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30641
  TARGET_EXPR <D.30640, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30639, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30639
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30647, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30647
  TARGET_EXPR <D.30646, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30645, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30645
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30653, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30653
  TARGET_EXPR <D.30652, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30651, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30651
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(float) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30659, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30659
  TARGET_EXPR <D.30658, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30657, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30657
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(double) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30665, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30665
  TARGET_EXPR <D.30664, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30663, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30663
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long double) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30671, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.30671
  TARGET_EXPR <D.30670, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.30669, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.30669
    __val >>>>)> >>>>>>;


;; Function std::__cxx11::basic_string<char> std::literals::string_literals::operator""s(const char*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30800, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.30800
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.30799, <<< Unknown tree: aggr_init_expr
    4
    __ct_comp 
    D.30799
    (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<wchar_t> std::literals::string_literals::operator""s(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.30819, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.30819
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.30818, <<< Unknown tree: aggr_init_expr
    4
    __ct_comp 
    D.30818
    (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char16_t> std::literals::string_literals::operator""s(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.32319, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.32319
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.32318, <<< Unknown tree: aggr_init_expr
    4
    __ct_comp 
    D.32318
    (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char32_t> std::literals::string_literals::operator""s(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.33828, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.33828
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.33827, <<< Unknown tree: aggr_init_expr
    4
    __ct_comp 
    D.33827
    (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function constexpr std::byte std::operator|(byte, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (byte) ((unsigned char) __l | (unsigned char) __r)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::byte std::operator&(byte, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (byte) ((unsigned char) __l & (unsigned char) __r)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::byte std::operator^(byte, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (byte) ((unsigned char) __l ^ (unsigned char) __r)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::byte std::operator~(byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ~__b
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::byte& std::operator|=(byte&, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__l = std::operator| (*__l, __r);, __l>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::byte& std::operator&=(byte&, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__l = std::operator& (*__l, __r);, __l>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::byte& std::operator^=(byte&, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__l = std::operator^ (*__l, __r);, __l>>
   >>>;
__builtin_unreachable trap ();


;; Function void std::__uses_alloc0::_Sink::operator=(const void*) (null)
;; enabled by -tree-original





;; Function void std::tuple<>::swap(std::tuple<>&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void* std::pmr::memory_resource::allocate(std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = operator new (__bytes, OBJ_TYPE_REF(*(((struct memory_resource *) this)->_vptr.memory_resource + 16);(struct memory_resource)(struct memory_resource *) this->2B) ((struct memory_resource *) this, __bytes, __alignment))>>;


;; Function void std::pmr::memory_resource::deallocate(void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct memory_resource *) this)->_vptr.memory_resource + 24);(struct memory_resource)(struct memory_resource *) this->3B) ((struct memory_resource *) this, __p, __bytes, __alignment) >>>>>;
return;


;; Function bool std::pmr::memory_resource::is_equal(const std::pmr::memory_resource&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct memory_resource *) this)->_vptr.memory_resource + 32);(const struct memory_resource)(const struct memory_resource *) this->4B) ((const struct memory_resource *) this, __other)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::pmr::operator==(const memory_resource&, const memory_resource&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const struct memory_resource *) __a == (const struct memory_resource *) __b || std::pmr::memory_resource::is_equal ((const struct memory_resource *) __a, __b)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::pmr::operator!=(const memory_resource&, const memory_resource&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::pmr::operator== (__a, __b)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::locale::locale(const std::string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct locale *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::locale::locale ((struct locale *) this, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s)) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function std::locale::locale(const std::locale&, const std::string&, category) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct locale *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::locale::locale ((struct locale *) this, __base, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s), __cat) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function bool std::locale::operator!=(const std::locale&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::locale::operator== ((const struct locale *) this, __other)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::locale::facet::facet(std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct __as_base  &) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct facet *) this)->_vptr.facet = &_ZTVNSt6locale5facetE + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct facet *) this)->_M_refcount = __refs != 0 ? 1 : 0) >>>>>;
  }
   >>>;


;; Function void std::locale::facet::_M_add_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__atomic_add_dispatch (&((const struct facet *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::facet::_M_remove_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((const struct facet *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
        <<cleanup_point <<< Unknown tree: expr_stmt
          if ((struct facet *) this != 0B)
            {
              OBJ_TYPE_REF(*(((struct facet *) this)->_vptr.facet + 8);(struct facet)(struct facet *) this->1B) ((struct facet *) this);
            }
          else
            {
              <<< Unknown tree: void_cst >>>
            } >>>>>
        <<< Unknown tree: handler
          
          try
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
            }
          finally
            {
              __cxa_end_catch ();
            } >>> >>>;
    }
   >>>;


;; Function std::locale::id::id() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct id *) this = {CLOBBER(bob)} >>>>>;
{
  
}


;; Function void std::locale::_Impl::_M_add_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__atomic_add_dispatch (&((struct _Impl *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::_Impl::_M_remove_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Impl *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
        <<cleanup_point <<< Unknown tree: expr_stmt
          if ((struct _Impl *) this != 0B)
            {
              try
                {
                  std::locale::_Impl::~_Impl ((struct _Impl *) this);
                }
              finally
                {
                  operator delete ((void *) this, 40);
                }
            }
          else
            {
              <<< Unknown tree: void_cst >>>
            } >>>>>
        <<< Unknown tree: handler
          
          try
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
            }
          finally
            {
              __cxa_end_catch ();
            } >>> >>>;
    }
   >>>;


;; Function bool std::locale::_Impl::_M_check_same_name() (null)
;; enabled by -tree-original


{
  bool __ret = 1;

  <<cleanup_point   bool __ret = 1;>>;
  {
    if (*(((struct _Impl *) this)->_M_names + 8) != 0B)
      {
        {
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            goto <D.38162>;
            <D.38161>:;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ret = __builtin_strcmp ((const char *) *(((struct _Impl *) this)->_M_names + (sizetype) (__i * 8)), (const char *) *(((struct _Impl *) this)->_M_names + ((sizetype) __i + 1) * 8)) == 0) >>>>>;
            <<cleanup_point (void)  ++__i>>;
            <D.38162>:;
            if (__ret && __i <= 10) goto <D.38161>; else goto <D.38159>;
            <D.38159>:;
          }
        }
      }
  }
  return <retval> = __ret;
}


;; Function bool std::_V2::error_category::operator==(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this == (const struct error_category *) __other
   >>>;
__builtin_unreachable trap ();


;; Function bool std::_V2::error_category::operator<(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::less<const std::_V2::error_category*>::operator() (&TARGET_EXPR <D.39797, {.D.39737={}}>, (const struct error_category *) this, (const struct error_category *) __other)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::_V2::error_category::operator!=(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this != (const struct error_category *) __other
   >>>;
__builtin_unreachable trap ();


;; Function std::error_code::error_code() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct error_code *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_code *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) std::_V2::system_category ()) >>>>>;
  }
   >>>;


;; Function std::error_code::error_code(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct error_code *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_code::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_code::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::error_code::assign ((struct error_code *) this, 0, std::_V2::system_category ()) >>>>>
   >>>;


;; Function int std::error_code::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_code *) this)->_M_value
   >>>;
__builtin_unreachable trap ();


;; Function const std::_V2::error_category& std::error_code::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) ((const struct error_code *) this)->_M_cat
   >>>;
__builtin_unreachable trap ();


;; Function std::string std::error_code::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.39923, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>->4B)
  D.39923
  SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>
  std::error_code::value ((const struct error_code *) this) >>>>>>;


;; Function std::error_code::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct error_code *) this)->_M_value != 0
   >>>;
__builtin_unreachable trap ();


;; Function std::error_code std::make_error_code(errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.39928, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.39928
    (struct error_code *) <<< Unknown tree: void_cst >>>
    (int) __e
    std::_V2::generic_category () >>>>;, D.39928>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator<(const error_code&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) < std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::error_condition::error_condition() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct error_condition *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_condition *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) std::_V2::generic_category ()) >>>>>;
  }
   >>>;


;; Function std::error_condition::error_condition(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct error_condition *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_condition::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_condition::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::error_condition::assign ((struct error_condition *) this, 0, std::_V2::generic_category ()) >>>>>
   >>>;


;; Function int std::error_condition::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_condition *) this)->_M_value
   >>>;
__builtin_unreachable trap ();


;; Function const std::_V2::error_category& std::error_condition::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) ((const struct error_condition *) this)->_M_cat
   >>>;
__builtin_unreachable trap ();


;; Function std::string std::error_condition::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40057, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>->4B)
  D.40057
  SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>
  std::error_condition::value ((const struct error_condition *) this) >>>>>>;


;; Function std::error_condition::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct error_condition *) this)->_M_value != 0
   >>>;
__builtin_unreachable trap ();


;; Function std::error_condition std::make_error_condition(errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.40062, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.40062
    (struct error_condition *) <<< Unknown tree: void_cst >>>
    (int) __e
    std::_V2::generic_category () >>>>;, D.40062>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator==(const error_code&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) == std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator==(const error_code&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>->6B) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>, std::error_code::value ((const struct error_code *) __lhs), __rhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>->7B) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>, __lhs, std::error_condition::value ((const struct error_condition *) __rhs))>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator==(const error_condition&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) == std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator<(const error_condition&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) < std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator==(const error_condition&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>->6B) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>, std::error_code::value ((const struct error_code *) __rhs), __lhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>->7B) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>, __rhs, std::error_condition::value ((const struct error_condition *) __lhs))>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator!=(const error_code&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator!=(const error_code&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator!=(const error_condition&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;
__builtin_unreachable trap ();


;; Function bool std::operator!=(const error_condition&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::system_error::system_error(std::error_code) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.40249, (const struct string &) &TARGET_EXPR <D.40257, <<< Unknown tree: aggr_init_expr
      4
      message
      D.40257
      &__ec >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.40249.D.39355._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.40249);
    }
}


;; Function std::system_error::system_error(std::error_code, const std::string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.40249, (const struct string &) &TARGET_EXPR <D.40276, <<< Unknown tree: aggr_init_expr
      5
      operator+
      D.40276
      (const struct basic_string &) __what
      (struct basic_string &) &TARGET_EXPR <D.40269, <<< Unknown tree: aggr_init_expr
        5
        operator+
        D.40269
        (const char *) ": "
        (struct basic_string &) &TARGET_EXPR <D.40262, <<< Unknown tree: aggr_init_expr
          4
          message
          D.40262
          &__ec >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.40249.D.39355._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.40249);
    }
}


;; Function std::system_error::system_error(std::error_code, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.40249, (const struct string &) &TARGET_EXPR <D.40285, <<< Unknown tree: aggr_init_expr
      5
      operator+
      D.40285
      __what
      (struct basic_string &) &TARGET_EXPR <D.40284, <<< Unknown tree: aggr_init_expr
        5
        operator+
        D.40284
        (const char *) ": "
        (struct basic_string &) &TARGET_EXPR <D.40283, <<< Unknown tree: aggr_init_expr
          4
          message
          D.40283
          &__ec >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.40249.D.39355._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.40249);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::system_error::system_error ((struct system_error *) this, TARGET_EXPR <D.40292, <<< Unknown tree: aggr_init_expr
      6
      __ct_comp 
      D.40292
      (struct error_code *) <<< Unknown tree: void_cst >>>
      __v
      __ecat >>>>, __what) >>>>>;
  try
    {
      
    }
  catch
    {
      std::system_error::~system_error ((struct system_error *) this);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.40249, (const struct string &) &TARGET_EXPR <D.40298, <<< Unknown tree: aggr_init_expr
      4
      message
      D.40298
      &TARGET_EXPR <D.40297, <<< Unknown tree: aggr_init_expr
        6
        __ct_comp 
        D.40297
        (struct error_code *) <<< Unknown tree: void_cst >>>
        __v
        __ecat >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.40249.D.39355._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.40249);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const std::string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.40249, (const struct string &) &TARGET_EXPR <D.40307, <<< Unknown tree: aggr_init_expr
      5
      operator+
      D.40307
      (const struct basic_string &) __what
      (struct basic_string &) &TARGET_EXPR <D.40306, <<< Unknown tree: aggr_init_expr
        5
        operator+
        D.40306
        (const char *) ": "
        (struct basic_string &) &TARGET_EXPR <D.40305, <<< Unknown tree: aggr_init_expr
          4
          message
          D.40305
          &TARGET_EXPR <D.40304, <<< Unknown tree: aggr_init_expr
            6
            __ct_comp 
            D.40304
            (struct error_code *) <<< Unknown tree: void_cst >>>
            __v
            __ecat >>>> >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.40249.D.39355._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.40249);
    }
}


;; Function const std::error_code& std::system_error::code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_code &) &((const struct system_error *) this)->_M_code
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<std::error_code>::operator()(const std::error_code&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &TARGET_EXPR <D.40333, std::error_code::value ((const struct error_code *) __e)>)) >>>>>;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &TARGET_EXPR <D.40337, (const struct error_category *) std::error_code::category ((const struct error_code *) __e)>, (size_t) __tmp)>>;
  }
   >>>;
__builtin_unreachable trap ();


;; Function std::size_t std::hash<std::error_condition>::operator()(const std::error_condition&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &TARGET_EXPR <D.40355, std::error_condition::value ((const struct error_condition *) __e)>)) >>>>>;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &TARGET_EXPR <D.40356, (const struct error_category *) std::error_condition::category ((const struct error_condition *) __e)>, (size_t) __tmp)>>;
  }
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Fmtflags std::operator&(_Ios_Fmtflags, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Fmtflags) ((int) __a & (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Fmtflags std::operator|(_Ios_Fmtflags, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Fmtflags) ((int) __a | (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Fmtflags std::operator^(_Ios_Fmtflags, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Fmtflags) ((int) __a ^ (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Fmtflags std::operator~(_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ~__a
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Fmtflags& std::operator|=(_Ios_Fmtflags&, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Fmtflags &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Fmtflags& std::operator&=(_Ios_Fmtflags&, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Fmtflags &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Fmtflags& std::operator^=(_Ios_Fmtflags&, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Fmtflags &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Openmode std::operator&(_Ios_Openmode, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Openmode) ((int) __a & (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Openmode std::operator|(_Ios_Openmode, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Openmode) ((int) __a | (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Openmode std::operator^(_Ios_Openmode, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Openmode) ((int) __a ^ (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Openmode std::operator~(_Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ~__a
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Openmode& std::operator|=(_Ios_Openmode&, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Openmode &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Openmode& std::operator&=(_Ios_Openmode&, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Openmode &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Openmode& std::operator^=(_Ios_Openmode&, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Openmode &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Iostate std::operator&(_Ios_Iostate, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Iostate) ((int) __a & (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Iostate std::operator|(_Ios_Iostate, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Iostate) ((int) __a | (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Iostate std::operator^(_Ios_Iostate, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Iostate) ((int) __a ^ (int) __b)
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::_Ios_Iostate std::operator~(_Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ~__a
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Iostate& std::operator|=(_Ios_Iostate&, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Iostate &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Iostate& std::operator&=(_Ios_Iostate&, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Iostate &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::_Ios_Iostate& std::operator^=(_Ios_Iostate&, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Iostate &) __a;>>
   >>>;
__builtin_unreachable trap ();


;; Function std::error_code std::make_error_code(io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.40556, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.40556
    (struct error_code *) <<< Unknown tree: void_cst >>>
    (int) __e
    std::iostream_category () >>>>;, D.40556>>
   >>>;
__builtin_unreachable trap ();


;; Function std::error_condition std::make_error_condition(io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.40560, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.40560
    (struct error_condition *) <<< Unknown tree: void_cst >>>
    (int) __e
    std::iostream_category () >>>>;, D.40560>>
   >>>;
__builtin_unreachable trap ();


;; Function std::ios_base::_Callback_list::_Callback_list(std::ios_base::event_callback, int, std::ios_base::_Callback_list*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Callback_list *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Callback_list *) this)->_M_next = __cb) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Callback_list *) this)->_M_fn = __fn) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Callback_list *) this)->_M_index = __index) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Callback_list *) this)->_M_refcount = 0) >>>>>;
}


;; Function void std::ios_base::_Callback_list::_M_add_reference() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, 1) >>>>>;


;; Function int std::ios_base::_Callback_list::_M_remove_reference() (null)
;; enabled by -tree-original


{
  int __res;

    int __res;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __gnu_cxx::__exchange_and_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, -1)) >>>>>;
  if (__res == 0)
    {
      
    }
  return <retval> = __res;
}


;; Function std::ios_base::_Words::_Words() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Words *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Words *) this)->_M_pword = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Words *) this)->_M_iword = 0) >>>>>;
}


;; Function std::ios_base::fmtflags std::ios_base::flags() const (null)
;; enabled by -tree-original


return <retval> = (fmtflags) ((const struct ios_base *) this)->_M_flags;


;; Function std::ios_base::fmtflags std::ios_base::flags(fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct ios_base *) this)->_M_flags = __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(fmtflags, fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator& (__fmtfl, __mask)) >>>>>;
  return <retval> = __old;
}


;; Function void std::ios_base::unsetf(fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;


;; Function std::streamsize std::ios_base::precision() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_precision;


;; Function std::streamsize std::ios_base::precision(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_precision;

    streamsize __old = ((struct ios_base *) this)->_M_precision;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct ios_base *) this)->_M_precision = __prec) >>>>>;
  return <retval> = __old;
}


;; Function std::streamsize std::ios_base::width() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_width;


;; Function std::streamsize std::ios_base::width(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_width;

    streamsize __old = ((struct ios_base *) this)->_M_width;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct ios_base *) this)->_M_width = __wide) >>>>>;
  return <retval> = __old;
}


;; Function std::locale std::ios_base::getloc() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40952, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.40952
  (struct locale *) <<< Unknown tree: void_cst >>>
  (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale >>>>>>;


;; Function const std::locale& std::ios_base::_M_getloc() const (null)
;; enabled by -tree-original


return <retval> = (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale;


;; Function long int& std::ios_base::iword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__word = (unsigned int) ((struct ios_base *) this)->_M_word_size > (unsigned int) __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 1)) >>>>>;
  return <retval> = (long int &) &__word->_M_iword;
}


;; Function void*& std::ios_base::pword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__word = (unsigned int) ((struct ios_base *) this)->_M_word_size > (unsigned int) __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 0)) >>>>>;
  return <retval> = (void * &) &__word->_M_pword;
}


;; Function std::ios_base& std::boolalpha(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noboolalpha(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showbase(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowbase(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showpoint(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowpoint(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showpos(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowpos(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::skipws(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noskipws(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::uppercase(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::nouppercase(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::unitbuf(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::nounitbuf(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::internal(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::left(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 32, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::right(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 128, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::dec(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::hex(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::oct(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 64, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::fixed(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::scientific(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 256, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::hexfloat(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, std::operator| (4, 256), 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::defaultfloat(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 260) >>>>>;
return <retval> = __base;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = locale; long unsigned int <anonymous> = 8; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.41482, {}>>>;


;; Function constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = long int] (null)
;; enabled by -tree-original


if (*__b < *__a)
  {
    return <retval> = __b;
  }
return <retval> = __a;


;; Function std::ctype<char>::char_type std::ctype<char>::toupper(char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.43169._vptr.facet + 16);(const struct ctype)(const struct ctype *) this->2B) ((const struct ctype *) this, (int) __c)>>;


;; Function const std::ctype<char>::char_type* std::ctype<char>::toupper(char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.43169._vptr.facet + 24);(const struct ctype)(const struct ctype *) this->3B) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::tolower(char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.43169._vptr.facet + 32);(const struct ctype)(const struct ctype *) this->4B) ((const struct ctype *) this, (int) __c)>>;


;; Function const std::ctype<char>::char_type* std::ctype<char>::tolower(char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.43169._vptr.facet + 40);(const struct ctype)(const struct ctype *) this->5B) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::widen(char) const (null)
;; enabled by -tree-original


if (((const struct ctype *) this)->_M_widen_ok != 0)
  {
    return <retval> = ((const struct ctype *) this)->_M_widen[(int) (unsigned char) __c];
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.43169._vptr.facet + 48);(const struct ctype)(const struct ctype *) this->6B) ((const struct ctype *) this, (int) __c)>>;


;; Function const char* std::ctype<char>::widen(const char*, const char*, char_type*) const (null)
;; enabled by -tree-original


if (((const struct ctype *) this)->_M_widen_ok == 1)
  {
    if (__builtin_expect (__hi != __lo, 1) != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
      }
    return <retval> = __hi;
  }
if (((const struct ctype *) this)->_M_widen_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.43169._vptr.facet + 56);(const struct ctype)(const struct ctype *) this->7B) ((const struct ctype *) this, __lo, __hi, __to)>>;


;; Function char std::ctype<char>::narrow(char_type, char) const (null)
;; enabled by -tree-original


{
  const char __t;

  if (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] != 0)
    {
      return <retval> = ((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c];
    }
    const char __t;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__t = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.43169._vptr.facet + 64);(const struct ctype)(const struct ctype *) this->8B) ((const struct ctype *) this, (int) __c, (int) __dfault)) >>>>>;
  if (__t != (const char) __dfault)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] = (char) __t) >>>>>;
    }
  return <retval> = (char) __t;
}


;; Function const std::ctype<char>::char_type* std::ctype<char>::narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


if (__builtin_expect (((const struct ctype *) this)->_M_narrow_ok == 1, 1) != 0)
  {
    if (__builtin_expect (__hi != __lo, 1) != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
      }
    return <retval> = __hi;
  }
if (((const struct ctype *) this)->_M_narrow_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::ctype<char>::_M_narrow_init ((const struct ctype *) this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.43169._vptr.facet + 72);(const struct ctype)(const struct ctype *) this->9B) ((const struct ctype *) this, __lo, __hi, (int) __dfault, __to)>>;


;; Function const std::ctype_base::mask* std::ctype<char>::table() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const mask *) ((const struct ctype *) this)->_M_table
   >>>;
__builtin_unreachable trap ();


;; Function virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const char* std::ctype<char>::do_widen(const char*, const char*, char_type*) const (null)
;; enabled by -tree-original


if (__builtin_expect (__hi != __lo, 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
  }
return <retval> = __hi;


;; Function virtual char std::ctype<char>::do_narrow(char_type, char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const std::ctype<char>::char_type* std::ctype<char>::do_narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


if (__builtin_expect (__hi != __lo, 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
  }
return <retval> = __hi;


;; Function bool std::ctype<char>::is(std::ctype_base::mask, char) const (null)
;; enabled by -tree-original


return <retval> = ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) __c * 2)) & __m) != 0;


;; Function const char* std::ctype<char>::is(const char*, const char*, std::ctype_base::mask*) const (null)
;; enabled by -tree-original


goto <D.43599>;
<D.43600>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__vec++  = (mask) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low++  * 2))) >>>>>;
<D.43599>:;
if (__low < __high) goto <D.43600>; else goto <D.43598>;
<D.43598>:;
return <retval> = __high;


;; Function const char* std::ctype<char>::scan_is(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


goto <D.43609>;
<D.43610>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
<D.43609>:;
if (__low < __high && ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low * 2)) & __m) == 0) goto <D.43610>; else goto <D.43608>;
<D.43608>:;
return <retval> = __low;


;; Function const char* std::ctype<char>::scan_not(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


goto <D.43619>;
<D.43620>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
<D.43619>:;
if (__low < __high && ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low * 2)) & __m) != 0) goto <D.43620>; else goto <D.43618>;
<D.43618>:;
return <retval> = __low;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = bool; long unsigned int <anonymous> = 1; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.46344, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = long int; long unsigned int <anonymous> = 8; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.48388, {}>>>;


;; Function int main() (null)
;; enabled by -tree-original


{
  {
    int i = 0;

    <<cleanup_point     int i = 0;>>;
    goto <D.50048>;
    <D.50047>:;
    {
      unsigned int seed = (unsigned int) (i + 1);

            unsigned int seed = (unsigned int) (i + 1);
      <<cleanup_point <<< Unknown tree: expr_stmt
        srand (seed) >>>>>;
      {
        int j = 0;

        <<cleanup_point         int j = 0;>>;
        goto <D.50046>;
        <D.50045>:;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, rand () % 10), (const char *) " ") >>>>>;
        <<cleanup_point (void)  ++j>>;
        <D.50046>:;
        if (j <= 9) goto <D.50045>; else goto <D.50043>;
        <D.50043>:;
      }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
    }
    <<cleanup_point (void)  ++i>>;
    <D.50048>:;
    if (i <= 9) goto <D.50047>; else goto <D.50041>;
    <D.50041>:;
  }
  return <retval> = 0;
}
return <retval> = 0;


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = char; std::size_t = long unsigned int; char_type = char] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.50058>;
  <D.50059>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void)  ++__i >>>>>;
  <D.50058>:;
  if (<<cleanup_point !__gnu_cxx::char_traits<char>::eq ((const char_type &) (__p + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) &TARGET_EXPR <D.50052, 0>)>>) goto <D.50059>; else goto <D.50057>;
  <D.50057>:;
  return <retval> = __i;
}


;; Function static constexpr const __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = char; char_type = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.50073>;
    <D.50072>:;
    if (<<cleanup_point __gnu_cxx::char_traits<char>::eq ((const char_type &) (__s + (sizetype) NON_LVALUE_EXPR <__i>), __a)>>)
      {
        return <retval> = __s + (sizetype) NON_LVALUE_EXPR <__i>;
      }
    <<cleanup_point (void)  ++__i>>;
    <D.50073>:;
    if (__i < __n) goto <D.50072>; else goto <D.50070>;
    <D.50070>:;
  }
  return <retval> = 0B;
}


;; Function static constexpr int __gnu_cxx::char_traits<_CharT>::compare(const char_type*, const char_type*, std::size_t) [with _CharT = wchar_t; char_type = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.50087>;
    <D.50086>:;
    if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.50087>:;
    if (__i < __n) goto <D.50086>; else goto <D.50084>;
    <D.50084>:;
  }
  return <retval> = 0;
}


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = wchar_t; std::size_t = long unsigned int; char_type = wchar_t] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.50097>;
  <D.50098>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void)  ++__i >>>>>;
  <D.50097>:;
  if (<<cleanup_point !__gnu_cxx::char_traits<wchar_t>::eq ((const char_type &) (__p + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.50091, 0>)>>) goto <D.50098>; else goto <D.50096>;
  <D.50096>:;
  return <retval> = __i;
}


;; Function static constexpr const __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = wchar_t; char_type = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.50112>;
    <D.50111>:;
    if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 4);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.50112>:;
    if (__i < __n) goto <D.50111>; else goto <D.50109>;
    <D.50109>:;
  }
  return <retval> = 0B;
}


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = float; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = double; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, 3339675911)>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char; _Traits = std::char_traits<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::basic_string_view<_CharT, _Traits>::value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::basic_string_view<_CharT, _Traits>::value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable trap ();


;; Function constexpr const std::basic_string_view<_CharT, _Traits>::value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, size_type) [with _CharT = char; _Traits = std::char_traits<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string_view *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string_view *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string_view *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string_view *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable trap ();


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.50256, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long int, long int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long int, long int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.50358, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, long int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val <= 18446744071562067967 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long unsigned int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.50445, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long long int, long long int, char, int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long long int, long long int, char, int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.50523, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long int, long long int, char, int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val <= 18446744071562067967 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.50601, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  double __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<double, double, char>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<double, double, char>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.50678, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<double, double, char>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  float __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<float, float, char>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<float, float, char>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((float) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.50755, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<float, float, char>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long double __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long double __tmp;

    long double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long double, long double, char>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long double, long double, char>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((long double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.50832, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long double, long double, char>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER(eob)};
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) &TARGET_EXPR <D.50873, <<< Unknown tree: aggr_init_expr
        4
        __ct_comp 
        D.50873
        (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.50894>;
    <D.50895>:;
    {
      const unsigned int __num = (__val % 100) * 2;

            const unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) __pos) = (char) __digits[(unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.50894>:;
    if (__val > 99) goto <D.50895>; else goto <D.50893>;
    <D.50893>:;
    {
      if (__val > 9)
        {
          {
            const unsigned int __num = __val * 2;

                        const unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*(__first + 1) = (char) __digits[(unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringEiEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>::operator() ((struct type *) std::move<std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>&> ((struct ._anon_82 &) &__op), (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) std::char_traits<char>::copy ((char *) &((struct basic_string *) this)->D.27349._M_local_buf, (const char_type *) &__str->D.27349._M_local_buf, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str) + 1) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __str->D.27349._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char>::_M_use_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringEjEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>::operator() ((struct type *) std::move<std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>&> ((struct ._anon_83 &) &__op), (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.51011>;
    <D.51012>:;
    {
      const long unsigned int __num = (__val % 100) * 2;

            const long unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) __pos) = (char) __digits[(long unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(long unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.51011>:;
    if (__val > 99) goto <D.51012>; else goto <D.51010>;
    <D.51010>:;
    {
      if (__val > 9)
        {
          {
            const long unsigned int __num = __val * 2;

                        const long unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*(__first + 1) = (char) __digits[(long unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(long unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringElEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>::operator() ((struct type *) std::move<std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>&> ((struct ._anon_84 &) &__op), (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringEmEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>::operator() ((struct type *) std::move<std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>&> ((struct ._anon_85 &) &__op), (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.51116>;
    <D.51117>:;
    {
      const long long unsigned int __num = (__val % 100) * 2;

            const long long unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) __pos) = (char) __digits[(long long unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(long long unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.51116>:;
    if (__val > 99) goto <D.51117>; else goto <D.51115>;
    <D.51115>:;
    {
      if (__val > 9)
        {
          {
            const long long unsigned int __num = __val * 2;

                        const long long unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*(__first + 1) = (char) __digits[(long long unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(long long unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringExEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>::operator() ((struct type *) std::move<std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>&> ((struct ._anon_86 &) &__op), (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringEyEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>::operator() ((struct type *) std::move<std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>&> ((struct ._anon_87 &) &__op), (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, __va_list_tag*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<char>; _CharT = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  char * __s;
  struct  __args[1];
  const int __len;

    char * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__s = (char *) __builtin_alloca (NON_LVALUE_EXPR <__n>)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
    __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = __convf (__s, __n, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.51278, <<< Unknown tree: aggr_init_expr
    7
    __ct_comp 
    D.51278
    (struct basic_string *) <<< Unknown tree: void_cst >>>
    __s
    __s + (sizetype) __len
    (const struct allocator &) &TARGET_EXPR <D.51277, <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.51277
      (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable trap ();


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.51341, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long int, long int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long int, long int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.51405, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, long int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val <= 18446744071562067967 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long unsigned int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.51469, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long long int, long long int, wchar_t, int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long long int, long long int, wchar_t, int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.51533, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long int, long long int, wchar_t, int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val <= 18446744071562067967 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.51597, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  float __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<float, float, wchar_t>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<float, float, wchar_t>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((float) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.51660, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<float, float, wchar_t>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  double __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<double, double, wchar_t>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<double, double, wchar_t>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.51723, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<double, double, wchar_t>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long double __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long double __tmp;

    long double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long double, long double, wchar_t>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long double, long double, wchar_t>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((long double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.51786, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long double, long double, wchar_t>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::size() const [with _CharT = char; _Traits = std::char_traits<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable trap ();


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<wchar_t>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<wchar_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<wchar_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<wchar_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER(eob)};
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = const char*; <template-parameter-2-2> = void; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct basic_string *) this)->_M_string_length = 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_construct<const char*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.51834, std::__iterator_category<const char*> ((const char * const &) &__beg)>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator __sv_type() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; __sv_type = std::basic_string_view<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.51904, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.51904
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    std::__cxx11::basic_string<char>::data ((const struct basic_string *) this)
    std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) >>>>;, D.51904>>
   >>>;
__builtin_unreachable trap ();


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<char>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      if (__s == 0B && __n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __s, __s + (sizetype) NON_LVALUE_EXPR <__n>, TARGET_EXPR <D.51915, {.D.12137={}}>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, size_type, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      if (__s == 0B && __n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4), TARGET_EXPR <D.51934, {.D.12137={}}>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char16_t>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char16_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<char16_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char16_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER(eob)};
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, size_type, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      if (__s == 0B && __n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 2), TARGET_EXPR <D.51989, {.D.12137={}}>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char32_t>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char32_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<char32_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char32_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER(eob)};
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, size_type, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      if (__s == 0B && __n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4), TARGET_EXPR <D.52047, {.D.12137={}}>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function constexpr bool std::less<_Tp*>::operator()(_Tp*, _Tp*) const [with _Tp = const std::_V2::error_category] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point std::__is_constant_evaluated ()>>)
    {
      return <retval> = __x < __y;
    }
  return <retval> = (long unsigned int) __x < (long unsigned int) __y;
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const _CharT*, __cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = char_traits<char>; _Alloc = allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.52217, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.52217
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, __lhs)) >>>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const __cxx11::basic_string<_CharT, _Traits, _Allocator>&, __cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = char_traits<char>; _Alloc = allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.52245, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.52245
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, __lhs)) >>>>>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = int; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::__hash_combine(const _Tp&, std::size_t) [with _Tp = const std::_V2::error_category*; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, __hash)>>;


;; Function std::basic_ostream<char, _Traits>& std::operator<<(basic_ostream<char, _Traits>&, const char*) [with _Traits = char_traits<char>] (null)
;; enabled by -tree-original


if (__s == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::basic_ios<char>::setstate ((struct basic_ios *) __out + (sizetype) *(long int *) (((struct basic_ostream *) __out)->_vptr.basic_ostream + 18446744073709551592), 1) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::__ostream_insert<char, std::char_traits<char> > (__out, __s, (streamsize) std::char_traits<char>::length (__s)) >>>>>;
  }
return <retval> = __out;


;; Function std::basic_ostream<_CharT, _Traits>& std::endl(basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::flush<char, std::char_traits<char> > (std::basic_ostream<char>::put ((struct basic_ostream *) __os, (int) std::basic_ios<char>::widen ((struct basic_ios *) __os + (sizetype) *(long int *) (((struct basic_ostream *) __os)->_vptr.basic_ostream + 18446744073709551592), 10)))>>;


;; Function std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(__ostream_type& (*)(__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; __ostream_type = std::basic_ostream<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __pf ((struct __ostream_type &) this)>>;


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = char; char_type = char] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::lt(const char_type&, const char_type&) [with _CharT = wchar_t; char_type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 < *__c2;


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = wchar_t; char_type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; pointer = char*] (null)
;; enabled by -tree-original


return <retval> = (char *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) std::__ptr_traits_ptr_to<char*, char, false>::pointer_to ((element_type &) &((struct basic_string *) this)->D.27349._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<char>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function constexpr void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_init_local_buf() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__n>), (const char_type &) &TARGET_EXPR <D.52310, 0>) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.27349._M_allocated_capacity) >>>>>;
  }


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; allocator_type = std::__cxx11::basic_string<char>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = allocator<char>&; typename remove_reference<_Tp>::type = allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable trap ();


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char>::_M_local_data ((const struct basic_string *) this)>>)
  {
    if (((const struct basic_string *) this)->_M_string_length > 15)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          __builtin_unreachable () >>>>>;
      }
    return <retval> = 1;
  }
return <retval> = 0;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable trap ();


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(pointer) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.27349._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function constexpr std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_use_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; pointer = char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(unsigned int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(unsigned int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable trap ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(long int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(long int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable trap ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(long unsigned int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(long unsigned int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable trap ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(long long int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(long long int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable trap ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(long long unsigned int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(long long unsigned int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct basic_string *) this)->_M_string_length = 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.52358, std::__iterator_category<char*> ((char * const &) &__beg)>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; pointer = wchar_t*] (null)
;; enabled by -tree-original


return <retval> = (wchar_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) std::__ptr_traits_ptr_to<wchar_t*, wchar_t, false>::pointer_to ((element_type &) &((struct basic_string *) this)->D.29199._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<wchar_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.52459, {.D.12147={}}>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const char*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const char*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<wchar_t>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_S_copy_chars<const char*> (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<wchar_t>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<wchar_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.29199._M_allocated_capacity) >>>>>;
  }


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable trap ();


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<char>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<wchar_t>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_M_constructIPKwEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*>(const wchar_t*, const wchar_t*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*>(const wchar_t*, const wchar_t*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::__ptr_traits_ptr_to<char16_t*, char16_t, false>::pointer_to ((element_type &) &((struct basic_string *) this)->D.31168._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<char16_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char16_t>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12_M_constructIPKDsEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const char16_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*>(const char16_t*, const char16_t*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_S_copy_chars (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*>(const char16_t*, const char16_t*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char16_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.31168._M_allocated_capacity) >>>>>;
  }


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::__ptr_traits_ptr_to<char32_t*, char32_t, false>::pointer_to ((element_type &) &((struct basic_string *) this)->D.32677._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<char32_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char32_t>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12_M_constructIPKDiEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const char32_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*>(const char32_t*, const char32_t*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_S_copy_chars (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*>(const char32_t*, const char32_t*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char32_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.32677._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(size_type, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos, 0, __s, std::char_traits<char>::length (__s))>>;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::basic_string<char>&; typename remove_reference<_Tp>::type = __cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable trap ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos1, 0, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function void std::basic_ios<_CharT, _Traits>::setstate(std::ios_base::iostate) [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::ios_base::iostate] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::clear ((struct basic_ios *) this, std::operator| (std::basic_ios<char>::rdstate ((struct basic_ios *) this), __state)) >>>>>;


;; Function std::basic_ios<_CharT, _Traits>::char_type std::basic_ios<_CharT, _Traits>::widen(char) const [with _CharT = char; _Traits = std::char_traits<char>; char_type = char] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::ctype<char>::widen ((const struct ctype *) std::__check_facet<std::ctype<char> > ((const struct __ctype_type *) ((const struct basic_ios *) this)->_M_ctype), (int) __c)>>;


;; Function std::basic_ostream<_CharT, _Traits>& std::flush(basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::basic_ostream<char>::flush ((struct basic_ostream *) __os)>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = char; pointer = char*; element_type = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char *) std::addressof<char> ((char &) __r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char>::__new_allocator ((struct __new_allocator *) this, (const struct __new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator_traits<std::allocator<char> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; const_pointer = const char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::__ptr_traits_ptr_to<const char*, const char, false>::pointer_to ((const element_type &) &((const struct basic_string *) this)->D.27349._M_local_buf)>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.53605, {.D.12147={}}>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = wchar_t; pointer = wchar_t*; element_type = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (wchar_t *) std::addressof<wchar_t> ((wchar_t &) __r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<wchar_t>::__new_allocator ((struct __new_allocator *) this, (const struct __new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<wchar_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char*> (__first, __last, std::__iterator_category<const char*> ((const char * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(pointer) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.29199._M_allocated_capacity = __capacity) >>>>>;


;; Function constexpr void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_init_local_buf() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _Iterator, _Iterator) [with _Iterator = const char*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


goto <D.53732>;
<D.53731>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__p>, (const char_type &) &TARGET_EXPR <D.53728, (char_type) *__k1>) >>>>>;
<<cleanup_point (void)  ++__k1;, (void)  ++__p;>>;
<D.53732>:;
if (__k1 != __k2) goto <D.53731>; else goto <D.53729>;
<D.53729>:;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.53735, 0>) >>>>>;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<wchar_t>::_M_local_data ((const struct basic_string *) this)>>)
  {
    if (((const struct basic_string *) this)->_M_string_length > 3)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          __builtin_unreachable () >>>>>;
      }
    return <retval> = 1;
  }
return <retval> = 0;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator_traits<std::allocator<wchar_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_S_copy (__p, __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const wchar_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const wchar_t*> (__first, __last, std::__iterator_category<const wchar_t*> ((const wchar_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = char16_t; pointer = char16_t*; element_type = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char16_t *) std::addressof<char16_t> ((char16_t &) __r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char16_t>::__new_allocator ((struct __new_allocator *) this, (const struct __new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char16_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char16_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char16_t*> (__first, __last, std::__iterator_category<const char16_t*> ((const char16_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(size_type&, size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*__capacity = std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = std::__cxx11::basic_string<char16_t>::_S_allocate ((struct _Char_alloc_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(pointer) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.31168._M_allocated_capacity = __capacity) >>>>>;


;; Function constexpr void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_init_local_buf() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*] (null)
;; enabled by -tree-original


return <retval> = (char16_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char16_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.53817, 0>) >>>>>;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char16_t>::_M_local_data ((const struct basic_string *) this)>>)
  {
    if (((const struct basic_string *) this)->_M_string_length > 7)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          __builtin_unreachable () >>>>>;
      }
    return <retval> = 1;
  }
return <retval> = 0;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator_traits<std::allocator<char16_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = char32_t; pointer = char32_t*; element_type = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char32_t *) std::addressof<char32_t> ((char32_t &) __r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char32_t>::__new_allocator ((struct __new_allocator *) this, (const struct __new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char32_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char32_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char32_t*> (__first, __last, std::__iterator_category<const char32_t*> ((const char32_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(size_type&, size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*__capacity = std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = std::__cxx11::basic_string<char32_t>::_S_allocate ((struct _Char_alloc_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(pointer) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.32677._M_allocated_capacity = __capacity) >>>>>;


;; Function constexpr void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_init_local_buf() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*] (null)
;; enabled by -tree-original


return <retval> = (char32_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char32_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.53874, 0>) >>>>>;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char32_t>::_M_local_data ((const struct basic_string *) this)>>)
  {
    if (((const struct basic_string *) this)->_M_string_length > 3)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          __builtin_unreachable () >>>>>;
      }
    return <retval> = 1;
  }
return <retval> = 0;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator_traits<std::allocator<char32_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(size_type, size_type, const _CharT*, size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_replace ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_check ((struct basic_string *) this, __pos, (const char *) "basic_string::replace"), std::__cxx11::basic_string<char>::_M_limit ((struct basic_string *) this, __pos, __n1), __s, __n2)>>;


;; Function std::ios_base::iostate std::basic_ios<_CharT, _Traits>::rdstate() const [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::ios_base::iostate] (null)
;; enabled by -tree-original


return <retval> = (iostate) ((const struct basic_ios *) this)->D.46609._M_streambuf_state;


;; Function const _Facet& std::__check_facet(const _Facet*) [with _Facet = ctype<char>] (null)
;; enabled by -tree-original


if (__f == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_bad_cast () >>>>>;
  }
return <retval> = (const struct ctype &) NON_LVALUE_EXPR <__f>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char> (__r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::__new_allocator<_Tp>::__new_allocator(const std::__new_allocator<_Tp>&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = char; allocator_type = std::allocator<char>; pointer = char*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<char>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = const char; pointer = const char*; element_type = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::addressof<const char> ((const char &) __r)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = char*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<char*> (__first, __last, std::__iterator_category<char*> ((char * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_S_copy (__p, (const char *) __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<wchar_t> (__r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::__new_allocator<_Tp>::__new_allocator(const std::__new_allocator<_Tp>&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = const char*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::__ptr_traits_ptr_to<const wchar_t*, const wchar_t, false>::pointer_to ((const element_type &) &((const struct basic_string *) this)->D.29199._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; allocator_type = std::__cxx11::basic_string<wchar_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = wchar_t; allocator_type = std::allocator<wchar_t>; pointer = wchar_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<wchar_t>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::char_traits<char>::copy (__d, __s, __n) >>>>>;
  }


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const wchar_t*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.53979, {.D.12147={}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = const wchar_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::char_traits<wchar_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char16_t> (__r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::__new_allocator<_Tp>::__new_allocator(const std::__new_allocator<_Tp>&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char16_t*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.54008, {.D.12147={}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = const char16_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char16_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;
__builtin_unreachable trap ();


;; Function static std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_allocate(_Char_alloc_type&, size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*; _Char_alloc_type = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  char16_t * __p;

    char16_t * __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::allocator_traits<std::allocator<char16_t> >::allocate ((struct allocator_type &) __a, __n)) >>>>>;
  return <retval> = __p;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; allocator_type = std::__cxx11::basic_string<char16_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char16_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::char_traits<char16_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::__ptr_traits_ptr_to<const char16_t*, const char16_t, false>::pointer_to ((const element_type &) &((const struct basic_string *) this)->D.31168._M_local_buf)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = char16_t; allocator_type = std::allocator<char16_t>; pointer = char16_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<char16_t>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char32_t> (__r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::__new_allocator<_Tp>::__new_allocator(const std::__new_allocator<_Tp>&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char32_t*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.54073, {.D.12147={}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = const char32_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char32_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;
__builtin_unreachable trap ();


;; Function static std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_allocate(_Char_alloc_type&, size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*; _Char_alloc_type = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  char32_t * __p;

    char32_t * __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::allocator_traits<std::allocator<char32_t> >::allocate ((struct allocator_type &) __a, __n)) >>>>>;
  return <retval> = __p;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; allocator_type = std::__cxx11::basic_string<char32_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char32_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::char_traits<char32_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::__ptr_traits_ptr_to<const char32_t*, const char32_t, false>::pointer_to ((const element_type &) &((const struct basic_string *) this)->D.32677._M_local_buf)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = char32_t; allocator_type = std::allocator<char32_t>; pointer = char32_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<char32_t>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check(size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) < __pos>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)) >>>>>;
  }
return <retval> = __pos;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_limit(size_type, size_type) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff;

        const bool __testoff;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__testoff = std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos > __off) >>>>>;
    <<cleanup_point return <retval> = (bool) __testoff ? __off : std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos>>;
  }
   >>>;
__builtin_unreachable trap ();


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char *) __r
   >>>;
__builtin_unreachable trap ();


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, NON_LVALUE_EXPR <__n>, 1) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, NON_LVALUE_EXPR <__n>) >>>>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char> (__r)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = char*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t *) __r
   >>>;
__builtin_unreachable trap ();


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = const wchar_t; pointer = const wchar_t*; element_type = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::addressof<const wchar_t> ((const wchar_t &) __r)>>
   >>>;
__builtin_unreachable trap ();


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = wchar_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, __n * 4, 4) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __n * 4) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char16_t *) __r
   >>>;
__builtin_unreachable trap ();


;; Function const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; allocator_type = std::__cxx11::basic_string<char16_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char16_t; size_type = long unsigned int; allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__new_allocator<char16_t>::max_size ((const struct __new_allocator *) __a)>>
   >>>;
__builtin_unreachable trap ();


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(allocator_type&, size_type) [with _Tp = char16_t; pointer = char16_t*; allocator_type = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::__new_allocator<char16_t>::allocate ((struct __new_allocator *) __a, __n, 0B)>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = const char16_t; pointer = const char16_t*; element_type = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::addressof<const char16_t> ((const char16_t &) __r)>>
   >>>;
__builtin_unreachable trap ();


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char16_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, __n * 2, 2) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __n * 2) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char32_t *) __r
   >>>;
__builtin_unreachable trap ();


;; Function const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; allocator_type = std::__cxx11::basic_string<char32_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char32_t; size_type = long unsigned int; allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__new_allocator<char32_t>::max_size ((const struct __new_allocator *) __a)>>
   >>>;
__builtin_unreachable trap ();


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(allocator_type&, size_type) [with _Tp = char32_t; pointer = char32_t*; allocator_type = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::__new_allocator<char32_t>::allocate ((struct __new_allocator *) __a, __n, 0B)>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = const char32_t; pointer = const char32_t*; element_type = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::addressof<const char32_t> ((const char32_t &) __r)>>
   >>>;
__builtin_unreachable trap ();


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char32_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, __n * 4, 4) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __n * 4) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) __r
   >>>;
__builtin_unreachable trap ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const wchar_t> (__r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::__new_allocator<_Tp>::size_type std::__new_allocator<_Tp>::max_size() const [with _Tp = char16_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__new_allocator<char16_t>::_M_max_size ((const struct __new_allocator *) this)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::__new_allocator<_Tp>::size_type std::__new_allocator<_Tp>::_M_max_size() const [with _Tp = char16_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;
__builtin_unreachable trap ();


;; Function _Tp* std::__new_allocator<_Tp>::allocate(size_type, const void*) [with _Tp = char16_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (std::__new_allocator<char16_t>::_M_max_size ((struct __new_allocator *) this) < __n, 0) != 0>>)
    {
      if ((signed long) __n < 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 2;

          <<cleanup_point           align_val_t __al = 2;>>;
          <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2)>>;
}


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char16_t> (__r)>>
   >>>;
__builtin_unreachable trap ();


;; Function std::__new_allocator<_Tp>::size_type std::__new_allocator<_Tp>::max_size() const [with _Tp = char32_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__new_allocator<char32_t>::_M_max_size ((const struct __new_allocator *) this)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr std::__new_allocator<_Tp>::size_type std::__new_allocator<_Tp>::_M_max_size() const [with _Tp = char32_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2305843009213693951
   >>>;
__builtin_unreachable trap ();


;; Function _Tp* std::__new_allocator<_Tp>::allocate(size_type, const void*) [with _Tp = char32_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (std::__new_allocator<char32_t>::_M_max_size ((struct __new_allocator *) this) < __n, 0) != 0>>)
    {
      if (__n > 4611686018427387903)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 4;

          <<cleanup_point           align_val_t __al = 4;>>;
          <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4)>>;
}


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char32_t> (__r)>>
   >>>;
__builtin_unreachable trap ();


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const wchar_t *) __r
   >>>;
__builtin_unreachable trap ();


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char16_t *) __r
   >>>;
__builtin_unreachable trap ();


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char32_t *) __r
   >>>;
__builtin_unreachable trap ();

