
;; Function void std::__terminate() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    extern void terminate (void);

    <<cleanup_point <<< Unknown tree: expr_stmt
      std::terminate () >>>>>;
  }
   >>>;


;; Function constexpr bool std::__is_constant_evaluated() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function void std::__glibcxx_assert_fail() (null)
;; enabled by -tree-original





;; Function wint_t btowc(int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__c) == 0 || (unsigned int) __c > 127 ? __btowc_alias (__c) : (wint_t) __c>>
   >>>;
__builtin_unreachable ();


;; Function int wctob(wint_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__wc) == 0 || __wc > 127 ? __wctob_alias (__wc) : (int) __wc>>
   >>>;
__builtin_unreachable ();


;; Function size_t mbrlen(const char*, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __ps != 0B ? mbrtowc (0B, __s, __n, __ps) : __mbrlen (__s, __n, 0B)>>
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wmemcpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0)) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n ? __wmemcpy_alias (__s1, __s2, __n) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) / 4 < __n ? __wmemcpy_chk_warn (__s1, __s2, __n, __builtin_dynamic_object_size ((const void *) __s1, 0) / 4) : __wmemcpy_chk (__s1, __s2, __n, __builtin_dynamic_object_size ((const void *) __s1, 0) / 4)>>
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wmemmove(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0)) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n ? __wmemmove_alias (__s1, __s2, __n) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) / 4 < __n ? __wmemmove_chk_warn (__s1, __s2, __n, __builtin_dynamic_object_size ((const void *) __s1, 0) / 4) : __wmemmove_chk (__s1, __s2, __n, __builtin_dynamic_object_size ((const void *) __s1, 0) / 4)>>
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wmempcpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0)) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n ? __wmempcpy_alias (__s1, __s2, __n) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s1, 0) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __s1, 0) / 4 < __n ? __wmempcpy_chk_warn (__s1, __s2, __n, __builtin_dynamic_object_size ((const void *) __s1, 0) / 4) : __wmempcpy_chk (__s1, __s2, __n, __builtin_dynamic_object_size ((const void *) __s1, 0) / 4)>>
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wmemset(wchar_t*, wchar_t, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s, 0)) != 0 && __builtin_dynamic_object_size ((const void *) __s, 0) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s, 0) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __s, 0) / 4 >= __n ? __wmemset_alias (__s, __c, __n) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __s, 0) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __s, 0) / 4 < __n ? __wmemset_chk_warn (__s, __c, __n, __builtin_dynamic_object_size ((const void *) __s, 0) / 4) : __wmemset_chk (__s, __c, __n, __builtin_dynamic_object_size ((const void *) __s, 0) / 4)>>
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wcscpy(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    size_t sz = __builtin_dynamic_object_size ((const void *) __dest, 1);

        size_t sz = __builtin_dynamic_object_size ((const void *) __dest, 1);
    if (sz != 18446744073709551615)
      {
        <<cleanup_point return <retval> = __wcscpy_chk (__dest, __src, sz / 4)>>;
      }
    <<cleanup_point return <retval> = __wcscpy_alias (__dest, __src)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wcpcpy(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    size_t sz = __builtin_dynamic_object_size ((const void *) __dest, 1);

        size_t sz = __builtin_dynamic_object_size ((const void *) __dest, 1);
    if (sz != 18446744073709551615)
      {
        <<cleanup_point return <retval> = __wcpcpy_chk (__dest, __src, sz / 4)>>;
      }
    <<cleanup_point return <retval> = __wcpcpy_alias (__dest, __src)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wcsncpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dest, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __dest, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dest, 1) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __dest, 1) / 4 >= __n ? __wcsncpy_alias (__dest, __src, __n) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dest, 1) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __dest, 1) / 4 < __n ? __wcsncpy_chk_warn (__dest, __src, __n, __builtin_dynamic_object_size ((const void *) __dest, 1) / 4) : __wcsncpy_chk (__dest, __src, __n, __builtin_dynamic_object_size ((const void *) __dest, 1) / 4)>>
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wcpncpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dest, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __dest, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dest, 1) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __dest, 1) / 4 >= __n ? __wcpncpy_alias (__dest, __src, __n) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dest, 1) / 4 >= __n) != 0 && __builtin_dynamic_object_size ((const void *) __dest, 1) / 4 < __n ? __wcpncpy_chk_warn (__dest, __src, __n, __builtin_dynamic_object_size ((const void *) __dest, 1) / 4) : __wcpncpy_chk (__dest, __src, __n, __builtin_dynamic_object_size ((const void *) __dest, 1) / 4)>>
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wcscat(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    size_t sz = __builtin_dynamic_object_size ((const void *) __dest, 1);

        size_t sz = __builtin_dynamic_object_size ((const void *) __dest, 1);
    if (sz != 18446744073709551615)
      {
        <<cleanup_point return <retval> = __wcscat_chk (__dest, __src, sz / 4)>>;
      }
    <<cleanup_point return <retval> = __wcscat_alias (__dest, __src)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function wchar_t* wcsncat(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    size_t sz = __builtin_dynamic_object_size ((const void *) __dest, 1);

        size_t sz = __builtin_dynamic_object_size ((const void *) __dest, 1);
    if (sz != 18446744073709551615)
      {
        <<cleanup_point return <retval> = __wcsncat_chk (__dest, __src, __n, sz / 4)>>;
      }
    <<cleanup_point return <retval> = __wcsncat_alias (__dest, __src, __n)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function size_t wcslcpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_dynamic_object_size ((const void *) __dest, 1) != 18446744073709551615 && (__builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dest, 1) / 4 < __n) == 0 || __builtin_dynamic_object_size ((const void *) __dest, 1) / 4 < __n))
    {
      <<cleanup_point return <retval> = __wcslcpy_chk (__dest, __src, __n, __builtin_dynamic_object_size ((const void *) __dest, 1) / 4)>>;
    }
  <<cleanup_point return <retval> = __wcslcpy_alias (__dest, __src, __n)>>;
   >>>;
__builtin_unreachable ();


;; Function size_t wcslcat(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_dynamic_object_size ((const void *) __dest, 1) != 18446744073709551615 && (__builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dest, 1) / 4 < __n) == 0 || __builtin_dynamic_object_size ((const void *) __dest, 1) / 4 < __n))
    {
      <<cleanup_point return <retval> = __wcslcat_chk (__dest, __src, __n, __builtin_dynamic_object_size ((const void *) __dest, 1) / 4)>>;
    }
  <<cleanup_point return <retval> = __wcslcat_alias (__dest, __src, __n)>>;
   >>>;
__builtin_unreachable ();


;; Function int swprintf(wchar_t*, size_t, const wchar_t*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);

        size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);
    <<cleanup_point return <retval> = __swprintf_chk (__s, __n, 2, sz / 4, __fmt, __builtin_va_arg_pack ())>>;
    <<cleanup_point return <retval> = __swprintf_alias (__s, __n, __fmt, __builtin_va_arg_pack ())>>;
  }
   >>>;
__builtin_unreachable ();


;; Function int vswprintf(wchar_t*, size_t, const wchar_t*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);

        size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);
    <<cleanup_point return <retval> = __vswprintf_chk (__s, __n, 2, sz / 4, __fmt, __ap)>>;
    <<cleanup_point return <retval> = __vswprintf_alias (__s, __n, __fmt, __ap)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function int wprintf(const wchar_t*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __wprintf_chk (2, __fmt, __builtin_va_arg_pack ())>>;


;; Function int fwprintf(__FILE*, const wchar_t*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __fwprintf_chk (__stream, 2, __fmt, __builtin_va_arg_pack ())>>;


;; Function int vwprintf(const wchar_t*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vwprintf_chk (2, __fmt, __ap)>>;


;; Function int vfwprintf(__FILE*, const wchar_t*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vfwprintf_chk (__stream, 2, __fmt, __ap)>>;


;; Function wchar_t* fgetws(wchar_t*, int, __FILE*) (null)
;; enabled by -tree-original


{
  size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);

    size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);
  if (__builtin_constant_p (sz) != 0 && sz == 18446744073709551615 || ((__builtin_constant_p (__n) != 0 && __n > 0) && __builtin_constant_p ((long unsigned int) __n <= sz / 4) != 0) && (long unsigned int) __n <= sz / 4)
    {
      <<cleanup_point return <retval> = __fgetws_alias (__s, __n, __stream)>>;
    }
  if (((__builtin_constant_p (__n) != 0 && __n > 0) && __builtin_constant_p ((long unsigned int) __n <= sz / 4) != 0) && (long unsigned int) __n > sz / 4)
    {
      <<cleanup_point return <retval> = __fgetws_chk_warn (__s, sz / 4, __n, __stream)>>;
    }
  <<cleanup_point return <retval> = __fgetws_chk (__s, sz / 4, __n, __stream)>>;
}


;; Function wchar_t* fgetws_unlocked(wchar_t*, int, __FILE*) (null)
;; enabled by -tree-original


{
  size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);

    size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);
  if (__builtin_constant_p (sz) != 0 && sz == 18446744073709551615 || ((__builtin_constant_p (__n) != 0 && __n > 0) && __builtin_constant_p ((long unsigned int) __n <= sz / 4) != 0) && (long unsigned int) __n <= sz / 4)
    {
      <<cleanup_point return <retval> = __fgetws_unlocked_alias (__s, __n, __stream)>>;
    }
  if (((__builtin_constant_p (__n) != 0 && __n > 0) && __builtin_constant_p ((long unsigned int) __n <= sz / 4) != 0) && (long unsigned int) __n > sz / 4)
    {
      <<cleanup_point return <retval> = __fgetws_unlocked_chk_warn (__s, sz / 4, __n, __stream)>>;
    }
  <<cleanup_point return <retval> = __fgetws_unlocked_chk (__s, sz / 4, __n, __stream)>>;
}


;; Function size_t wcrtomb(char*, wchar_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_dynamic_object_size ((const void *) __s, 1) != 18446744073709551615 && __builtin_dynamic_object_size ((const void *) __s, 1) <= 15)
    {
      <<cleanup_point return <retval> = __wcrtomb_chk (__s, __wchar, __ps, __builtin_dynamic_object_size ((const void *) __s, 1))>>;
    }
  <<cleanup_point return <retval> = __wcrtomb_alias (__s, __wchar, __ps)>>;
   >>>;
__builtin_unreachable ();


;; Function size_t mbsrtowcs(wchar_t*, const char**, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len ? __mbsrtowcs_alias (__dst, __src, __len, __ps) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) / 4 < __len ? __mbsrtowcs_chk_warn (__dst, __src, __len, __ps, __builtin_dynamic_object_size ((const void *) __dst, 1) / 4) : __mbsrtowcs_chk (__dst, __src, __len, __ps, __builtin_dynamic_object_size ((const void *) __dst, 1) / 4)>>
   >>>;
__builtin_unreachable ();


;; Function size_t wcsrtombs(char*, const wchar_t**, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) >= __len ? __wcsrtombs_alias (__dst, __src, __len, __ps) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) < __len ? __wcsrtombs_chk_warn (__dst, __src, __len, __ps, __builtin_dynamic_object_size ((const void *) __dst, 1)) : __wcsrtombs_chk (__dst, __src, __len, __ps, __builtin_dynamic_object_size ((const void *) __dst, 1))>>
   >>>;
__builtin_unreachable ();


;; Function size_t mbsnrtowcs(wchar_t*, const char**, size_t, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len ? __mbsnrtowcs_alias (__dst, __src, __nmc, __len, __ps) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) / 4 < __len ? __mbsnrtowcs_chk_warn (__dst, __src, __nmc, __len, __ps, __builtin_dynamic_object_size ((const void *) __dst, 1) / 4) : __mbsnrtowcs_chk (__dst, __src, __nmc, __len, __ps, __builtin_dynamic_object_size ((const void *) __dst, 1) / 4)>>
   >>>;
__builtin_unreachable ();


;; Function size_t wcsnrtombs(char*, const wchar_t**, size_t, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) >= __len ? __wcsnrtombs_alias (__dst, __src, __nwc, __len, __ps) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) < __len ? __wcsnrtombs_chk_warn (__dst, __src, __nwc, __len, __ps, __builtin_dynamic_object_size ((const void *) __dst, 1)) : __wcsnrtombs_chk (__dst, __src, __nwc, __len, __ps, __builtin_dynamic_object_size ((const void *) __dst, 1))>>
   >>>;
__builtin_unreachable ();


;; Function std::exception::exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception *) this)->_vptr.exception = &_ZTVSt9exception + 16) >>>>>;
  }
   >>>;


;; Function std::bad_exception::bad_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_exception *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::exception::exception (&((struct bad_exception *) this)->D.4355) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_exception *) this)->D.4355._vptr.exception = &_ZTVSt13bad_exception + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_exception *) this)->D.4355);
      }
  }
   >>>;


;; Function const char* std::type_info::name() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *(const char *) ((const struct type_info *) this)->__name == 42 ? (const char *) ((const struct type_info *) this)->__name + 1 : (const char *) ((const struct type_info *) this)->__name
   >>>;
__builtin_unreachable ();


;; Function bool std::type_info::operator!=(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::type_info::operator== ((const struct type_info *) this, __arg)>>
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::type_info::hash_code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_bytes ((const void *) std::type_info::name ((const struct type_info *) this), __builtin_strlen (std::type_info::name ((const struct type_info *) this)), 3339675911)>>
   >>>;
__builtin_unreachable ();


;; Function std::type_info::type_info(const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct type_info *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct type_info *) this)->_vptr.type_info = &_ZTVSt9type_info + 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct type_info *) this)->__name = __n) >>>>>;
}


;; Function bool std::type_info::before(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (*(const char *) ((const struct type_info *) this)->__name != 42 || *(const char *) __arg->__name != 42)
    {
      return <retval> = __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, (const char *) __arg->__name) < 0;
    }
  return <retval> = (const char *) ((const struct type_info *) this)->__name < (const char *) __arg->__name;
   >>>;
__builtin_unreachable ();


;; Function bool std::type_info::operator==(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (0)
    {
      return <retval> = (const struct type_info *) this == (const struct type_info *) __arg;
    }
  if ((const char *) ((const struct type_info *) this)->__name == (const char *) __arg->__name)
    {
      return <retval> = 1;
    }
  <<cleanup_point return <retval> = *(const char *) ((const struct type_info *) this)->__name != 42 && __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, std::type_info::name ((const struct type_info *) __arg)) == 0>>;
   >>>;
__builtin_unreachable ();


;; Function std::bad_cast::bad_cast() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_cast *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::exception::exception (&((struct bad_cast *) this)->D.4549) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_cast *) this)->D.4549._vptr.exception = &_ZTVSt8bad_cast + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_cast *) this)->D.4549);
      }
  }
   >>>;


;; Function std::bad_typeid::bad_typeid() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_typeid *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::exception::exception (&((struct bad_typeid *) this)->D.4583) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_typeid *) this)->D.4583._vptr.exception = &_ZTVSt10bad_typeid + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_typeid *) this)->D.4583);
      }
  }
   >>>;


;; Function std::bad_alloc::bad_alloc() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_alloc *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::exception::exception (&((struct bad_alloc *) this)->D.4638) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_alloc *) this)->D.4638._vptr.exception = &_ZTVSt9bad_alloc + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_alloc *) this)->D.4638);
      }
  }
   >>>;


;; Function std::bad_array_new_length::bad_array_new_length() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct bad_array_new_length *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::bad_alloc::bad_alloc (&((struct bad_array_new_length *) this)->D.4672) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (((struct bad_array_new_length *) this)->D.4672.D.4638._vptr.exception = &_ZTVSt20bad_array_new_length + 16) >>>>>;
      }
    catch
      {
        std::bad_alloc::~bad_alloc (&((struct bad_array_new_length *) this)->D.4672);
      }
  }
   >>>;


;; Function void* operator new(std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;
__builtin_unreachable ();


;; Function void* operator new [](std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;
__builtin_unreachable ();


;; Function void operator delete(void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void operator delete [](void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::nullptr_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception_ptr *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception_ptr *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = __o->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__o->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.8845, <<< Unknown tree: aggr_init_expr
      5
      __ct_comp 
      D.8845
      (struct exception_ptr *) <<< Unknown tree: void_cst >>>
      NON_LVALUE_EXPR <__o> >>>>, (struct exception_ptr &) this) >>>>>;
  return <retval> = (struct exception_ptr &) this;
   >>>;
__builtin_unreachable ();


;; Function std::__exception_ptr::exception_ptr::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (void *) ((const struct exception_ptr *) this)->_M_exception_object != 0B
   >>>;
__builtin_unreachable ();


;; Function bool std::__exception_ptr::operator==(const exception_ptr&, const exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (void *) __x->_M_exception_object == (void *) __y->_M_exception_object
   >>>;
__builtin_unreachable ();


;; Function bool std::__exception_ptr::operator!=(const exception_ptr&, const exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (void *) __x->_M_exception_object != (void *) __y->_M_exception_object
   >>>;
__builtin_unreachable ();


;; Function std::__exception_ptr::exception_ptr::exception_ptr() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception_ptr *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(const std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct exception_ptr *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = (void *) __other->_M_exception_object) >>>>>;
    if (((struct exception_ptr *) this)->_M_exception_object != 0B)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__exception_ptr::exception_ptr::_M_addref ((struct exception_ptr *) this) >>>>>;
      }
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::~exception_ptr() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct exception_ptr *) this)->_M_exception_object != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__exception_ptr::exception_ptr::_M_release ((struct exception_ptr *) this) >>>>>;
          }
      }
    finally
      {
        *(struct exception_ptr *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(const std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.8874, <<< Unknown tree: aggr_init_expr
      5
      __ct_comp 
      D.8874
      (struct exception_ptr *) <<< Unknown tree: void_cst >>>
      __other >>>>, (struct exception_ptr &) this) >>>>>;
  return <retval> = (struct exception_ptr &) this;
   >>>;
__builtin_unreachable ();


;; Function void std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    void * __tmp = ((struct exception_ptr *) this)->_M_exception_object;

        void * __tmp = ((struct exception_ptr *) this)->_M_exception_object;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct exception_ptr *) this)->_M_exception_object = __other->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__other->_M_exception_object = __tmp) >>>>>;
  }
   >>>;


;; Function void std::__exception_ptr::swap(exception_ptr&, exception_ptr&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap ((struct exception_ptr *) __lhs, __rhs) >>>>>;


;; Function std::nested_exception::nested_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct nested_exception *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct nested_exception *) this)->_vptr.nested_exception = &_ZTVSt16nested_exception + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct nested_exception *) this)->_M_ptr = TARGET_EXPR <D.8959, <<< Unknown tree: aggr_init_expr
        3
        current_exception
        D.8959 >>>>) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__exception_ptr::exception_ptr::~exception_ptr (&((struct nested_exception *) this)->_M_ptr);
      }
  }
   >>>;


;; Function void std::nested_exception::rethrow_nested() const (null)
;; enabled by -tree-original


if (<<cleanup_point std::__exception_ptr::exception_ptr::operator bool (&((const struct nested_exception *) this)->_M_ptr)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::rethrow_exception (&TARGET_EXPR <D.8963, <<< Unknown tree: aggr_init_expr
        5
        __ct_comp 
        D.8963
        (struct exception_ptr *) <<< Unknown tree: void_cst >>>
        (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;


;; Function std::__exception_ptr::exception_ptr std::nested_exception::nested_ptr() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.8964, <<< Unknown tree: aggr_init_expr
    5
    __ct_comp 
    D.8964
    (struct exception_ptr *) <<< Unknown tree: void_cst >>>
    (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr void std::char_traits<char>::assign(char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned char) *__c1 < (unsigned char) *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::char_traits<char>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  if (__n == 0)
    {
      return <retval> = 0;
    }
  {
    if (0)
      {
        {
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            goto <D.9244>;
            <D.9243>:;
            if (<<cleanup_point std::char_traits<char>::lt ((const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
              {
                return <retval> = -1;
              }
            else
              {
                if (<<cleanup_point std::char_traits<char>::lt ((const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
                  {
                    return <retval> = 1;
                  }
              }
            <<cleanup_point (void)  ++__i>>;
            <D.9244>:;
            if (__i < __n) goto <D.9243>; else goto <D.9241>;
            <D.9241>:;
          }
          return <retval> = 0;
        }
      }
  }
  return <retval> = __builtin_memcmp ((const void *) __s1, (const void *) __s2, __n);
}


;; Function static constexpr std::size_t std::char_traits<char>::length(const char_type*) (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<char>::length (__s)>>;
  }
return <retval> = __builtin_strlen (__s);


;; Function static constexpr const std::char_traits<char>::char_type* std::char_traits<char>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
if (0)
  {
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<char>::find (__s, __n, (const char_type &) __a)>>;
  }
return <retval> = (const char_type *) __builtin_memchr ((const void *) __s, (int) *__a, __n);


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::move(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::copy(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::assign(char_type*, std::size_t, char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memset ((void *) __s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type std::char_traits<char>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) (unsigned char) *__c
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__c != -1 ? (int_type) *__c : 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr void std::char_traits<wchar_t>::assign(char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<wchar_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::char_traits<wchar_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
if (0)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<wchar_t>::compare (__s1, __s2, __n)>>;
  }
return <retval> = wmemcmp (__s1, __s2, __n);


;; Function static constexpr std::size_t std::char_traits<wchar_t>::length(const char_type*) (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<wchar_t>::length (__s)>>;
  }
return <retval> = wcslen (__s);


;; Function static constexpr const std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
if (0)
  {
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<wchar_t>::find (__s, __n, (const char_type &) __a)>>;
  }
return <retval> = (const char_type *) wmemchr (__s, (char_type) *__a, __n);


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::move(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemmove (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::copy(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemcpy (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::assign(char_type*, std::size_t, char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) wmemset (__s, __a, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type std::char_traits<wchar_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<wchar_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<wchar_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.9467, 4294967295>) ? 0 : (int_type) *__c>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr void std::char_traits<char16_t>::assign(char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char16_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::char_traits<char16_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9552>;
    <D.9551>:;
    if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 2)), (const char_type &) (__s2 + (sizetype) (__i * 2)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 2)), (const char_type &) (__s1 + (sizetype) (__i * 2)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.9552>:;
    if (__i < __n) goto <D.9551>; else goto <D.9549>;
    <D.9549>:;
  }
  return <retval> = 0;
}


;; Function static constexpr std::size_t std::char_traits<char16_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.9560>;
  <D.9561>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void)  ++__i >>>>>;
  <D.9560>:;
  if (<<cleanup_point !std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &TARGET_EXPR <D.9554, 0>)>>) goto <D.9561>; else goto <D.9559>;
  <D.9559>:;
  return <retval> = __i;
}


;; Function static constexpr const std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9571>;
    <D.9570>:;
    if (<<cleanup_point std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 2);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.9571>:;
    if (__i < __n) goto <D.9570>; else goto <D.9568>;
    <D.9568>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::move(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::copy(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::assign(char_type*, std::size_t, char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9576>;
    <D.9575>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char16_t>::assign ((char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &__a) >>>>>;
    <<cleanup_point (void)  ++__i>>;
    <D.9576>:;
    if (__i < __n) goto <D.9575>; else goto <D.9573>;
    <D.9573>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char16_t>::char_type std::char_traits<char16_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char16_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__c != (const char_type) std::char_traits<char16_t>::eof () ? (int_type) *__c : 65533>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char16_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.9585, 65535>) ? 0 : (int_type) *__c>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr void std::char_traits<char32_t>::assign(char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char32_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::char_traits<char32_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9670>;
    <D.9669>:;
    if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.9670>:;
    if (__i < __n) goto <D.9669>; else goto <D.9667>;
    <D.9667>:;
  }
  return <retval> = 0;
}


;; Function static constexpr std::size_t std::char_traits<char32_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.9678>;
  <D.9679>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void)  ++__i >>>>>;
  <D.9678>:;
  if (<<cleanup_point !std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.9672, 0>)>>) goto <D.9679>; else goto <D.9677>;
  <D.9677>:;
  return <retval> = __i;
}


;; Function static constexpr const std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9689>;
    <D.9688>:;
    if (<<cleanup_point std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 4);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.9689>:;
    if (__i < __n) goto <D.9688>; else goto <D.9686>;
    <D.9686>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::move(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::copy(char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::assign(char_type*, std::size_t, char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.9694>;
    <D.9693>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char32_t>::assign ((char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &__a) >>>>>;
    <<cleanup_point (void)  ++__i>>;
    <D.9694>:;
    if (__i < __n) goto <D.9693>; else goto <D.9691>;
    <D.9691>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char32_t>::char_type std::char_traits<char32_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::char_traits<char32_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;
__builtin_unreachable ();


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char32_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.9703, 4294967295>) ? 0 : (int_type) *__c>>
   >>>;
__builtin_unreachable ();


;; Function int std::__convert_from_v(__locale_struct* const&, char*, int, const char*, ...) (null)
;; enabled by -tree-original


{
  struct __locale_struct * __old;
  struct  __args[1];
  const int __ret;

    struct __locale_struct * __old;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__old = __gnu_cxx::__uselocale ((struct __locale_struct *) *__cloc)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
    __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __ret;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__ret = __builtin_vsnprintf (__out, (long unsigned int) __size, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) __gnu_cxx::__uselocale (__old) >>>>>;
  return <retval> = (int) __ret;
}


;; Function __pthread_cleanup_class::__pthread_cleanup_class(void (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __pthread_cleanup_class *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct __pthread_cleanup_class *) this)->__cancel_routine = __fct) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct __pthread_cleanup_class *) this)->__cancel_arg = __arg) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct __pthread_cleanup_class *) this)->__do_it = 1) >>>>>;
}


;; Function __pthread_cleanup_class::~__pthread_cleanup_class() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct __pthread_cleanup_class *) this)->__do_it != 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              ((struct __pthread_cleanup_class *) this)->__cancel_routine (((struct __pthread_cleanup_class *) this)->__cancel_arg) >>>>>;
          }
      }
    finally
      {
        *(struct __pthread_cleanup_class *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void __pthread_cleanup_class::__setdoit(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__do_it = __newval) >>>>>;


;; Function void __pthread_cleanup_class::__defer() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype (0, &((struct __pthread_cleanup_class *) this)->__cancel_type) >>>>>;


;; Function void __pthread_cleanup_class::__restore() const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype ((int) ((const struct __pthread_cleanup_class *) this)->__cancel_type, 0B) >>>>>;


;; Function int pthread_equal(pthread_t, pthread_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __thread1 == __thread2
   >>>;
__builtin_unreachable ();


;; Function int __gthread_active_p() (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function int __gthread_create(__gthread_t*, void* (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_create (__threadid, 0B, __func, __args)>>;


;; Function int __gthread_join(__gthread_t, void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_join (__threadid, __value_ptr)>>;


;; Function int __gthread_detach(__gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_detach (__threadid)>>;


;; Function int __gthread_equal(__gthread_t, __gthread_t) (null)
;; enabled by -tree-original


return <retval> = pthread_equal (__t1, __t2);


;; Function __gthread_t __gthread_self() (null)
;; enabled by -tree-original


return <retval> = pthread_self ();


;; Function int __gthread_yield() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = sched_yield ()>>;


;; Function int __gthread_once(__gthread_once_t*, void (*)()) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_once (__once, __func)>>;
  }
else
  {
    return <retval> = -1;
  }
__builtin_unreachable ();


;; Function int __gthread_key_create(__gthread_key_t*, void (*)(void*)) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_key_create (__key, __dtor)>>;


;; Function int __gthread_key_delete(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_key_delete (__key)>>;


;; Function void* __gthread_getspecific(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_getspecific (__key)>>;


;; Function int __gthread_setspecific(__gthread_key_t, const void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_setspecific (__key, __ptr)>>;


;; Function void __gthread_mutex_init_function(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) pthread_mutex_init (__mutex, 0B) >>>>>;
  }


;; Function int __gthread_mutex_destroy(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_destroy (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_mutex_lock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_lock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_mutex_trylock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_trylock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_mutex_timedlock(__gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_timedlock (__mutex, __abs_timeout)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_mutex_unlock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_unlock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }
__builtin_unreachable ();


;; Function int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_lock (__mutex)>>;


;; Function int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_trylock (__mutex)>>;


;; Function int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_timedlock (__mutex, __abs_timeout)>>;


;; Function int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_unlock (__mutex)>>;


;; Function int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_destroy (__mutex)>>;


;; Function int __gthread_cond_broadcast(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_broadcast (__cond)>>;


;; Function int __gthread_cond_signal(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_signal (__cond)>>;


;; Function int __gthread_cond_wait(__gthread_cond_t*, __gthread_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_timedwait(__gthread_cond_t*, __gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_timedwait (__cond, __mutex, __abs_timeout)>>;


;; Function int __gthread_cond_wait_recursive(__gthread_cond_t*, __gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_destroy(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_destroy (__cond)>>;


;; Function bool __gnu_cxx::__is_single_threaded() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __libc_single_threaded != 0
   >>>;
__builtin_unreachable ();


;; Function _Atomic_word __gnu_cxx::__exchange_and_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4)>>;


;; Function void __gnu_cxx::__atomic_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


{
  _Atomic_word __result = *__mem;

    _Atomic_word __result = *__mem;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__mem = *__mem + __val) >>>>>;
  return <retval> = __result;
}


;; Function void __gnu_cxx::__atomic_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::__is_single_threaded ()>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add_single (__mem, __val)>>;
  }
else
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add ((volatile _Atomic_word *) __mem, __val)>>;
  }
__builtin_unreachable ();


;; Function void __gnu_cxx::__atomic_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::__is_single_threaded ()>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      __gnu_cxx::__atomic_add_single (__mem, __val) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      __gnu_cxx::__atomic_add ((volatile _Atomic_word *) __mem, __val) >>>>>;
  }


;; Function constexpr bool __gnu_cxx::__is_null_pointer(std::nullptr_t) (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr __gnu_cxx::__ops::_Iter_less_iter __gnu_cxx::__ops::__iter_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17174, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val::_Iter_less_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_less_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17251, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_comp_val(_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17256, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter::_Val_less_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17322, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_comp_iter(_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17327, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17367, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_equal_to_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17416, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_comp_val(_Iter_equal_to_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17429, {}>>>;


;; Function constexpr int std::__size_to_integer(int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr unsigned int std::__size_to_integer(unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long int std::__size_to_integer(long int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long unsigned int std::__size_to_integer(long unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long int std::__size_to_integer(long long int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long unsigned int std::__size_to_integer(long long unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr __int128 std::__size_to_integer(__int128) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr __int128 unsigned std::__size_to_integer(__int128 unsigned) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long int std::__size_to_integer(float) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr long long int std::__size_to_integer(double) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr long long int std::__size_to_integer(long double) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr long long int std::__size_to_integer(__float128) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function static std::allocator_traits<std::allocator<void> >::allocator_type std::allocator_traits<std::allocator<void> >::select_on_container_copy_construction(const allocator_type&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.21371, *(const struct allocator &) __rhs>>>;


;; Function std::size_t std::hash<bool>::operator()(bool) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<char>::operator()(char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<signed char>::operator()(signed char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<unsigned char>::operator()(unsigned char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<wchar_t>::operator()(wchar_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<char16_t>::operator()(char16_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<char32_t>::operator()(char32_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<short int>::operator()(short int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<int>::operator()(int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<long int>::operator()(long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<long long int>::operator()(long long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<short unsigned int>::operator()(short unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<unsigned int>::operator()(unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<long unsigned int>::operator()(long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<long long unsigned int>::operator()(long long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<__int128>::operator()(__int128) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<__int128 unsigned>::operator()(__int128 unsigned) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;
__builtin_unreachable ();


;; Function static std::size_t std::_Hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_bytes (__ptr, __clength, __seed)>>;


;; Function static std::size_t std::_Fnv_hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Fnv_hash_bytes (__ptr, __clength, __seed)>>;


;; Function std::size_t std::hash<float>::operator()(float) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<float> ((const float &) &__val) : 0>>
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<double>::operator()(double) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<double> ((const double &) &__val) : 0>>
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::nullptr_t>::operator()(std::nullptr_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function constexpr std::size_t std::__sv_check(size_t, size_t, const char*) (null)
;; enabled by -tree-original


if (__pos > __size)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > __size (which is %zu)", __s, __pos, __size) >>>>>;
  }
return <retval> = __pos;


;; Function constexpr std::size_t std::__sv_limit(size_t, size_t, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff = __size - __pos > __off;

        const bool __testoff = __size - __pos > __off;
    return <retval> = (bool) __testoff ? __off : __size - __pos;
  }
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::basic_string_view<_CharT, _Traits>::value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char; _Traits = std::char_traits<char>; const_pointer = const char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char; _Traits = std::char_traits<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::basic_string_view<char> >::operator()(const std::string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char>::data ((const struct string_view *) __str), std::basic_string_view<char>::length ((const struct string_view *) __str), 3339675911)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::basic_string_view<_CharT, _Traits>::value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::basic_string_view<wchar_t> >::operator()(const std::wstring_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<wchar_t>::data ((const struct wstring_view *) __s), std::basic_string_view<wchar_t>::length ((const struct wstring_view *) __s) * 4, 3339675911)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::basic_string_view<_CharT, _Traits>::value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::basic_string_view<char16_t> >::operator()(const std::u16string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char16_t>::data ((const struct u16string_view *) __s), std::basic_string_view<char16_t>::length ((const struct u16string_view *) __s) * 2, 3339675911)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::basic_string_view<_CharT, _Traits>::value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::basic_string_view<char32_t> >::operator()(const std::u32string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char32_t>::data ((const struct u32string_view *) __s), std::basic_string_view<char32_t>::length ((const struct u32string_view *) __s) * 4, 3339675911)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<char> std::literals::string_view_literals::operator""sv(const char*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.23895, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.23895
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    __str
    __len >>>>;, D.23895>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<wchar_t> std::literals::string_view_literals::operator""sv(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.23913, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.23913
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    __str
    __len >>>>;, D.23913>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<char16_t> std::literals::string_view_literals::operator""sv(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.23931, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.23931
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    __str
    __len >>>>;, D.23931>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::basic_string_view<char32_t> std::literals::string_view_literals::operator""sv(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.23949, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.23949
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    __str
    __len >>>>;, D.23949>>
   >>>;
__builtin_unreachable ();


;; Function int atoi(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (int) strtol (__nptr, 0B, 10)>>
   >>>;
__builtin_unreachable ();


;; Function long int atol(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = strtol (__nptr, 0B, 10)>>
   >>>;
__builtin_unreachable ();


;; Function long long int atoll(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = strtoll (__nptr, 0B, 10)>>
   >>>;
__builtin_unreachable ();


;; Function __uint16_t __bswap_16(__uint16_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap16 ((int) __bsx);


;; Function __uint32_t __bswap_32(__uint32_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap32 (__bsx);


;; Function __uint64_t __bswap_64(__uint64_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap64 (__bsx);


;; Function __uint16_t __uint16_identity(__uint16_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function __uint32_t __uint32_identity(__uint32_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function __uint64_t __uint64_identity(__uint64_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function void* bsearch(const void*, const void*, size_t, size_t, __compar_fn_t) (null)
;; enabled by -tree-original


{
  size_t __l;
  size_t __u;
  size_t __idx;
  const void * __p;
  int __comparison;

    size_t __l;
    size_t __u;
    size_t __idx;
    const void * __p;
    int __comparison;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__l = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__u = __nmemb) >>>>>;
  goto <D.26749>;
  <D.26750>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__idx = (__l + __u) / 2) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = __base + (sizetype) (__idx * __size)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__comparison = __compar (__key, __p)) >>>>>;
  if (__comparison < 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__u = __idx) >>>>>;
    }
  else
    {
      if (__comparison > 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__l = __idx + 1) >>>>>;
        }
      else
        {
          return <retval> = (void *) __p;
        }
    }
  <D.26749>:;
  if (__l < __u) goto <D.26750>; else goto <D.26748>;
  <D.26748>:;
  return <retval> = 0B;
}


;; Function double atof(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = strtod (__nptr, 0B)>>
   >>>;
__builtin_unreachable ();


;; Function char* realpath(const char*, char*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    size_t sz = __builtin_dynamic_object_size ((const void *) __resolved, 1);

        size_t sz = __builtin_dynamic_object_size ((const void *) __resolved, 1);
    if (sz == 18446744073709551615)
      {
        <<cleanup_point return <retval> = __realpath_alias (__name, __resolved)>>;
      }
    <<cleanup_point return <retval> = __realpath_chk (__name, __resolved, sz)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function int ptsname_r(int, char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __buf, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __buf, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __buf, 1) >= __buflen) != 0 && __builtin_dynamic_object_size ((const void *) __buf, 1) >= __buflen ? __ptsname_r_alias (__fd, __buf, __buflen) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __buf, 1) >= __buflen) != 0 && __builtin_dynamic_object_size ((const void *) __buf, 1) < __buflen ? __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_dynamic_object_size ((const void *) __buf, 1)) : __ptsname_r_chk (__fd, __buf, __buflen, __builtin_dynamic_object_size ((const void *) __buf, 1))>>
   >>>;
__builtin_unreachable ();


;; Function int wctomb(char*, wchar_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_dynamic_object_size ((const void *) __s, 1) != 18446744073709551615 && __builtin_dynamic_object_size ((const void *) __s, 1) <= 15)
    {
      <<cleanup_point return <retval> = __wctomb_chk (__s, __wchar, __builtin_dynamic_object_size ((const void *) __s, 1))>>;
    }
  <<cleanup_point return <retval> = __wctomb_alias (__s, __wchar)>>;
   >>>;
__builtin_unreachable ();


;; Function size_t mbstowcs(wchar_t*, const char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_constant_p (__dst == 0B) != 0 && __dst == 0B)
    {
      <<cleanup_point return <retval> = __mbstowcs_nulldst (__dst, __src, __len)>>;
    }
  else
    {
      <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len ? __mbstowcs_alias (__dst, __src, __len) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) / 4 >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) / 4 < __len ? __mbstowcs_chk_warn (__dst, __src, __len, __builtin_dynamic_object_size ((const void *) __dst, 1) / 4) : __mbstowcs_chk (__dst, __src, __len, __builtin_dynamic_object_size ((const void *) __dst, 1) / 4)>>;
    }
   >>>;
__builtin_unreachable ();


;; Function size_t wcstombs(char*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1)) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) == 18446744073709551615 || __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) >= __len ? __wcstombs_alias (__dst, __src, __len) : __builtin_constant_p (__builtin_dynamic_object_size ((const void *) __dst, 1) >= __len) != 0 && __builtin_dynamic_object_size ((const void *) __dst, 1) < __len ? __wcstombs_chk_warn (__dst, __src, __len, __builtin_dynamic_object_size ((const void *) __dst, 1)) : __wcstombs_chk (__dst, __src, __len, __builtin_dynamic_object_size ((const void *) __dst, 1))>>
   >>>;
__builtin_unreachable ();


;; Function long int std::abs(long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__i>;


;; Function long long int std::abs(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr double std::abs(double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::abs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::abs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __int128 std::abs(__int128) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __float128 std::abs(__float128) (null)
;; enabled by -tree-original


return <retval> = (__float128) ABS_EXPR <(_Float128) __x>;


;; Function ldiv_t std::div(long int, long int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.27079, ldiv (__i, __j)>>>
   >>>;
__builtin_unreachable ();


;; Function lldiv_t __gnu_cxx::div(long long int, long long int) (null)
;; enabled by -tree-original


{
  struct lldiv_t __q;

    struct lldiv_t __q;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__q.quot = __n / __d) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__q.rem = __n % __d) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.27130, *(struct lldiv_t &) &__q>>>;
}


;; Function int getchar() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = getc (stdin)>>;


;; Function int fgetc_unlocked(FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ >>;


;; Function int getc_unlocked(FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ >>;


;; Function int getchar_unlocked() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (stdin->_IO_read_ptr >= stdin->_IO_read_end, 0) != 0 ? __uflow (stdin) : (int) *(unsigned char *) stdin->_IO_read_ptr++ >>;


;; Function int putchar(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = putc (__c, stdout)>>;


;; Function int fputc_unlocked(int, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c)>>;


;; Function int putc_unlocked(int, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c)>>;


;; Function int putchar_unlocked(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (stdout->_IO_write_ptr >= stdout->_IO_write_end, 0) != 0 ? __overflow (stdout, (int) (unsigned char) __c) : (int) (unsigned char) (*stdout->_IO_write_ptr++  = (char) __c)>>;


;; Function __ssize_t getline(char**, size_t*, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __getdelim (__lineptr, __n, 10, __stream)>>;


;; Function int feof_unlocked(FILE*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (__stream->_flags & 16) != 0
   >>>;
__builtin_unreachable ();


;; Function int ferror_unlocked(FILE*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (__stream->_flags & 32) != 0
   >>>;
__builtin_unreachable ();


;; Function int sprintf(char*, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin___sprintf_chk (__s, 2, __builtin_dynamic_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ())>>
   >>>;
__builtin_unreachable ();


;; Function int vsprintf(char*, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin___vsprintf_chk (__s, 2, __builtin_dynamic_object_size ((const void *) __s, 1), __fmt, __ap)>>
   >>>;
__builtin_unreachable ();


;; Function int snprintf(char*, size_t, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin___snprintf_chk (__s, __n, 2, __builtin_dynamic_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ())>>
   >>>;
__builtin_unreachable ();


;; Function int vsnprintf(char*, size_t, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __builtin___vsnprintf_chk (__s, __n, 2, __builtin_dynamic_object_size ((const void *) __s, 1), __fmt, __ap)>>
   >>>;
__builtin_unreachable ();


;; Function int fprintf(FILE*, const char*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __fprintf_chk (__stream, 2, __fmt, __builtin_va_arg_pack ())>>;


;; Function int printf(const char*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __printf_chk (2, __fmt, __builtin_va_arg_pack ())>>;


;; Function int vprintf(const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vfprintf_chk (stdout, 2, __fmt, __ap)>>;


;; Function int vfprintf(FILE*, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vfprintf_chk (__stream, 2, __fmt, __ap)>>;


;; Function int dprintf(int, const char*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __dprintf_chk (__fd, 2, __fmt, __builtin_va_arg_pack ())>>;


;; Function int vdprintf(int, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vdprintf_chk (__fd, 2, __fmt, __ap)>>;


;; Function int asprintf(char**, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __asprintf_chk (__ptr, 2, __fmt, __builtin_va_arg_pack ())>>
   >>>;
__builtin_unreachable ();


;; Function int __asprintf(char**, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __asprintf_chk (__ptr, 2, __fmt, __builtin_va_arg_pack ())>>
   >>>;
__builtin_unreachable ();


;; Function int obstack_printf(obstack*, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __obstack_printf_chk (__obstack, 2, __fmt, __builtin_va_arg_pack ())>>
   >>>;
__builtin_unreachable ();


;; Function int vasprintf(char**, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __vasprintf_chk (__ptr, 2, __fmt, __ap)>>
   >>>;
__builtin_unreachable ();


;; Function int obstack_vprintf(obstack*, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __obstack_vprintf_chk (__obstack, 2, __fmt, __ap)>>
   >>>;
__builtin_unreachable ();


;; Function char* fgets(char*, int, FILE*) (null)
;; enabled by -tree-original


{
  size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);

    size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);
  if (__builtin_constant_p (sz) != 0 && sz == 18446744073709551615 || ((__builtin_constant_p (__n) != 0 && __n > 0) && __builtin_constant_p ((long unsigned int) __n <= NON_LVALUE_EXPR <sz>) != 0) && (long unsigned int) __n <= NON_LVALUE_EXPR <sz>)
    {
      <<cleanup_point return <retval> = __fgets_alias (__s, __n, __stream)>>;
    }
  if (((__builtin_constant_p (__n) != 0 && __n > 0) && __builtin_constant_p ((long unsigned int) __n <= NON_LVALUE_EXPR <sz>) != 0) && (long unsigned int) __n > NON_LVALUE_EXPR <sz>)
    {
      <<cleanup_point return <retval> = __fgets_chk_warn (__s, sz, __n, __stream)>>;
    }
  <<cleanup_point return <retval> = __fgets_chk (__s, sz, __n, __stream)>>;
}


;; Function size_t fread(void*, size_t, size_t, FILE*) (null)
;; enabled by -tree-original


{
  size_t sz = __builtin_dynamic_object_size ((const void *) __ptr, 0);

    size_t sz = __builtin_dynamic_object_size ((const void *) __ptr, 0);
  if (__builtin_constant_p (sz) != 0 && sz == 18446744073709551615 || __builtin_constant_p (sz / __size >= __n) != 0 && sz / __size >= __n)
    {
      <<cleanup_point return <retval> = __fread_alias (__ptr, __size, __n, __stream)>>;
    }
  if (__builtin_constant_p (sz / __size >= __n) != 0 && sz / __size < __n)
    {
      <<cleanup_point return <retval> = __fread_chk_warn (__ptr, sz, __size, __n, __stream)>>;
    }
  <<cleanup_point return <retval> = __fread_chk (__ptr, sz, __size, __n, __stream)>>;
}


;; Function char* fgets_unlocked(char*, int, FILE*) (null)
;; enabled by -tree-original


{
  size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);

    size_t sz = __builtin_dynamic_object_size ((const void *) __s, 1);
  if (__builtin_constant_p (sz) != 0 && sz == 18446744073709551615 || ((__builtin_constant_p (__n) != 0 && __n > 0) && __builtin_constant_p ((long unsigned int) __n <= NON_LVALUE_EXPR <sz>) != 0) && (long unsigned int) __n <= NON_LVALUE_EXPR <sz>)
    {
      <<cleanup_point return <retval> = __fgets_unlocked_alias (__s, __n, __stream)>>;
    }
  if (((__builtin_constant_p (__n) != 0 && __n > 0) && __builtin_constant_p ((long unsigned int) __n <= NON_LVALUE_EXPR <sz>) != 0) && (long unsigned int) __n > NON_LVALUE_EXPR <sz>)
    {
      <<cleanup_point return <retval> = __fgets_unlocked_chk_warn (__s, sz, __n, __stream)>>;
    }
  <<cleanup_point return <retval> = __fgets_unlocked_chk (__s, sz, __n, __stream)>>;
}


;; Function size_t fread_unlocked(void*, size_t, size_t, FILE*) (null)
;; enabled by -tree-original


{
  size_t sz = __builtin_dynamic_object_size ((const void *) __ptr, 0);

    size_t sz = __builtin_dynamic_object_size ((const void *) __ptr, 0);
  {
    if (__builtin_constant_p (sz) != 0 && sz == 18446744073709551615 || __builtin_constant_p (sz / __size >= __n) != 0 && sz / __size >= __n)
      {
        {
          {
            if (((__builtin_constant_p (__size) != 0 && __builtin_constant_p (__n) != 0) && (__size | __n) <= 4294967295) && __size * __n <= 8)
              {
                {
                  size_t __cnt = __size * __n;
                  char * __cptr = (char *) __ptr;

                                    size_t __cnt = __size * __n;
                                    char * __cptr = (char *) __ptr;
                  if (__cnt == 0)
                    {
                      return <retval> = 0;
                    }
                  {
                    goto <D.27937>;
                    <D.27936>:;
                    {
                      int __c;

                                            int __c;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__c = getc_unlocked (__stream)) >>>>>;
                      if (__c == -1) goto <D.27934>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (*__cptr++  = (char) __c) >>>>>;
                    }
                    <<cleanup_point (void)  --__cnt>>;
                    <D.27937>:;
                    if (__cnt != 0) goto <D.27936>; else goto <D.27934>;
                    <D.27934>:;
                  }
                  return <retval> = (long unsigned int) (__cptr - (char *) __ptr) / __size;
                }
              }
          }
          <<cleanup_point return <retval> = __fread_unlocked_alias (__ptr, __size, __n, __stream)>>;
        }
      }
  }
  if (__builtin_constant_p (sz / __size >= __n) != 0 && sz / __size < __n)
    {
      <<cleanup_point return <retval> = __fread_unlocked_chk_warn (__ptr, sz, __size, __n, __stream)>>;
    }
  <<cleanup_point return <retval> = __fread_unlocked_chk (__ptr, sz, __size, __n, __stream)>>;
}


;; Function int std::__cxx11::stoi(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, char, int> ((long int (*<T50a8>) (const char *, char * *, int)) strtol, (const char *) "stoi", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, long int, char, int> ((long int (*<T50a8>) (const char *, char * *, int)) strtol, (const char *) "stol", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int> ((long unsigned int (*<T50ba>) (const char *, char * *, int)) strtoul, (const char *) "stoul", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int, long long int, char, int> ((long long int (*<T50c3>) (const char *, char * *, int)) strtoll, (const char *) "stoll", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const std::string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int> ((long long unsigned int (*<T50cd>) (const char *, char * *, int)) strtoull, (const char *) "stoull", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function double std::__cxx11::stod(const std::string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double, double, char> ((double (*<T50d6>) (const char *, char * *)) strtod, (const char *) "stod", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function float std::__cxx11::stof(const std::string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float, float, char> ((float (*<T50e0>) (const char *, char * *)) strtof, (const char *) "stof", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const std::string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double, long double, char> ((long double (*<T50ea>) (const char *, char * *)) strtold, (const char *) "stold", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function constexpr std::integral_constant<_Tp, __v>::operator value_type() const [with _Tp = bool; _Tp __v = true; value_type = bool] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;
__builtin_unreachable ();


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = allocator<char>; long unsigned int <anonymous> = 1; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.29540, {}>>>;


;; Function std::__cxx11::to_string(int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const bool __neg [value-expr: __closure->____neg];
  const unsigned int __len [value-expr: __closure->____len];
  const unsigned int __uval [value-expr: __closure->____uval];

    const bool __neg [value-expr: __closure->____neg];
    const unsigned int __len [value-expr: __closure->____len];
    const unsigned int __uval [value-expr: __closure->____uval];
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*NON_LVALUE_EXPR <__p> = 45) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<unsigned int> (__p + (sizetype) __neg, (unsigned int) __len, (unsigned int) __uval) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __neg = __val < 0;
    const unsigned int __uval = (bool) __neg ? -(unsigned int) __val : (unsigned int) __val;
    const unsigned int __len;
    struct string __str [value-expr: *<retval>];
    typedef struct ._anon_82 ._anon_82;
    bool D.29644 = 0;

        bool D.29644 = 0;
        const bool __neg = __val < 0;
        const unsigned int __uval = (bool) __neg ? -(unsigned int) __val : (unsigned int) __val;
        const unsigned int __len;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__len = std::__detail::__to_chars_len<unsigned int> ((unsigned int) __uval, 10)) >>>>>;
    (void) 0;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), TARGET_EXPR <D.29575, {.____neg=(bool) __neg, .____len=(unsigned int) __len, .____uval=(unsigned int) __uval}>) >>>>>;
        <<cleanup_point return *<retval>;, D.29644 = 1;>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
      }
  }
   >>>;
__builtin_unreachable ();


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.29667>:;
    if (__value < (unsigned int) __base)
      {
        return <retval> = __n;
      }
    if (__value < (unsigned int) __b2)
      {
        return <retval> = __n + 1;
      }
    if (__value < (unsigned int) __b3)
      {
        return <retval> = __n + 2;
      }
    if ((long unsigned int) __value < (long unsigned int) __b4)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__value = (unsigned int) ((long unsigned int) __value / (long unsigned int) __b4)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__n = __n + 4) >>>>>;
    goto <D.29667>;
  }
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const unsigned int __val [value-expr: __closure->____val];

    const unsigned int __val [value-expr: __closure->____val];
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<unsigned int> (__p, (unsigned int) __n, (unsigned int) __val) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(unsigned int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const unsigned int __len;
    struct string __str [value-expr: *<retval>];
    typedef struct ._anon_83 ._anon_83;
    bool D.29695 = 0;

        bool D.29695 = 0;
        const unsigned int __len;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__len = std::__detail::__to_chars_len<unsigned int> (__val, 10)) >>>>>;
    (void) 0;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) __len, TARGET_EXPR <D.29680, {.____val=__val}>) >>>>>;
        <<cleanup_point return *<retval>;, D.29695 = 1;>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
      }
  }
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const bool __neg [value-expr: __closure->____neg];
  const unsigned int __len [value-expr: __closure->____len];
  const long unsigned int __uval [value-expr: __closure->____uval];

    const bool __neg [value-expr: __closure->____neg];
    const unsigned int __len [value-expr: __closure->____len];
    const long unsigned int __uval [value-expr: __closure->____uval];
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*NON_LVALUE_EXPR <__p> = 45) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<long unsigned int> (__p + (sizetype) __neg, (unsigned int) __len, (long unsigned int) __uval) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(long int) (null)
;; enabled by -tree-original


{
  const bool __neg = __val < 0;
  const long unsigned int __uval = (bool) __neg ? -(long unsigned int) __val : (long unsigned int) __val;
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];
  typedef struct ._anon_84 ._anon_84;
  bool D.29741 = 0;

    bool D.29741 = 0;
    const bool __neg = __val < 0;
    const long unsigned int __uval = (bool) __neg ? -(long unsigned int) __val : (long unsigned int) __val;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = std::__detail::__to_chars_len<long unsigned int> ((long unsigned int) __uval, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), TARGET_EXPR <D.29726, {.____neg=(bool) __neg, .____len=(unsigned int) __len, .____uval=(long unsigned int) __uval}>) >>>>>;
      <<cleanup_point return *<retval>;, D.29741 = 1;>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
  __builtin_unreachable ();
}


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.29764>:;
    if ((long unsigned int) (unsigned int) __base > __value)
      {
        return <retval> = __n;
      }
    if ((long unsigned int) __b2 > __value)
      {
        return <retval> = __n + 1;
      }
    if ((long unsigned int) __b3 > __value)
      {
        return <retval> = __n + 2;
      }
    if (__value < (long unsigned int) __b4)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__value = __value / (long unsigned int) __b4) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__n = __n + 4) >>>>>;
    goto <D.29764>;
  }
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const long unsigned int __val [value-expr: __closure->____val];

    const long unsigned int __val [value-expr: __closure->____val];
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<long unsigned int> (__p, (unsigned int) __n, (long unsigned int) __val) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(long unsigned int) (null)
;; enabled by -tree-original


{
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];
  typedef struct ._anon_85 ._anon_85;
  bool D.29792 = 0;

    bool D.29792 = 0;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = std::__detail::__to_chars_len<long unsigned int> (__val, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) __len, TARGET_EXPR <D.29777, {.____val=__val}>) >>>>>;
      <<cleanup_point return *<retval>;, D.29792 = 1;>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
  __builtin_unreachable ();
}


;; Function std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const bool __neg [value-expr: __closure->____neg];
  const unsigned int __len [value-expr: __closure->____len];
  const long long unsigned int __uval [value-expr: __closure->____uval];

    const bool __neg [value-expr: __closure->____neg];
    const unsigned int __len [value-expr: __closure->____len];
    const long long unsigned int __uval [value-expr: __closure->____uval];
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*NON_LVALUE_EXPR <__p> = 45) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<long long unsigned int> (__p + (sizetype) __neg, (unsigned int) __len, (long long unsigned int) __uval) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(long long int) (null)
;; enabled by -tree-original


{
  const bool __neg = __val < 0;
  const long long unsigned int __uval = (bool) __neg ? -(long long unsigned int) __val : (long long unsigned int) __val;
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];
  typedef struct ._anon_86 ._anon_86;
  bool D.29838 = 0;

    bool D.29838 = 0;
    const bool __neg = __val < 0;
    const long long unsigned int __uval = (bool) __neg ? -(long long unsigned int) __val : (long long unsigned int) __val;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = std::__detail::__to_chars_len<long long unsigned int> ((long long unsigned int) __uval, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), TARGET_EXPR <D.29823, {.____neg=(bool) __neg, .____len=(unsigned int) __len, .____uval=(long long unsigned int) __uval}>) >>>>>;
      <<cleanup_point return *<retval>;, D.29838 = 1;>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
  __builtin_unreachable ();
}


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.29861>:;
    if ((long long unsigned int) (unsigned int) __base > __value)
      {
        return <retval> = __n;
      }
    if ((long long unsigned int) __b2 > __value)
      {
        return <retval> = __n + 1;
      }
    if ((long long unsigned int) __b3 > __value)
      {
        return <retval> = __n + 2;
      }
    if (__value < (long long unsigned int) __b4)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__value = __value / (long long unsigned int) __b4) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__n = __n + 4) >>>>>;
    goto <D.29861>;
  }
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)> (null)
;; enabled by -tree-original


{
  const long long unsigned int __val [value-expr: __closure->____val];

    const long long unsigned int __val [value-expr: __closure->____val];
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__to_chars_10_impl<long long unsigned int> (__p, (unsigned int) __n, (long long unsigned int) __val) >>>>>;
  return <retval> = __n;
}


;; Function std::string std::__cxx11::to_string(long long unsigned int) (null)
;; enabled by -tree-original


{
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];
  typedef struct ._anon_87 ._anon_87;
  bool D.29889 = 0;

    bool D.29889 = 0;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = std::__detail::__to_chars_len<long long unsigned int> (__val, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::basic_string ((struct string *) <retval>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)> > ((struct string *) <retval>, (size_type) __len, TARGET_EXPR <D.29874, {.____val=__val}>) >>>>>;
      <<cleanup_point return *<retval>;, D.29889 = 1;>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
  __builtin_unreachable ();
}


;; Function std::string std::__cxx11::to_string(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.29912, <<< Unknown tree: aggr_init_expr
    7
    __to_xstring
    D.29912
    (int (*<T5228>) (char *, size_t, const char *, struct  *)) vsnprintf
    58
    (const char *) "%f"
    (double) __val >>>>>>;
}


;; Function std::string std::__cxx11::to_string(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.29931, <<< Unknown tree: aggr_init_expr
    7
    __to_xstring
    D.29931
    (int (*<T5228>) (char *, size_t, const char *, struct  *)) vsnprintf
    328
    (const char *) "%f"
    __val >>>>>>;
}


;; Function std::string std::__cxx11::to_string(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.29950, <<< Unknown tree: aggr_init_expr
    7
    __to_xstring
    D.29950
    (int (*<T5228>) (char *, size_t, const char *, struct  *)) vsnprintf
    4952
    (const char *) "%Lf"
    __val >>>>>>;
}


;; Function int std::__cxx11::stoi(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, wchar_t, int> ((long int (*<T545b>) (const wchar_t *, wchar_t * *, int)) wcstol, (const char *) "stoi", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, long int, wchar_t, int> ((long int (*<T545b>) (const wchar_t *, wchar_t * *, int)) wcstol, (const char *) "stol", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int> ((long unsigned int (*<T546b>) (const wchar_t *, wchar_t * *, int)) wcstoul, (const char *) "stoul", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int, long long int, wchar_t, int> ((long long int (*<T5474>) (const wchar_t *, wchar_t * *, int)) wcstoll, (const char *) "stoll", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const std::wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int> ((long long unsigned int (*<T547d>) (const wchar_t *, wchar_t * *, int)) wcstoull, (const char *) "stoull", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const std::wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float, float, wchar_t> ((float (*<T5486>) (const wchar_t *, wchar_t * *)) wcstof, (const char *) "stof", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const std::wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double, double, wchar_t> ((double (*<T548f>) (const wchar_t *, wchar_t * *)) wcstod, (const char *) "stod", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const std::wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double, long double, wchar_t> ((long double (*<T5498>) (const wchar_t *, wchar_t * *)) wcstold, (const char *) "stold", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function void std::__cxx11::__to_wstring_numeric(const char*, int, wchar_t*) (null)
;; enabled by -tree-original


{
  {
    {
      {
        int __i = 0;

        <<cleanup_point         int __i = 0;>>;
        goto <D.31274>;
        <D.31273>:;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*(__wout + (sizetype) ((long unsigned int) __i * 4)) = (wchar_t) *(__s + (sizetype) __i)) >>>>>;
        <<cleanup_point (void)  ++__i>>;
        <D.31274>:;
        if (__i < __len) goto <D.31273>; else goto <D.31271>;
        <D.31271>:;
      }
    }
  }
}


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = allocator<wchar_t>; long unsigned int <anonymous> = 1; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.31514, {}>>>;


;; Function std::__cxx11::__to_wstring_numeric(std::string_view)::<lambda(wchar_t*, int)> (null)
;; enabled by -tree-original


{
  const char * const __f [value-expr: __closure->____f];

    const char * const __f [value-expr: __closure->____f];
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::__to_wstring_numeric ((const char *) __f, __n, __to) >>>>>;
  return <retval> = __n;
}


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::size() const [with _CharT = char; _Traits = std::char_traits<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;
__builtin_unreachable ();


;; Function std::wstring std::__cxx11::__to_wstring_numeric(std::string_view) (null)
;; enabled by -tree-original


{
  {
    <<cleanup_point return *<retval> = TARGET_EXPR <D.31449, <<< Unknown tree: aggr_init_expr
      7
      __ct_comp 
      D.31449
      (struct basic_string *) <<< Unknown tree: void_cst >>>
      std::basic_string_view<char>::data (&__s)
      std::basic_string_view<char>::data (&__s) + (sizetype) std::basic_string_view<char>::size (&__s)
      (const struct allocator &) &TARGET_EXPR <D.31448, <<< Unknown tree: aggr_init_expr
        4
        __ct_comp 
        D.31448
        (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
  }
}


;; Function std::wstring std::__cxx11::to_wstring(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31557, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31557
  TARGET_EXPR <D.31556, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31555, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31555
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31563, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31563
  TARGET_EXPR <D.31562, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31561, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31561
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31569, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31569
  TARGET_EXPR <D.31568, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31567, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31567
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31575, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31575
  TARGET_EXPR <D.31574, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31573, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31573
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31581, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31581
  TARGET_EXPR <D.31580, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31579, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31579
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31587, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31587
  TARGET_EXPR <D.31586, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31585, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31585
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(float) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31593, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31593
  TARGET_EXPR <D.31592, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31591, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31591
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(double) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31599, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31599
  TARGET_EXPR <D.31598, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31597, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31597
    __val >>>>)> >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long double) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31605, <<< Unknown tree: aggr_init_expr
  4
  __to_wstring_numeric
  D.31605
  TARGET_EXPR <D.31604, std::__cxx11::basic_string<char>::operator std::__cxx11::basic_string<char>::__sv_type (&TARGET_EXPR <D.31603, <<< Unknown tree: aggr_init_expr
    4
    to_string
    D.31603
    __val >>>>)> >>>>>>;


;; Function std::__cxx11::basic_string<char> std::literals::string_literals::operator""s(const char*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31734, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.31734
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.31733, <<< Unknown tree: aggr_init_expr
    4
    __ct_comp 
    D.31733
    (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<wchar_t> std::literals::string_literals::operator""s(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.31753, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.31753
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.31752, <<< Unknown tree: aggr_init_expr
    4
    __ct_comp 
    D.31752
    (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char16_t> std::literals::string_literals::operator""s(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.33253, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.33253
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.33252, <<< Unknown tree: aggr_init_expr
    4
    __ct_comp 
    D.33252
    (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char32_t> std::literals::string_literals::operator""s(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.34762, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.34762
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.34761, <<< Unknown tree: aggr_init_expr
    4
    __ct_comp 
    D.34761
    (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function constexpr std::byte std::operator|(byte, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (byte) ((unsigned char) __l | (unsigned char) __r)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte std::operator&(byte, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (byte) ((unsigned char) __l & (unsigned char) __r)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte std::operator^(byte, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (byte) ((unsigned char) __l ^ (unsigned char) __r)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte std::operator~(byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ~__b
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte& std::operator|=(byte&, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__l = std::operator| (*__l, __r);, __l>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte& std::operator&=(byte&, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__l = std::operator& (*__l, __r);, __l>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::byte& std::operator^=(byte&, byte) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__l = std::operator^ (*__l, __r);, __l>>
   >>>;
__builtin_unreachable ();


;; Function void std::__uses_alloc0::_Sink::operator=(const void*) (null)
;; enabled by -tree-original





;; Function void std::tuple<>::swap(std::tuple<>&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void* std::pmr::memory_resource::allocate(std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = operator new (__bytes, OBJ_TYPE_REF(*(((struct memory_resource *) this)->_vptr.memory_resource + 16);(struct memory_resource)(struct memory_resource *) this->2B) ((struct memory_resource *) this, __bytes, __alignment))>>;


;; Function void std::pmr::memory_resource::deallocate(void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  OBJ_TYPE_REF(*(((struct memory_resource *) this)->_vptr.memory_resource + 24);(struct memory_resource)(struct memory_resource *) this->3B) ((struct memory_resource *) this, __p, __bytes, __alignment) >>>>>;
return;


;; Function bool std::pmr::memory_resource::is_equal(const std::pmr::memory_resource&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct memory_resource *) this)->_vptr.memory_resource + 32);(const struct memory_resource)(const struct memory_resource *) this->4B) ((const struct memory_resource *) this, __other)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::pmr::operator==(const memory_resource&, const memory_resource&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const struct memory_resource *) __a == (const struct memory_resource *) __b || std::pmr::memory_resource::is_equal ((const struct memory_resource *) __a, __b)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::pmr::operator!=(const memory_resource&, const memory_resource&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::pmr::operator== (__a, __b)>>
   >>>;
__builtin_unreachable ();


;; Function std::locale::locale(const std::string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct locale *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::locale::locale ((struct locale *) this, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s)) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function std::locale::locale(const std::locale&, const std::string&, category) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct locale *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::locale::locale ((struct locale *) this, __base, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s), __cat) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function bool std::locale::operator!=(const std::locale&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::locale::operator== ((const struct locale *) this, __other)>>
   >>>;
__builtin_unreachable ();


;; Function std::locale::facet::facet(std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct __as_base  &) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct facet *) this)->_vptr.facet = &_ZTVNSt6locale5facetE + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct facet *) this)->_M_refcount = __refs != 0 ? 1 : 0) >>>>>;
  }
   >>>;


;; Function void std::locale::facet::_M_add_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__atomic_add_dispatch (&((const struct facet *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::facet::_M_remove_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((const struct facet *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
        <<cleanup_point <<< Unknown tree: expr_stmt
          if ((struct facet *) this != 0B)
            {
              OBJ_TYPE_REF(*(((struct facet *) this)->_vptr.facet + 8);(struct facet)(struct facet *) this->1B) ((struct facet *) this);
            }
          else
            {
              <<< Unknown tree: void_cst >>>
            } >>>>>
        <<< Unknown tree: handler
          
          try
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
            }
          finally
            {
              __cxa_end_catch ();
            } >>> >>>;
    }
   >>>;


;; Function std::locale::id::id() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct id *) this = {CLOBBER(bob)} >>>>>;
{
  
}


;; Function void std::locale::_Impl::_M_add_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__atomic_add_dispatch (&((struct _Impl *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::_Impl::_M_remove_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Impl *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
        <<cleanup_point <<< Unknown tree: expr_stmt
          if ((struct _Impl *) this != 0B)
            {
              try
                {
                  std::locale::_Impl::~_Impl ((struct _Impl *) this);
                }
              finally
                {
                  operator delete ((void *) this, 40);
                }
            }
          else
            {
              <<< Unknown tree: void_cst >>>
            } >>>>>
        <<< Unknown tree: handler
          
          try
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
            }
          finally
            {
              __cxa_end_catch ();
            } >>> >>>;
    }
   >>>;


;; Function bool std::locale::_Impl::_M_check_same_name() (null)
;; enabled by -tree-original


{
  bool __ret = 1;

  <<cleanup_point   bool __ret = 1;>>;
  {
    if (*(((struct _Impl *) this)->_M_names + 8) != 0B)
      {
        {
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            goto <D.39096>;
            <D.39095>:;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ret = __builtin_strcmp ((const char *) *(((struct _Impl *) this)->_M_names + (sizetype) (__i * 8)), (const char *) *(((struct _Impl *) this)->_M_names + ((sizetype) __i + 1) * 8)) == 0) >>>>>;
            <<cleanup_point (void)  ++__i>>;
            <D.39096>:;
            if (__i <= 10 && __ret) goto <D.39095>; else goto <D.39093>;
            <D.39093>:;
          }
        }
      }
  }
  return <retval> = __ret;
}


;; Function bool std::_V2::error_category::operator==(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this == (const struct error_category *) __other
   >>>;
__builtin_unreachable ();


;; Function constexpr bool std::less<_Tp*>::operator()(_Tp*, _Tp*) const [with _Tp = const std::_V2::error_category] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (0)
    {
      return <retval> = __x < __y;
    }
  return <retval> = (long unsigned int) __x < (long unsigned int) __y;
   >>>;
__builtin_unreachable ();


;; Function bool std::_V2::error_category::operator<(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::less<const std::_V2::error_category*>::operator() (&TARGET_EXPR <D.40731, {.D.40671={}}>, (const struct error_category *) this, (const struct error_category *) __other)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::_V2::error_category::operator!=(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this != (const struct error_category *) __other
   >>>;
__builtin_unreachable ();


;; Function std::error_code::error_code() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct error_code *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_code *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) std::_V2::system_category ()) >>>>>;
  }
   >>>;


;; Function std::error_code::error_code(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct error_code *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_code::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_code::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::error_code::assign ((struct error_code *) this, 0, std::_V2::system_category ()) >>>>>
   >>>;


;; Function int std::error_code::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_code *) this)->_M_value
   >>>;
__builtin_unreachable ();


;; Function const std::_V2::error_category& std::error_code::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) ((const struct error_code *) this)->_M_cat
   >>>;
__builtin_unreachable ();


;; Function std::string std::error_code::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40864, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>->4B)
  D.40864
  SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>
  std::error_code::value ((const struct error_code *) this) >>>>>>;


;; Function std::error_code::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct error_code *) this)->_M_value != 0
   >>>;
__builtin_unreachable ();


;; Function std::error_code std::make_error_code(errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.40869, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.40869
    (struct error_code *) <<< Unknown tree: void_cst >>>
    (int) __e
    std::_V2::generic_category () >>>>;, D.40869>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator<(const error_code&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) < std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function std::error_condition::error_condition() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct error_condition *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_condition *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) std::_V2::generic_category ()) >>>>>;
  }
   >>>;


;; Function std::error_condition::error_condition(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct error_condition *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_condition::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_condition::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::error_condition::assign ((struct error_condition *) this, 0, std::_V2::generic_category ()) >>>>>
   >>>;


;; Function int std::error_condition::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_condition *) this)->_M_value
   >>>;
__builtin_unreachable ();


;; Function const std::_V2::error_category& std::error_condition::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) ((const struct error_condition *) this)->_M_cat
   >>>;
__builtin_unreachable ();


;; Function std::string std::error_condition::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40998, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>->4B)
  D.40998
  SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>
  std::error_condition::value ((const struct error_condition *) this) >>>>>>;


;; Function std::error_condition::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct error_condition *) this)->_M_value != 0
   >>>;
__builtin_unreachable ();


;; Function std::error_condition std::make_error_condition(errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.41003, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.41003
    (struct error_condition *) <<< Unknown tree: void_cst >>>
    (int) __e
    std::_V2::generic_category () >>>>;, D.41003>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator==(const error_code&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) == std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator==(const error_code&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>->6B) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>, std::error_code::value ((const struct error_code *) __lhs), __rhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>->7B) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>, __lhs, std::error_condition::value ((const struct error_condition *) __rhs))>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator==(const error_condition&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) == std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator<(const error_condition&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator< ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) || std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) < std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator==(const error_condition&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>->6B) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __rhs)>, std::error_code::value ((const struct error_code *) __rhs), __lhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>->7B) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs)>, __rhs, std::error_condition::value ((const struct error_condition *) __lhs))>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator!=(const error_code&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator!=(const error_code&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator!=(const error_condition&, const error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function bool std::operator!=(const error_condition&, const error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (__lhs, __rhs)>>
   >>>;
__builtin_unreachable ();


;; Function std::system_error::system_error(std::error_code) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.41190, (const struct string &) &TARGET_EXPR <D.41198, <<< Unknown tree: aggr_init_expr
      4
      message
      D.41198
      &__ec >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.41190.D.40289._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.41190);
    }
}


;; Function std::system_error::system_error(std::error_code, const std::string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.41190, (const struct string &) &TARGET_EXPR <D.41217, <<< Unknown tree: aggr_init_expr
      5
      operator+
      D.41217
      (const struct basic_string &) __what
      (struct basic_string &) &TARGET_EXPR <D.41210, <<< Unknown tree: aggr_init_expr
        5
        operator+
        D.41210
        (const char *) ": "
        (struct basic_string &) &TARGET_EXPR <D.41203, <<< Unknown tree: aggr_init_expr
          4
          message
          D.41203
          &__ec >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.41190.D.40289._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.41190);
    }
}


;; Function std::system_error::system_error(std::error_code, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.41190, (const struct string &) &TARGET_EXPR <D.41226, <<< Unknown tree: aggr_init_expr
      5
      operator+
      D.41226
      __what
      (struct basic_string &) &TARGET_EXPR <D.41225, <<< Unknown tree: aggr_init_expr
        5
        operator+
        D.41225
        (const char *) ": "
        (struct basic_string &) &TARGET_EXPR <D.41224, <<< Unknown tree: aggr_init_expr
          4
          message
          D.41224
          &__ec >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.41190.D.40289._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.41190);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::system_error::system_error ((struct system_error *) this, TARGET_EXPR <D.41233, <<< Unknown tree: aggr_init_expr
      6
      __ct_comp 
      D.41233
      (struct error_code *) <<< Unknown tree: void_cst >>>
      __v
      __ecat >>>>, __what) >>>>>;
  try
    {
      
    }
  catch
    {
      std::system_error::~system_error ((struct system_error *) this);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.41190, (const struct string &) &TARGET_EXPR <D.41239, <<< Unknown tree: aggr_init_expr
      4
      message
      D.41239
      &TARGET_EXPR <D.41238, <<< Unknown tree: aggr_init_expr
        6
        __ct_comp 
        D.41238
        (struct error_code *) <<< Unknown tree: void_cst >>>
        __v
        __ecat >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.41190.D.40289._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.41190);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const std::string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::runtime_error::runtime_error (&((struct system_error *) this)->D.41190, (const struct string &) &TARGET_EXPR <D.41248, <<< Unknown tree: aggr_init_expr
      5
      operator+
      D.41248
      (const struct basic_string &) __what
      (struct basic_string &) &TARGET_EXPR <D.41247, <<< Unknown tree: aggr_init_expr
        5
        operator+
        D.41247
        (const char *) ": "
        (struct basic_string &) &TARGET_EXPR <D.41246, <<< Unknown tree: aggr_init_expr
          4
          message
          D.41246
          &TARGET_EXPR <D.41245, <<< Unknown tree: aggr_init_expr
            6
            __ct_comp 
            D.41245
            (struct error_code *) <<< Unknown tree: void_cst >>>
            __v
            __ecat >>>> >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct system_error *) this)->D.41190.D.40289._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.41190);
    }
}


;; Function const std::error_code& std::system_error::code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_code &) &((const struct system_error *) this)->_M_code
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::error_code>::operator()(const std::error_code&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &TARGET_EXPR <D.41274, std::error_code::value ((const struct error_code *) __e)>)) >>>>>;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &TARGET_EXPR <D.41278, (const struct error_category *) std::error_code::category ((const struct error_code *) __e)>, (size_t) __tmp)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function std::size_t std::hash<std::error_condition>::operator()(const std::error_condition&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &TARGET_EXPR <D.41296, std::error_condition::value ((const struct error_condition *) __e)>)) >>>>>;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &TARGET_EXPR <D.41297, (const struct error_category *) std::error_condition::category ((const struct error_condition *) __e)>, (size_t) __tmp)>>;
  }
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Fmtflags std::operator&(_Ios_Fmtflags, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Fmtflags) ((int) __a & (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Fmtflags std::operator|(_Ios_Fmtflags, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Fmtflags) ((int) __a | (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Fmtflags std::operator^(_Ios_Fmtflags, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Fmtflags) ((int) __a ^ (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Fmtflags std::operator~(_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ~__a
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Fmtflags& std::operator|=(_Ios_Fmtflags&, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Fmtflags &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Fmtflags& std::operator&=(_Ios_Fmtflags&, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Fmtflags &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Fmtflags& std::operator^=(_Ios_Fmtflags&, _Ios_Fmtflags) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Fmtflags &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Openmode std::operator&(_Ios_Openmode, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Openmode) ((int) __a & (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Openmode std::operator|(_Ios_Openmode, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Openmode) ((int) __a | (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Openmode std::operator^(_Ios_Openmode, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Openmode) ((int) __a ^ (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Openmode std::operator~(_Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ~__a
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Openmode& std::operator|=(_Ios_Openmode&, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Openmode &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Openmode& std::operator&=(_Ios_Openmode&, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Openmode &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Openmode& std::operator^=(_Ios_Openmode&, _Ios_Openmode) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Openmode &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Iostate std::operator&(_Ios_Iostate, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Iostate) ((int) __a & (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Iostate std::operator|(_Ios_Iostate, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Iostate) ((int) __a | (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Iostate std::operator^(_Ios_Iostate, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (_Ios_Iostate) ((int) __a ^ (int) __b)
   >>>;
__builtin_unreachable ();


;; Function constexpr std::_Ios_Iostate std::operator~(_Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ~__a
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Iostate& std::operator|=(_Ios_Iostate&, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Iostate &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Iostate& std::operator&=(_Ios_Iostate&, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Iostate &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function constexpr const std::_Ios_Iostate& std::operator^=(_Ios_Iostate&, _Ios_Iostate) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Iostate &) __a;>>
   >>>;
__builtin_unreachable ();


;; Function std::error_code std::make_error_code(io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.41497, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.41497
    (struct error_code *) <<< Unknown tree: void_cst >>>
    (int) __e
    std::iostream_category () >>>>;, D.41497>>
   >>>;
__builtin_unreachable ();


;; Function std::error_condition std::make_error_condition(io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.41501, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.41501
    (struct error_condition *) <<< Unknown tree: void_cst >>>
    (int) __e
    std::iostream_category () >>>>;, D.41501>>
   >>>;
__builtin_unreachable ();


;; Function std::ios_base::_Callback_list::_Callback_list(std::ios_base::event_callback, int, std::ios_base::_Callback_list*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Callback_list *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Callback_list *) this)->_M_next = __cb) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Callback_list *) this)->_M_fn = __fn) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Callback_list *) this)->_M_index = __index) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Callback_list *) this)->_M_refcount = 0) >>>>>;
}


;; Function void std::ios_base::_Callback_list::_M_add_reference() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, 1) >>>>>;


;; Function int std::ios_base::_Callback_list::_M_remove_reference() (null)
;; enabled by -tree-original


{
  int __res;

    int __res;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __gnu_cxx::__exchange_and_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, -1)) >>>>>;
  if (__res == 0)
    {
      
    }
  return <retval> = __res;
}


;; Function std::ios_base::_Words::_Words() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Words *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Words *) this)->_M_pword = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Words *) this)->_M_iword = 0) >>>>>;
}


;; Function std::ios_base::fmtflags std::ios_base::flags() const (null)
;; enabled by -tree-original


return <retval> = (fmtflags) ((const struct ios_base *) this)->_M_flags;


;; Function std::ios_base::fmtflags std::ios_base::flags(fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct ios_base *) this)->_M_flags = __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(fmtflags, fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator& (__fmtfl, __mask)) >>>>>;
  return <retval> = __old;
}


;; Function void std::ios_base::unsetf(fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;


;; Function std::streamsize std::ios_base::precision() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_precision;


;; Function std::streamsize std::ios_base::precision(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_precision;

    streamsize __old = ((struct ios_base *) this)->_M_precision;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct ios_base *) this)->_M_precision = __prec) >>>>>;
  return <retval> = __old;
}


;; Function std::streamsize std::ios_base::width() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_width;


;; Function std::streamsize std::ios_base::width(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_width;

    streamsize __old = ((struct ios_base *) this)->_M_width;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct ios_base *) this)->_M_width = __wide) >>>>>;
  return <retval> = __old;
}


;; Function std::locale std::ios_base::getloc() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.41893, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.41893
  (struct locale *) <<< Unknown tree: void_cst >>>
  (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale >>>>>>;


;; Function const std::locale& std::ios_base::_M_getloc() const (null)
;; enabled by -tree-original


return <retval> = (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale;


;; Function long int& std::ios_base::iword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__word = (unsigned int) ((struct ios_base *) this)->_M_word_size > (unsigned int) __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 1)) >>>>>;
  return <retval> = (long int &) &__word->_M_iword;
}


;; Function void*& std::ios_base::pword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__word = (unsigned int) ((struct ios_base *) this)->_M_word_size > (unsigned int) __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 0)) >>>>>;
  return <retval> = (void * &) &__word->_M_pword;
}


;; Function std::ios_base& std::boolalpha(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noboolalpha(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showbase(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowbase(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showpoint(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowpoint(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showpos(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowpos(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::skipws(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noskipws(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::uppercase(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::nouppercase(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::unitbuf(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::nounitbuf(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::internal(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::left(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 32, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::right(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 128, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::dec(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::hex(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::oct(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 64, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::fixed(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::scientific(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 256, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::hexfloat(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 260, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::defaultfloat(ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 260) >>>>>;
return <retval> = __base;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = locale; long unsigned int <anonymous> = 8; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.42423, {}>>>;


;; Function constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = long int] (null)
;; enabled by -tree-original


if (*__b < *__a)
  {
    return <retval> = __b;
  }
return <retval> = __a;


;; Function std::ctype<char>::char_type std::ctype<char>::toupper(char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.44110._vptr.facet + 16);(const struct ctype)(const struct ctype *) this->2B) ((const struct ctype *) this, (int) __c)>>;


;; Function const std::ctype<char>::char_type* std::ctype<char>::toupper(char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.44110._vptr.facet + 24);(const struct ctype)(const struct ctype *) this->3B) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::tolower(char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.44110._vptr.facet + 32);(const struct ctype)(const struct ctype *) this->4B) ((const struct ctype *) this, (int) __c)>>;


;; Function const std::ctype<char>::char_type* std::ctype<char>::tolower(char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.44110._vptr.facet + 40);(const struct ctype)(const struct ctype *) this->5B) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::widen(char) const (null)
;; enabled by -tree-original


if (((const struct ctype *) this)->_M_widen_ok != 0)
  {
    return <retval> = ((const struct ctype *) this)->_M_widen[(int) (unsigned char) __c];
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.44110._vptr.facet + 48);(const struct ctype)(const struct ctype *) this->6B) ((const struct ctype *) this, (int) __c)>>;


;; Function const char* std::ctype<char>::widen(const char*, const char*, char_type*) const (null)
;; enabled by -tree-original


if (((const struct ctype *) this)->_M_widen_ok == 1)
  {
    if (__builtin_expect (__hi != __lo, 1) != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
      }
    return <retval> = __hi;
  }
if (((const struct ctype *) this)->_M_widen_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.44110._vptr.facet + 56);(const struct ctype)(const struct ctype *) this->7B) ((const struct ctype *) this, __lo, __hi, __to)>>;


;; Function char std::ctype<char>::narrow(char_type, char) const (null)
;; enabled by -tree-original


{
  const char __t;

  if (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] != 0)
    {
      return <retval> = ((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c];
    }
    const char __t;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__t = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.44110._vptr.facet + 64);(const struct ctype)(const struct ctype *) this->8B) ((const struct ctype *) this, (int) __c, (int) __dfault)) >>>>>;
  if (__t != (const char) __dfault)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] = (char) __t) >>>>>;
    }
  return <retval> = (char) __t;
}


;; Function const std::ctype<char>::char_type* std::ctype<char>::narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


if (__builtin_expect (((const struct ctype *) this)->_M_narrow_ok == 1, 1) != 0)
  {
    if (__builtin_expect (__hi != __lo, 1) != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
      }
    return <retval> = __hi;
  }
if (((const struct ctype *) this)->_M_narrow_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::ctype<char>::_M_narrow_init ((const struct ctype *) this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.44110._vptr.facet + 72);(const struct ctype)(const struct ctype *) this->9B) ((const struct ctype *) this, __lo, __hi, (int) __dfault, __to)>>;


;; Function const std::ctype_base::mask* std::ctype<char>::table() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const mask *) ((const struct ctype *) this)->_M_table
   >>>;
__builtin_unreachable ();


;; Function virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const char* std::ctype<char>::do_widen(const char*, const char*, char_type*) const (null)
;; enabled by -tree-original


if (__builtin_expect (__hi != __lo, 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
  }
return <retval> = __hi;


;; Function virtual char std::ctype<char>::do_narrow(char_type, char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const std::ctype<char>::char_type* std::ctype<char>::do_narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


if (__builtin_expect (__hi != __lo, 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long unsigned int) (__hi - __lo)) >>>>>;
  }
return <retval> = __hi;


;; Function bool std::ctype<char>::is(std::ctype_base::mask, char) const (null)
;; enabled by -tree-original


return <retval> = ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) __c * 2)) & __m) != 0;


;; Function const char* std::ctype<char>::is(const char*, const char*, std::ctype_base::mask*) const (null)
;; enabled by -tree-original


goto <D.44540>;
<D.44541>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__vec++  = (mask) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low++  * 2))) >>>>>;
<D.44540>:;
if (__low < __high) goto <D.44541>; else goto <D.44539>;
<D.44539>:;
return <retval> = __high;


;; Function const char* std::ctype<char>::scan_is(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


goto <D.44550>;
<D.44551>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
<D.44550>:;
if (__low < __high && ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low * 2)) & __m) == 0) goto <D.44551>; else goto <D.44549>;
<D.44549>:;
return <retval> = __low;


;; Function const char* std::ctype<char>::scan_not(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


goto <D.44560>;
<D.44561>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
<D.44560>:;
if (__low < __high && ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long unsigned int) (unsigned char) *__low * 2)) & __m) != 0) goto <D.44561>; else goto <D.44559>;
<D.44559>:;
return <retval> = __low;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = bool; long unsigned int <anonymous> = 1; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.47285, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = long int; long unsigned int <anonymous> = 8; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.49329, {}>>>;


;; Function int iscanonical(float) (null)
;; enabled by -tree-original


return <retval> = <<< Unknown tree: void_cst >>>, 1;


;; Function int iscanonical(double) (null)
;; enabled by -tree-original


return <retval> = <<< Unknown tree: void_cst >>>, 1;


;; Function int iscanonical(long double) (null)
;; enabled by -tree-original


return <retval> = __iscanonicall (__val);


;; Function int iscanonical(_Float128) (null)
;; enabled by -tree-original


return <retval> = <<< Unknown tree: void_cst >>>, 1;


;; Function int issignaling(float) (null)
;; enabled by -tree-original


return <retval> = __issignalingf (__val);


;; Function int issignaling(double) (null)
;; enabled by -tree-original


return <retval> = __issignaling (__val);


;; Function int issignaling(long double) (null)
;; enabled by -tree-original


return <retval> = __issignalingl (__val);


;; Function int issignaling(_Float128) (null)
;; enabled by -tree-original


return <retval> = __issignalingf128 (__val);


;; Function static int __iseqsig_type<float>::__call(float, float) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __iseqsigf (__x, __y)>>
   >>>;
__builtin_unreachable ();


;; Function static int __iseqsig_type<double>::__call(double, double) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __iseqsig (__x, __y)>>
   >>>;
__builtin_unreachable ();


;; Function static int __iseqsig_type<long double>::__call(long double, long double) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __iseqsigl (__x, __y)>>
   >>>;
__builtin_unreachable ();


;; Function static int __iseqsig_type<_Float32>::__call(_Float32, _Float32) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __iseqsigf ((float) __x, (float) __y)>>
   >>>;
__builtin_unreachable ();


;; Function static int __iseqsig_type<_Float64>::__call(_Float64, _Float64) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __iseqsig ((double) __x, (double) __y)>>
   >>>;
__builtin_unreachable ();


;; Function static int __iseqsig_type<_Float128>::__call(_Float128, _Float128) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __iseqsigf128 (__x, __y)>>
   >>>;
__builtin_unreachable ();


;; Function static int __iseqsig_type<_Float32x>::__call(_Float32x, _Float32x) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __iseqsig ((double) __x, (double) __y)>>
   >>>;
__builtin_unreachable ();


;; Function static int __iseqsig_type<_Float64x>::__call(_Float64x, _Float64x) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __iseqsigl ((long double) __x, (long double) __y)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr float std::acos(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acosf (__x)>>;


;; Function constexpr long double std::acos(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acosl (__x)>>;


;; Function constexpr float std::asin(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_asinf (__x)>>;


;; Function constexpr long double std::asin(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_asinl (__x)>>;


;; Function constexpr float std::atan(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_atanf (__x);


;; Function constexpr long double std::atan(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_atanl (__x);


;; Function constexpr float std::atan2(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atan2f (__y, __x)>>;


;; Function constexpr long double std::atan2(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atan2l (__y, __x)>>;


;; Function constexpr float std::ceil(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_ceilf (__x);


;; Function constexpr long double std::ceil(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_ceill (__x);


;; Function constexpr float std::cos(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_cosf (__x);


;; Function constexpr long double std::cos(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_cosl (__x);


;; Function constexpr float std::cosh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_coshf (__x)>>;


;; Function constexpr long double std::cosh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_coshl (__x)>>;


;; Function constexpr float std::exp(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expf (__x)>>;


;; Function constexpr long double std::exp(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expl (__x)>>;


;; Function constexpr float std::fabs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::fabs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::floor(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_floorf (__x);


;; Function constexpr long double std::floor(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_floorl (__x);


;; Function constexpr float std::fmod(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fmodf (__x, __y)>>;


;; Function constexpr long double std::fmod(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fmodl (__x, __y)>>;


;; Function float std::frexp(float, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_frexpf (__x, __exp)>>;


;; Function long double std::frexp(long double, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_frexpl (__x, __exp)>>;


;; Function constexpr float std::ldexp(float, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ldexpf (__x, __exp)>>;


;; Function constexpr long double std::ldexp(long double, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ldexpl (__x, __exp)>>;


;; Function constexpr float std::log(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logf (__x)>>;


;; Function constexpr long double std::log(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logl (__x)>>;


;; Function constexpr float std::log10(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log10f (__x)>>;


;; Function constexpr long double std::log10(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log10l (__x)>>;


;; Function float std::modf(float, float*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_modff (__x, __iptr)>>;


;; Function long double std::modf(long double, long double*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_modfl (__x, __iptr)>>;


;; Function constexpr float std::pow(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_powf (__x, __y)>>;


;; Function constexpr long double std::pow(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_powl (__x, __y)>>;


;; Function constexpr float std::sin(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_sinf (__x);


;; Function constexpr long double std::sin(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_sinl (__x);


;; Function constexpr float std::sinh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sinhf (__x)>>;


;; Function constexpr long double std::sinh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sinhl (__x)>>;


;; Function constexpr float std::sqrt(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sqrtf (__x)>>;


;; Function constexpr long double std::sqrt(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_sqrtl (__x)>>;


;; Function constexpr float std::tan(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanf (__x);


;; Function constexpr long double std::tan(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanl (__x);


;; Function constexpr float std::tanh(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanhf (__x);


;; Function constexpr long double std::tanh(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_tanhl (__x);


;; Function constexpr int std::fpclassify(float) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 3.4028234663852885981170418348451692544e+38 ? SAVE_EXPR <ABS_EXPR <__x>> >= 1.17549435082228750796873653722224567781866555677208752151e-38 ? 4 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 2 : 3 : 1 : 0;


;; Function constexpr int std::fpclassify(double) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 1.79769313486231570814527423731704356798070567525844996599e+308 ? SAVE_EXPR <ABS_EXPR <__x>> >= 2.22507385850720138309023271733240406421921598046233183055e-308 ? 4 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 2 : 3 : 1 : 0;


;; Function constexpr int std::fpclassify(long double) (null)
;; enabled by -tree-original


return <retval> = SAVE_EXPR <ABS_EXPR <__x>> ord SAVE_EXPR <ABS_EXPR <__x>> ? SAVE_EXPR <ABS_EXPR <__x>> u<= 1.18973149535723176502126385303097020516906332229462420044e+4932 ? SAVE_EXPR <ABS_EXPR <__x>> >= 3.36210314311209350626267781732175260259807934484647124011e-4932 ? 4 : SAVE_EXPR <ABS_EXPR <__x>> == 0.0 ? 2 : 3 : 1 : 0;


;; Function constexpr bool std::isfinite(float) (null)
;; enabled by -tree-original


return <retval> = !(ABS_EXPR <__x> u> 3.4028234663852885981170418348451692544e+38) != 0;


;; Function constexpr bool std::isfinite(double) (null)
;; enabled by -tree-original


return <retval> = !(ABS_EXPR <__x> u> 1.79769313486231570814527423731704356798070567525844996599e+308) != 0;


;; Function constexpr bool std::isfinite(long double) (null)
;; enabled by -tree-original


return <retval> = !(ABS_EXPR <__x> u> 1.18973149535723176502126385303097020516906332229462420044e+4932) != 0;


;; Function constexpr bool std::isinf(float) (null)
;; enabled by -tree-original


return <retval> = !(ABS_EXPR <__x> u<= 3.4028234663852885981170418348451692544e+38) != 0;


;; Function constexpr bool std::isinf(double) (null)
;; enabled by -tree-original


return <retval> = !(ABS_EXPR <__x> u<= 1.79769313486231570814527423731704356798070567525844996599e+308) != 0;


;; Function constexpr bool std::isinf(long double) (null)
;; enabled by -tree-original


return <retval> = !(ABS_EXPR <__x> u<= 1.18973149535723176502126385303097020516906332229462420044e+4932) != 0;


;; Function constexpr bool std::isnan(float) (null)
;; enabled by -tree-original


return <retval> = __x unord __x != 0;


;; Function constexpr bool std::isnan(double) (null)
;; enabled by -tree-original


return <retval> = __x unord __x != 0;


;; Function constexpr bool std::isnan(long double) (null)
;; enabled by -tree-original


return <retval> = __x unord __x != 0;


;; Function constexpr bool std::isnormal(float) (null)
;; enabled by -tree-original


return <retval> = (int) ((bool) !(ABS_EXPR <__x> u> 3.4028234663852885981170418348451692544e+38) && (bool) !(ABS_EXPR <__x> u< 1.17549435082228750796873653722224567781866555677208752151e-38)) != 0;


;; Function constexpr bool std::isnormal(double) (null)
;; enabled by -tree-original


return <retval> = (int) ((bool) !(ABS_EXPR <__x> u> 1.79769313486231570814527423731704356798070567525844996599e+308) && (bool) !(ABS_EXPR <__x> u< 2.22507385850720138309023271733240406421921598046233183055e-308)) != 0;


;; Function constexpr bool std::isnormal(long double) (null)
;; enabled by -tree-original


return <retval> = (int) ((bool) !(ABS_EXPR <__x> u> 1.18973149535723176502126385303097020516906332229462420044e+4932) && (bool) !(ABS_EXPR <__x> u< 3.36210314311209350626267781732175260259807934484647124011e-4932)) != 0;


;; Function constexpr bool std::signbit(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::signbit(double) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::signbit(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_signbit (__x) != 0;


;; Function constexpr bool std::isgreater(float, float) (null)
;; enabled by -tree-original


return <retval> = !(__x u<= __y) != 0;


;; Function constexpr bool std::isgreater(double, double) (null)
;; enabled by -tree-original


return <retval> = !(__x u<= __y) != 0;


;; Function constexpr bool std::isgreater(long double, long double) (null)
;; enabled by -tree-original


return <retval> = !(__x u<= __y) != 0;


;; Function constexpr bool std::isgreaterequal(float, float) (null)
;; enabled by -tree-original


return <retval> = !(__x u< __y) != 0;


;; Function constexpr bool std::isgreaterequal(double, double) (null)
;; enabled by -tree-original


return <retval> = !(__x u< __y) != 0;


;; Function constexpr bool std::isgreaterequal(long double, long double) (null)
;; enabled by -tree-original


return <retval> = !(__x u< __y) != 0;


;; Function constexpr bool std::isless(float, float) (null)
;; enabled by -tree-original


return <retval> = !(__x u>= __y) != 0;


;; Function constexpr bool std::isless(double, double) (null)
;; enabled by -tree-original


return <retval> = !(__x u>= __y) != 0;


;; Function constexpr bool std::isless(long double, long double) (null)
;; enabled by -tree-original


return <retval> = !(__x u>= __y) != 0;


;; Function constexpr bool std::islessequal(float, float) (null)
;; enabled by -tree-original


return <retval> = !(__x u> __y) != 0;


;; Function constexpr bool std::islessequal(double, double) (null)
;; enabled by -tree-original


return <retval> = !(__x u> __y) != 0;


;; Function constexpr bool std::islessequal(long double, long double) (null)
;; enabled by -tree-original


return <retval> = !(__x u> __y) != 0;


;; Function constexpr bool std::islessgreater(float, float) (null)
;; enabled by -tree-original


return <retval> = !(__x u== __y) != 0;


;; Function constexpr bool std::islessgreater(double, double) (null)
;; enabled by -tree-original


return <retval> = !(__x u== __y) != 0;


;; Function constexpr bool std::islessgreater(long double, long double) (null)
;; enabled by -tree-original


return <retval> = !(__x u== __y) != 0;


;; Function constexpr bool std::isunordered(float, float) (null)
;; enabled by -tree-original


return <retval> = __x unord __y != 0;


;; Function constexpr bool std::isunordered(double, double) (null)
;; enabled by -tree-original


return <retval> = __x unord __y != 0;


;; Function constexpr bool std::isunordered(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __x unord __y != 0;


;; Function constexpr float std::acosh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acoshf (__x)>>;


;; Function constexpr long double std::acosh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_acoshl (__x)>>;


;; Function constexpr float std::asinh(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_asinhf (__x);


;; Function constexpr long double std::asinh(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_asinhl (__x);


;; Function constexpr float std::atanh(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atanhf (__x)>>;


;; Function constexpr long double std::atanh(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_atanhl (__x)>>;


;; Function constexpr float std::cbrt(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_cbrtf (__x);


;; Function constexpr long double std::cbrt(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_cbrtl (__x);


;; Function constexpr float std::copysign(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_copysignf (__x, __y);


;; Function constexpr long double std::copysign(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_copysignl (__x, __y);


;; Function constexpr float std::erf(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_erff (__x);


;; Function constexpr long double std::erf(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_erfl (__x);


;; Function constexpr float std::erfc(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_erfcf (__x)>>;


;; Function constexpr long double std::erfc(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_erfcl (__x)>>;


;; Function constexpr float std::exp2(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_exp2f (__x)>>;


;; Function constexpr long double std::exp2(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_exp2l (__x)>>;


;; Function constexpr float std::expm1(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expm1f (__x)>>;


;; Function constexpr long double std::expm1(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expm1l (__x)>>;


;; Function constexpr float std::fdim(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fdimf (__x, __y)>>;


;; Function constexpr long double std::fdim(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_fdiml (__x, __y)>>;


;; Function constexpr float std::fma(float, float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaf (__x, __y, __z);


;; Function constexpr long double std::fma(long double, long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmal (__x, __y, __z);


;; Function constexpr float std::fmax(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaxf (__x, __y);


;; Function constexpr long double std::fmax(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fmaxl (__x, __y);


;; Function constexpr float std::fmin(float, float) (null)
;; enabled by -tree-original


return <retval> = __builtin_fminf (__x, __y);


;; Function constexpr long double std::fmin(long double, long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_fminl (__x, __y);


;; Function constexpr float std::hypot(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_hypotf (__x, __y)>>;


;; Function constexpr long double std::hypot(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_hypotl (__x, __y)>>;


;; Function constexpr int std::ilogb(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ilogbf (__x)>>;


;; Function constexpr int std::ilogb(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_ilogbl (__x)>>;


;; Function constexpr float std::lgamma(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lgammaf (__x)>>;


;; Function constexpr long double std::lgamma(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lgammal (__x)>>;


;; Function constexpr long long int std::llrint(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llrintf (__x)>>;


;; Function constexpr long long int std::llrint(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llrintl (__x)>>;


;; Function constexpr long long int std::llround(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llroundf (__x)>>;


;; Function constexpr long long int std::llround(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_llroundl (__x)>>;


;; Function constexpr float std::log1p(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log1pf (__x)>>;


;; Function constexpr long double std::log1p(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log1pl (__x)>>;


;; Function constexpr float std::log2(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log2f (__x)>>;


;; Function constexpr long double std::log2(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_log2l (__x)>>;


;; Function constexpr float std::logb(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logbf (__x)>>;


;; Function constexpr long double std::logb(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_logbl (__x)>>;


;; Function constexpr long int std::lrint(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lrintf (__x)>>;


;; Function constexpr long int std::lrint(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lrintl (__x)>>;


;; Function constexpr long int std::lround(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lroundf (__x)>>;


;; Function constexpr long int std::lround(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_lroundl (__x)>>;


;; Function constexpr float std::nearbyint(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_nearbyintf (__x);


;; Function constexpr long double std::nearbyint(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_nearbyintl (__x);


;; Function constexpr float std::nextafter(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nextafterf (__x, __y)>>;


;; Function constexpr long double std::nextafter(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nextafterl (__x, __y)>>;


;; Function constexpr float std::nexttoward(float, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nexttowardf (__x, __y)>>;


;; Function constexpr long double std::nexttoward(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_nexttowardl (__x, __y)>>;


;; Function constexpr float std::remainder(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remainderf (__x, __y)>>;


;; Function constexpr long double std::remainder(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remainderl (__x, __y)>>;


;; Function float std::remquo(float, float, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remquof (__x, __y, __pquo)>>;


;; Function long double std::remquo(long double, long double, int*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_remquol (__x, __y, __pquo)>>;


;; Function constexpr float std::rint(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_rintf (__x);


;; Function constexpr long double std::rint(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_rintl (__x);


;; Function constexpr float std::round(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_roundf (__x);


;; Function constexpr long double std::round(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_roundl (__x);


;; Function constexpr float std::scalbln(float, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalblnf (__x, __ex)>>;


;; Function constexpr long double std::scalbln(long double, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalblnl (__x, __ex)>>;


;; Function constexpr float std::scalbn(float, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalbnf (__x, __ex)>>;


;; Function constexpr long double std::scalbn(long double, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_scalbnl (__x, __ex)>>;


;; Function constexpr float std::tgamma(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_tgammaf (__x)>>;


;; Function constexpr long double std::tgamma(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_tgammal (__x)>>;


;; Function constexpr float std::trunc(float) (null)
;; enabled by -tree-original


return <retval> = __builtin_truncf (__x);


;; Function constexpr long double std::trunc(long double) (null)
;; enabled by -tree-original


return <retval> = __builtin_truncl (__x);


;; Function float std::hypot(float, float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__hypot3<float> (__x, __y, __z)>>;


;; Function double std::hypot(double, double, double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__hypot3<double> (__x, __y, __z)>>;


;; Function long double std::hypot(long double, long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__hypot3<long double> (__x, __y, __z)>>;


;; Function static constexpr bool std::numeric_limits<bool>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr bool std::numeric_limits<bool>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -128
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 127
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -128>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char std::numeric_limits<char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -128
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 127
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -128>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr signed char std::numeric_limits<signed char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 255
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned char std::numeric_limits<unsigned char>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -2147483648
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2147483647
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -2147483648>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr wchar_t std::numeric_limits<wchar_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char16_t std::numeric_limits<char16_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr char32_t std::numeric_limits<char32_t>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -32768
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 32767
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -32768>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short int std::numeric_limits<short int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr short unsigned int std::numeric_limits<short unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -2147483648
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2147483647
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -2147483648>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr int std::numeric_limits<int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr unsigned int std::numeric_limits<unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -9223372036854775808
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -9223372036854775808>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long int std::numeric_limits<long int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long unsigned int std::numeric_limits<long unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -9223372036854775808
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -9223372036854775808>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long int std::numeric_limits<long long int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr long long unsigned int std::numeric_limits<long long unsigned int>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -0x80000000000000000000000000000000
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0x7fffffffffffffffffffffffffffffff
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -0x80000000000000000000000000000000>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 std::numeric_limits<__int128>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0xffffffffffffffffffffffffffffffff
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 0>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr __int128 unsigned std::numeric_limits<__int128 unsigned>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.17549435082228750796873653722224567781866555677208752151e-38
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.4028234663852885981170418348451692544e+38
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -3.4028234663852885981170418348451692544e+38
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.1920928955078125e-7
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr float std::numeric_limits<float>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.40129846432481707092372958328991613128026194187651577176e-45
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.22507385850720138309023271733240406421921598046233183055e-308
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.79769313486231570814527423731704356798070567525844996599e+308
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1.79769313486231570814527423731704356798070567525844996599e+308
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.220446049250313080847263336181640625e-16
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr double std::numeric_limits<double>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4.94065645841246544176568792868221372365059802614324764425e-324
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.36210314311209350626267781732175260259807934484647124011e-4932
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.18973149535723176502126385303097020516906332229462420044e+4932
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1.18973149535723176502126385303097020516906332229462420044e+4932
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.08420217248550443400745280086994171142578125e-19
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr long double std::numeric_limits<long double>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.64519953188247460252840593361941981639905081569356334372e-4951
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.17549435082228750796873653722224567781866555677208752151e-38
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.4028234663852885981170418348451692544e+38
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -3.4028234663852885981170418348451692544e+38
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.1920928955078125e-7
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float32 std::numeric_limits<_Float32>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.40129846432481707092372958328991613128026194187651577176e-45
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.22507385850720138309023271733240406421921598046233183055e-308
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.79769313486231570814527423731704356798070567525844996599e+308
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1.79769313486231570814527423731704356798070567525844996599e+308
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.220446049250313080847263336181640625e-16
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float64 std::numeric_limits<_Float64>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4.94065645841246544176568792868221372365059802614324764425e-324
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.36210314311209350626267781732175260259807934484647124011e-4932
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.18973149535723176508575932662800701619646905264169404553e+4932
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1.18973149535723176508575932662800701619646905264169404553e+4932
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.92592994438723585305597794258492731853810164821538819524e-34
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr _Float128 std::numeric_limits<_Float128>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 6.47517511943802511092443895822764655249956933803468100969e-4966
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.36210314311209350626267781732175260259807934484647124011e-4932
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.18973149535723176508575932662800701619646905264169404553e+4932
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = -1.18973149535723176508575932662800701619646905264169404553e+4932>>
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::epsilon() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.92592994438723585305597794258492731853810164821538819524e-34
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::round_error() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.0e-1
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::infinity() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Inf
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::quiet_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::signaling_NaN() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> =  Nan
   >>>;
__builtin_unreachable ();


;; Function static constexpr __float128 std::numeric_limits<__float128>::denorm_min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 6.47517511943802511092443895822764655249956933803468100969e-4966
   >>>;
__builtin_unreachable ();


;; Function float std::assoc_laguerref(unsigned int, unsigned int, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__assoc_laguerre<float> (__n, __m, __x)>>;


;; Function long double std::assoc_laguerrel(unsigned int, unsigned int, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__assoc_laguerre<long double> (__n, __m, __x)>>;


;; Function float std::assoc_legendref(unsigned int, unsigned int, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__assoc_legendre_p<float> (__l, __m, __x, 1.0e+0)>>;


;; Function long double std::assoc_legendrel(unsigned int, unsigned int, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__assoc_legendre_p<long double> (__l, __m, __x, 1.0e+0)>>;


;; Function float std::betaf(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__beta<float> (__a, __b)>>;


;; Function long double std::betal(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__beta<long double> (__a, __b)>>;


;; Function float std::comp_ellint_1f(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__comp_ellint_1<float> (__k)>>;


;; Function long double std::comp_ellint_1l(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__comp_ellint_1<long double> (__k)>>;


;; Function float std::comp_ellint_2f(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__comp_ellint_2<float> (__k)>>;


;; Function long double std::comp_ellint_2l(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__comp_ellint_2<long double> (__k)>>;


;; Function float std::comp_ellint_3f(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__comp_ellint_3<float> (__k, __nu)>>;


;; Function long double std::comp_ellint_3l(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__comp_ellint_3<long double> (__k, __nu)>>;


;; Function float std::cyl_bessel_if(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__cyl_bessel_i<float> (__nu, __x)>>;


;; Function long double std::cyl_bessel_il(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__cyl_bessel_i<long double> (__nu, __x)>>;


;; Function float std::cyl_bessel_jf(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__cyl_bessel_j<float> (__nu, __x)>>;


;; Function long double std::cyl_bessel_jl(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__cyl_bessel_j<long double> (__nu, __x)>>;


;; Function float std::cyl_bessel_kf(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__cyl_bessel_k<float> (__nu, __x)>>;


;; Function long double std::cyl_bessel_kl(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__cyl_bessel_k<long double> (__nu, __x)>>;


;; Function float std::cyl_neumannf(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__cyl_neumann_n<float> (__nu, __x)>>;


;; Function long double std::cyl_neumannl(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__cyl_neumann_n<long double> (__nu, __x)>>;


;; Function float std::ellint_1f(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__ellint_1<float> (__k, __phi)>>;


;; Function long double std::ellint_1l(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__ellint_1<long double> (__k, __phi)>>;


;; Function float std::ellint_2f(float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__ellint_2<float> (__k, __phi)>>;


;; Function long double std::ellint_2l(long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__ellint_2<long double> (__k, __phi)>>;


;; Function float std::ellint_3f(float, float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__ellint_3<float> (__k, __nu, __phi)>>;


;; Function long double std::ellint_3l(long double, long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__ellint_3<long double> (__k, __nu, __phi)>>;


;; Function float std::expintf(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__expint<float> (__x)>>;


;; Function long double std::expintl(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__expint<long double> (__x)>>;


;; Function float std::hermitef(unsigned int, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__poly_hermite<float> (__n, __x)>>;


;; Function long double std::hermitel(unsigned int, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__poly_hermite<long double> (__n, __x)>>;


;; Function float std::laguerref(unsigned int, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__laguerre<float> (__n, __x)>>;


;; Function long double std::laguerrel(unsigned int, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__laguerre<long double> (__n, __x)>>;


;; Function float std::legendref(unsigned int, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__poly_legendre_p<float> (__l, __x)>>;


;; Function long double std::legendrel(unsigned int, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__poly_legendre_p<long double> (__l, __x)>>;


;; Function float std::riemann_zetaf(float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__riemann_zeta<float> (__s)>>;


;; Function long double std::riemann_zetal(long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__riemann_zeta<long double> (__s)>>;


;; Function float std::sph_besself(unsigned int, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__sph_bessel<float> (__n, __x)>>;


;; Function long double std::sph_bessell(unsigned int, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__sph_bessel<long double> (__n, __x)>>;


;; Function float std::sph_legendref(unsigned int, unsigned int, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__sph_legendre<float> (__l, __m, __theta)>>;


;; Function long double std::sph_legendrel(unsigned int, unsigned int, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__sph_legendre<long double> (__l, __m, __theta)>>;


;; Function float std::sph_neumannf(unsigned int, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__sph_neumann<float> (__n, __x)>>;


;; Function long double std::sph_neumannl(unsigned int, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__sph_neumann<long double> (__n, __x)>>;


;; Function float __gnu_cxx::airy_aif(float) (null)
;; enabled by -tree-original


{
  float __Ai;
  float __Bi;
  float __Aip;
  float __Bip;

    float __Ai;
    float __Bi;
    float __Aip;
    float __Bip;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__airy<float> (__x, (float &) &__Ai, (float &) &__Bi, (float &) &__Aip, (float &) &__Bip) >>>>>;
  return <retval> = __Ai;
}


;; Function long double __gnu_cxx::airy_ail(long double) (null)
;; enabled by -tree-original


{
  long double __Ai;
  long double __Bi;
  long double __Aip;
  long double __Bip;

    long double __Ai;
    long double __Bi;
    long double __Aip;
    long double __Bip;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__airy<long double> (__x, (long double &) &__Ai, (long double &) &__Bi, (long double &) &__Aip, (long double &) &__Bip) >>>>>;
  return <retval> = __Ai;
}


;; Function float __gnu_cxx::airy_bif(float) (null)
;; enabled by -tree-original


{
  float __Ai;
  float __Bi;
  float __Aip;
  float __Bip;

    float __Ai;
    float __Bi;
    float __Aip;
    float __Bip;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__airy<float> (__x, (float &) &__Ai, (float &) &__Bi, (float &) &__Aip, (float &) &__Bip) >>>>>;
  return <retval> = __Bi;
}


;; Function long double __gnu_cxx::airy_bil(long double) (null)
;; enabled by -tree-original


{
  long double __Ai;
  long double __Bi;
  long double __Aip;
  long double __Bip;

    long double __Ai;
    long double __Bi;
    long double __Aip;
    long double __Bip;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__airy<long double> (__x, (long double &) &__Ai, (long double &) &__Bi, (long double &) &__Aip, (long double &) &__Bip) >>>>>;
  return <retval> = __Bi;
}


;; Function float __gnu_cxx::conf_hypergf(float, float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__conf_hyperg<float> (__a, __c, __x)>>;


;; Function long double __gnu_cxx::conf_hypergl(long double, long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__conf_hyperg<long double> (__a, __c, __x)>>;


;; Function float __gnu_cxx::hypergf(float, float, float, float) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__hyperg<float> (__a, __b, __c, __x)>>;


;; Function long double __gnu_cxx::hypergl(long double, long double, long double, long double) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__hyperg<long double> (__a, __b, __c, __x)>>;


;; Function std::_Bit_reference::_Bit_reference(std::_Bit_type*, std::_Bit_type) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Bit_reference *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Bit_reference *) this)->_M_p = __x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Bit_reference *) this)->_M_mask = __y) >>>>>;
}


;; Function std::_Bit_reference::_Bit_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct _Bit_reference *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct _Bit_reference *) this)->_M_p = 0B) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct _Bit_reference *) this)->_M_mask = 0) >>>>>;
  }
   >>>;


;; Function std::_Bit_reference::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (*(_Bit_type *) ((const struct _Bit_reference *) this)->_M_p & (long unsigned int) ((const struct _Bit_reference *) this)->_M_mask) != 0
   >>>;
__builtin_unreachable ();


;; Function std::_Bit_reference& std::_Bit_reference::operator=(bool) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__x)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*((struct _Bit_reference *) this)->_M_p = *((struct _Bit_reference *) this)->_M_p | ((struct _Bit_reference *) this)->_M_mask) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*((struct _Bit_reference *) this)->_M_p = *((struct _Bit_reference *) this)->_M_p & ~((struct _Bit_reference *) this)->_M_mask) >>>>>;
    }
  return <retval> = (struct _Bit_reference &) this;
   >>>;
__builtin_unreachable ();


;; Function std::_Bit_reference& std::_Bit_reference::operator=(const std::_Bit_reference&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Bit_reference::operator= ((struct _Bit_reference *) this, (int) std::_Bit_reference::operator bool ((const struct _Bit_reference *) __x))>>
   >>>;
__builtin_unreachable ();


;; Function bool std::_Bit_reference::operator==(const std::_Bit_reference&) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Bit_reference::operator bool ((const struct _Bit_reference *) this) == std::_Bit_reference::operator bool ((const struct _Bit_reference *) __x)>>;


;; Function bool std::_Bit_reference::operator<(const std::_Bit_reference&) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = !std::_Bit_reference::operator bool ((const struct _Bit_reference *) this) && std::_Bit_reference::operator bool ((const struct _Bit_reference *) __x)>>;


;; Function void std::_Bit_reference::flip() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*((struct _Bit_reference *) this)->_M_p = *((struct _Bit_reference *) this)->_M_p ^ ((struct _Bit_reference *) this)->_M_mask) >>>>>
   >>>;


;; Function void std::swap(_Bit_reference, _Bit_reference) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    bool __tmp;

        bool __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__tmp = std::_Bit_reference::operator bool (&__x)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::_Bit_reference::operator= (&__x, (const struct _Bit_reference &) &__y) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::_Bit_reference::operator= (&__y, (int) __tmp) >>>>>;
  }
   >>>;


;; Function void std::swap(_Bit_reference, bool&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    bool __tmp;

        bool __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__tmp = std::_Bit_reference::operator bool (&__x)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::_Bit_reference::operator= (&__x, (int) *__y) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__y = __tmp) >>>>>;
  }
   >>>;


;; Function void std::swap(bool&, _Bit_reference) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    bool __tmp = *__x;

        bool __tmp = *__x;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__x = std::_Bit_reference::operator bool (&__y)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::_Bit_reference::operator= (&__y, (int) __tmp) >>>>>;
  }
   >>>;


;; Function void std::_Bit_iterator_base::_M_assume_normalized() const (null)
;; enabled by -tree-original


{
  unsigned int __ofst = (unsigned int) ((const struct _Bit_iterator_base *) this)->_M_offset;

    unsigned int __ofst = (unsigned int) ((const struct _Bit_iterator_base *) this)->_M_offset;
  <<cleanup_point <<< Unknown tree: expr_stmt
    .ASSUME (__ofst <= 63) >>>>>;
}


;; Function std::_Bit_iterator_base::_Bit_iterator_base(std::_Bit_type*, unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Bit_iterator_base *) this)->_M_p = __x) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Bit_iterator_base *) this)->_M_offset = __y) >>>>>;
}


;; Function void std::_Bit_iterator_base::_M_bump_up() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized ((struct _Bit_iterator_base *) this) >>>>>;
if (<<cleanup_point ((struct _Bit_iterator_base *) this)->_M_offset++  == 63>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct _Bit_iterator_base *) this)->_M_offset = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void)  ++((struct _Bit_iterator_base *) this)->_M_p >>>>>;
  }


;; Function void std::_Bit_iterator_base::_M_bump_down() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized ((struct _Bit_iterator_base *) this) >>>>>;
if (<<cleanup_point ((struct _Bit_iterator_base *) this)->_M_offset--  == 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct _Bit_iterator_base *) this)->_M_offset = 63) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void)  --((struct _Bit_iterator_base *) this)->_M_p >>>>>;
  }


;; Function void std::_Bit_iterator_base::_M_incr(std::ptrdiff_t) (null)
;; enabled by -tree-original


{
  difference_type __n = (ptrdiff_t) ((struct _Bit_iterator_base *) this)->_M_offset + __i;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_M_assume_normalized ((struct _Bit_iterator_base *) this) >>>>>;
    difference_type __n = (ptrdiff_t) ((struct _Bit_iterator_base *) this)->_M_offset + __i;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Bit_iterator_base *) this)->_M_p = ((struct _Bit_iterator_base *) this)->_M_p + (sizetype) ((long unsigned int) (__n / 64) * 8)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__n = __n % 64) >>>>>;
  if (__n < 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__n = __n + 64) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void)  --((struct _Bit_iterator_base *) this)->_M_p >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Bit_iterator_base *) this)->_M_offset = (unsigned int) __n) >>>>>;
}


;; Function bool std::operator==(const _Bit_iterator_base&, const _Bit_iterator_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized ((const struct _Bit_iterator_base *) __x) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized ((const struct _Bit_iterator_base *) __y) >>>>>;
return <retval> = (_Bit_type *) __x->_M_p == (_Bit_type *) __y->_M_p && __x->_M_offset == __y->_M_offset;


;; Function bool std::operator<(const _Bit_iterator_base&, const _Bit_iterator_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized ((const struct _Bit_iterator_base *) __x) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized ((const struct _Bit_iterator_base *) __y) >>>>>;
return <retval> = (_Bit_type *) __x->_M_p < (_Bit_type *) __y->_M_p || (_Bit_type *) __x->_M_p == (_Bit_type *) __y->_M_p && __x->_M_offset < __y->_M_offset;


;; Function bool std::operator!=(const _Bit_iterator_base&, const _Bit_iterator_base&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = !std::operator== (__x, __y)>>;


;; Function bool std::operator>(const _Bit_iterator_base&, const _Bit_iterator_base&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::operator< (__y, __x)>>;


;; Function bool std::operator<=(const _Bit_iterator_base&, const _Bit_iterator_base&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = !std::operator< (__y, __x)>>;


;; Function bool std::operator>=(const _Bit_iterator_base&, const _Bit_iterator_base&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = !std::operator< (__x, __y)>>;


;; Function std::ptrdiff_t std::operator-(const _Bit_iterator_base&, const _Bit_iterator_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized ((const struct _Bit_iterator_base *) __x) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized ((const struct _Bit_iterator_base *) __y) >>>>>;
return <retval> = (((_Bit_type *) __x->_M_p - (_Bit_type *) __y->_M_p) * 8 + (long int) __x->_M_offset) - (long int) __y->_M_offset;


;; Function std::_Bit_iterator::_Bit_iterator() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_iterator *) this)->D.63259, 0B, 0) >>>>>;
}


;; Function std::_Bit_iterator::_Bit_iterator(std::_Bit_type*, unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_iterator *) this)->D.63259, __x, __y) >>>>>;
}


;; Function std::_Bit_iterator::iterator std::_Bit_iterator::_M_const_cast() const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63313, *(const struct _Bit_iterator &) this>>>;


;; Function std::_Bit_iterator::reference std::_Bit_iterator::operator*() const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized (&((const struct _Bit_iterator *) this)->D.63259) >>>>>;
<<cleanup_point return <retval> = TARGET_EXPR <D.63323, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.63323
  (struct _Bit_reference *) <<< Unknown tree: void_cst >>>
  (_Bit_type *) ((const struct _Bit_iterator *) this)->D.63259._M_p
  1 << (unsigned int) ((const struct _Bit_iterator *) this)->D.63259._M_offset >>>>;, D.63323>>;


;; Function std::_Bit_iterator::iterator& std::_Bit_iterator::operator++() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_up (&((struct _Bit_iterator *) this)->D.63259) >>>>>;
return <retval> = (struct iterator &) this;


;; Function std::_Bit_iterator::iterator std::_Bit_iterator::operator++(int) (null)
;; enabled by -tree-original


{
  struct iterator __tmp = *(const struct _Bit_iterator &) this;

    struct iterator __tmp = *(const struct _Bit_iterator &) this;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_M_bump_up (&((struct _Bit_iterator *) this)->D.63259) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.63335, *(struct _Bit_iterator &) &__tmp>>>;
}


;; Function std::_Bit_iterator::iterator& std::_Bit_iterator::operator--() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_down (&((struct _Bit_iterator *) this)->D.63259) >>>>>;
return <retval> = (struct iterator &) this;


;; Function std::_Bit_iterator::iterator std::_Bit_iterator::operator--(int) (null)
;; enabled by -tree-original


{
  struct iterator __tmp = *(const struct _Bit_iterator &) this;

    struct iterator __tmp = *(const struct _Bit_iterator &) this;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_M_bump_down (&((struct _Bit_iterator *) this)->D.63259) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.63338, *(struct _Bit_iterator &) &__tmp>>>;
}


;; Function std::_Bit_iterator::iterator& std::_Bit_iterator::operator+=(std::iterator<std::random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_incr (&((struct _Bit_iterator *) this)->D.63259, __i) >>>>>;
return <retval> = (struct iterator &) this;


;; Function std::_Bit_iterator::iterator& std::_Bit_iterator::operator-=(std::iterator<std::random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::_Bit_iterator::operator+= ((struct _Bit_iterator *) this, -NON_LVALUE_EXPR <__i>) >>>>>;
return <retval> = (struct iterator &) this;


;; Function std::_Bit_iterator::reference std::_Bit_iterator::operator[](std::iterator<std::random_access_iterator_tag, bool>::difference_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63340, std::_Bit_iterator::operator* (&TARGET_EXPR <D.63339, std::operator+ ((const struct iterator &) this, __i)>)>>>;


;; Function std::_Bit_iterator::iterator std::operator+(const _Bit_iterator::iterator&, iterator<random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


{
  struct iterator __tmp = *(const struct _Bit_iterator &) __x;

    struct iterator __tmp = *(const struct _Bit_iterator &) __x;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::_Bit_iterator::operator+= (&__tmp, __n) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.63344, *(struct _Bit_iterator &) &__tmp>>>;
}


;; Function std::_Bit_iterator::iterator std::operator+(iterator<random_access_iterator_tag, bool>::difference_type, const _Bit_iterator::iterator&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63346, std::operator+ (__x, __n)>>>;


;; Function std::_Bit_iterator::iterator std::operator-(const _Bit_iterator::iterator&, iterator<random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


{
  struct iterator __tmp = *(const struct _Bit_iterator &) __x;

    struct iterator __tmp = *(const struct _Bit_iterator &) __x;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::_Bit_iterator::operator-= (&__tmp, __n) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.63350, *(struct _Bit_iterator &) &__tmp>>>;
}


;; Function std::_Bit_const_iterator::_Bit_const_iterator() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_const_iterator *) this)->D.63437, 0B, 0) >>>>>;
}


;; Function std::_Bit_const_iterator::_Bit_const_iterator(std::_Bit_type*, unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_const_iterator *) this)->D.63437, __x, __y) >>>>>;
}


;; Function std::_Bit_const_iterator::_Bit_const_iterator(const std::_Bit_iterator&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_Bit_iterator_base (&((struct _Bit_const_iterator *) this)->D.63437, (_Bit_type *) __x->D.63259._M_p, (unsigned int) __x->D.63259._M_offset) >>>>>;
}


;; Function std::_Bit_iterator std::_Bit_const_iterator::_M_const_cast() const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63449, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.63449
  (struct _Bit_iterator *) <<< Unknown tree: void_cst >>>
  (_Bit_type *) ((const struct _Bit_const_iterator *) this)->D.63437._M_p
  (unsigned int) ((const struct _Bit_const_iterator *) this)->D.63437._M_offset >>>>;, D.63449>>;


;; Function std::_Bit_const_iterator::const_reference std::_Bit_const_iterator::operator*() const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_assume_normalized (&((const struct _Bit_const_iterator *) this)->D.63437) >>>>>;
<<cleanup_point return <retval> = std::_Bit_reference::operator bool (&TARGET_EXPR <D.63450, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.63450
  (struct _Bit_reference *) <<< Unknown tree: void_cst >>>
  (_Bit_type *) ((const struct _Bit_const_iterator *) this)->D.63437._M_p
  1 << (unsigned int) ((const struct _Bit_const_iterator *) this)->D.63437._M_offset >>>>)>>;


;; Function std::_Bit_const_iterator::const_iterator& std::_Bit_const_iterator::operator++() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_up (&((struct _Bit_const_iterator *) this)->D.63437) >>>>>;
return <retval> = (struct const_iterator &) this;


;; Function std::_Bit_const_iterator::const_iterator std::_Bit_const_iterator::operator++(int) (null)
;; enabled by -tree-original


{
  struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;

    struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_M_bump_up (&((struct _Bit_const_iterator *) this)->D.63437) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.63480, *(struct _Bit_const_iterator &) &__tmp>>>;
}


;; Function std::_Bit_const_iterator::const_iterator& std::_Bit_const_iterator::operator--() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_bump_down (&((struct _Bit_const_iterator *) this)->D.63437) >>>>>;
return <retval> = (struct const_iterator &) this;


;; Function std::_Bit_const_iterator::const_iterator std::_Bit_const_iterator::operator--(int) (null)
;; enabled by -tree-original


{
  struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;

    struct const_iterator __tmp = *(const struct _Bit_const_iterator &) this;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Bit_iterator_base::_M_bump_down (&((struct _Bit_const_iterator *) this)->D.63437) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.63483, *(struct _Bit_const_iterator &) &__tmp>>>;
}


;; Function std::_Bit_const_iterator::const_iterator& std::_Bit_const_iterator::operator+=(std::iterator<std::random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Bit_iterator_base::_M_incr (&((struct _Bit_const_iterator *) this)->D.63437, __i) >>>>>;
return <retval> = (struct const_iterator &) this;


;; Function std::_Bit_const_iterator::const_iterator& std::_Bit_const_iterator::operator-=(std::iterator<std::random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::_Bit_const_iterator::operator+= ((struct _Bit_const_iterator *) this, -NON_LVALUE_EXPR <__i>) >>>>>;
return <retval> = (struct const_iterator &) this;


;; Function std::_Bit_const_iterator::const_reference std::_Bit_const_iterator::operator[](std::iterator<std::random_access_iterator_tag, bool>::difference_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Bit_const_iterator::operator* (&TARGET_EXPR <D.63484, std::operator+ ((const struct const_iterator &) this, __i)>)>>;


;; Function std::_Bit_const_iterator::const_iterator std::operator+(const _Bit_const_iterator::const_iterator&, iterator<random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


{
  struct const_iterator __tmp = *(const struct _Bit_const_iterator &) __x;

    struct const_iterator __tmp = *(const struct _Bit_const_iterator &) __x;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::_Bit_const_iterator::operator+= (&__tmp, __n) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.63488, *(struct _Bit_const_iterator &) &__tmp>>>;
}


;; Function std::_Bit_const_iterator::const_iterator std::operator-(const _Bit_const_iterator::const_iterator&, iterator<random_access_iterator_tag, bool>::difference_type) (null)
;; enabled by -tree-original


{
  struct const_iterator __tmp = *(const struct _Bit_const_iterator &) __x;

    struct const_iterator __tmp = *(const struct _Bit_const_iterator &) __x;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::_Bit_const_iterator::operator-= (&__tmp, __n) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.63492, *(struct _Bit_const_iterator &) &__tmp>>>;
}


;; Function std::_Bit_const_iterator::const_iterator std::operator+(iterator<random_access_iterator_tag, bool>::difference_type, const _Bit_const_iterator::const_iterator&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63494, std::operator+ (__x, __n)>>>;


;; Function void std::__fill_bvector(_Bit_type*, unsigned int, unsigned int, bool) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const _Bit_type __fmask = 18446744073709551615 << __first;
    const _Bit_type __lmask = 18446744073709551615 >> 64 - __last;
    const _Bit_type __mask = (long unsigned int) __fmask & (long unsigned int) __lmask;

        const _Bit_type __fmask = 18446744073709551615 << __first;
        const _Bit_type __lmask = 18446744073709551615 >> 64 - __last;
        const _Bit_type __mask = (long unsigned int) __fmask & (long unsigned int) __lmask;
    if (__x)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*__v = *__v | (_Bit_type) __mask) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*__v = *__v & ~(long unsigned int) __mask) >>>>>;
      }
  }
   >>>;


;; Function void std::__fill_bvector_n(_Bit_type*, size_t, bool) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) __builtin_memset ((void *) __p, __x ? -1 : 0, __n * 8) >>>>>
   >>>;


;; Function void std::__fill_a1(_Bit_iterator, _Bit_iterator, const bool&) (null)
;; enabled by -tree-original


{
  {
    if (__first.D.63259._M_p != __last.D.63259._M_p)
      {
        {
          _Bit_type * __first_p = __first.D.63259._M_p;

                    _Bit_type * __first_p = __first.D.63259._M_p;
          if (__first.D.63259._M_offset != 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__fill_bvector (__first_p++ , __first.D.63259._M_offset, 64, (int) *__x) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__fill_bvector_n (__first_p, (size_t) ((__last.D.63259._M_p - __first_p) /[ex] 8), (int) *__x) >>>>>;
          if (__last.D.63259._M_offset != 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__fill_bvector (__last.D.63259._M_p, 0, __last.D.63259._M_offset, (int) *__x) >>>>>;
            }
        }
      }
    else
      {
        if (__first.D.63259._M_offset != __last.D.63259._M_offset)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__fill_bvector (__first.D.63259._M_p, __first.D.63259._M_offset, __last.D.63259._M_offset, (int) *__x) >>>>>;
          }
      }
  }
}


;; Function std::random_device::random_device() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct random_device *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::random_device::_M_init ((struct random_device *) this, (const struct string &) &TARGET_EXPR <D.66831, <<< Unknown tree: aggr_init_expr
      6
      __ct_comp 
      D.66831
      (const struct string *) <<< Unknown tree: void_cst >>>
      (const char *) "default"
      (const struct allocator &) &TARGET_EXPR <D.66830, <<< Unknown tree: aggr_init_expr
        4
        __ct_comp 
        D.66830
        (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>) >>>>>;
}


;; Function std::random_device::random_device(const std::string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct random_device *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::random_device::_M_init ((struct random_device *) this, __token) >>>>>;
}


;; Function std::random_device::~random_device() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::random_device::_M_fini ((struct random_device *) this) >>>>>;
      }
    finally
      {
        *(struct random_device *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static constexpr std::random_device::result_type std::random_device::min() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 0>>;


;; Function static constexpr std::random_device::result_type std::random_device::max() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 4294967295>>;


;; Function double std::random_device::entropy() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::random_device::_M_getentropy ((const struct random_device *) this)>>
   >>>;
__builtin_unreachable ();


;; Function std::random_device::result_type std::random_device::operator()() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::random_device::_M_getval ((struct random_device *) this)>>;


;; Function std::bernoulli_distribution::param_type::param_type() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct param_type *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::bernoulli_distribution::param_type::param_type ((struct param_type *) this, 5.0e-1) >>>>>;
}


;; Function std::bernoulli_distribution::param_type::param_type(double) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct param_type *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct param_type *) this)->_M_p = __p) >>>>>;
  if (0)
    {
      if ((long int) (__builtin_expect ((long int) !(((struct param_type *) this)->_M_p >= 0.0), 0) != 0 || __builtin_expect ((long int) !(((struct param_type *) this)->_M_p <= 1.0e+0), 0) != 0) != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__glibcxx_assert_fail () >>>>>;
        }
    }
}


;; Function double std::bernoulli_distribution::param_type::p() const (null)
;; enabled by -tree-original


return <retval> = (double) ((const struct param_type *) this)->_M_p;


;; Function bool std::operator==(const bernoulli_distribution::param_type&, const bernoulli_distribution::param_type&) (null)
;; enabled by -tree-original


return <retval> = (double) __p1->_M_p == (double) __p2->_M_p;


;; Function bool std::operator!=(const bernoulli_distribution::param_type&, const bernoulli_distribution::param_type&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = !std::operator== (__p1, __p2)>>;


;; Function std::bernoulli_distribution::bernoulli_distribution() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct bernoulli_distribution *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::bernoulli_distribution::bernoulli_distribution ((struct bernoulli_distribution *) this, 5.0e-1) >>>>>;
}


;; Function std::bernoulli_distribution::bernoulli_distribution(double) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct bernoulli_distribution *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::bernoulli_distribution::param_type::param_type (&((struct bernoulli_distribution *) this)->_M_param, __p) >>>>>;
}


;; Function std::bernoulli_distribution::bernoulli_distribution(const param_type&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct bernoulli_distribution *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct bernoulli_distribution *) this)->_M_param = *__p) >>>>>;
}


;; Function void std::bernoulli_distribution::reset() (null)
;; enabled by -tree-original





;; Function double std::bernoulli_distribution::p() const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::bernoulli_distribution::param_type::p (&((const struct bernoulli_distribution *) this)->_M_param)>>;


;; Function std::bernoulli_distribution::param_type std::bernoulli_distribution::param() const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.68669, ((const struct bernoulli_distribution *) this)->_M_param>>>;


;; Function void std::bernoulli_distribution::param(const param_type&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bernoulli_distribution *) this)->_M_param = *__param) >>>>>;


;; Function std::bernoulli_distribution::result_type std::bernoulli_distribution::min() const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 0>>;


;; Function std::bernoulli_distribution::result_type std::bernoulli_distribution::max() const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 1>>;


;; Function bool std::operator==(const bernoulli_distribution&, const bernoulli_distribution&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::operator== ((const struct param_type &) &__d1->_M_param, (const struct param_type &) &__d2->_M_param)>>;


;; Function bool std::operator!=(const bernoulli_distribution&, const bernoulli_distribution&) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = !std::operator== (__d1, __d2)>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = allocator<unsigned int>; long unsigned int <anonymous> = 1; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.73457, {}>>>;


;; Function std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<unsigned int>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Vector_impl *) this = {CLOBBER(eob)};
    }
}


;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl (&((struct _Vector_base *) this)->_M_impl) >>>>>;
  try
    {
      
    }
  catch
    {
      std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl (&((struct _Vector_base *) this)->_M_impl);
    }
}


;; Function std::vector<_Tp, _Alloc>::vector() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base (&((struct vector *) this)->D.73373) >>>>>;
  try
    {
      
    }
  catch
    {
      std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base (&((struct vector *) this)->D.73373);
    }
}


;; Function std::seed_seq::seed_seq() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct seed_seq *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct seed_seq *) this)->_M_v = <<< Unknown tree: aggr_init_expr
        4
        __ct_comp 
        D.73473
        (struct vector *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
    try
      {
        
      }
    catch
      {
        std::vector<unsigned int>::~vector (&((struct seed_seq *) this)->_M_v);
      }
  }
   >>>;


;; Function std::size_t std::seed_seq::size() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::vector<unsigned int>::size (&((const struct seed_seq *) this)->_M_v)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>&; long unsigned int <anonymous> = 8; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84197, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>&; long unsigned int <anonymous> = 8; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84242, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&; long unsigned int <anonymous> = 5000; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84287, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>&; long unsigned int <anonymous> = 2504; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84332, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = subtract_with_carry_engine<long unsigned int, 24, 10, 24>&; long unsigned int <anonymous> = 208; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84377, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = subtract_with_carry_engine<long unsigned int, 48, 5, 12>&; long unsigned int <anonymous> = 112; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84422, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = discard_block_engine<subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>&; long unsigned int <anonymous> = 216; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84467, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = discard_block_engine<subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>&; long unsigned int <anonymous> = 120; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84512, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = shuffle_order_engine<linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>&; long unsigned int <anonymous> = 2064; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.84557, {}>>>;


;; Function static constexpr std::__enable_if_t<(sizeof... (_UElements) == sizeof... (_Elements)), bool> std::tuple< <template-parameter-1-1> >::__assignable() [with _UElements = {const std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>&, const std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>&, const std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>&, const std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>&, const std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>&, const std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>&, const std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>&, const std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>&, const std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>&, const std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>&}; _Elements = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; std::__enable_if_t<(sizeof... (_UElements) == sizeof... (_Elements)), bool> = bool] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr std::__enable_if_t<(sizeof... (_UElements) == sizeof... (_Elements)), bool> std::tuple< <template-parameter-1-1> >::__assignable() [with _UElements = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; _Elements = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; std::__enable_if_t<(sizeof... (_UElements) == sizeof... (_Elements)), bool> = bool] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr bool std::_TupleConstraints<<anonymous>, _Types>::__is_implicitly_default_constructible() [with bool <anonymous> = true; _Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; long unsigned int <anonymous> = 8; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85446, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>; long unsigned int <anonymous> = 8; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85506, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>; long unsigned int <anonymous> = 5000; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85566, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>; long unsigned int <anonymous> = 2504; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85626, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = subtract_with_carry_engine<long unsigned int, 24, 10, 24>; long unsigned int <anonymous> = 208; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85686, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = subtract_with_carry_engine<long unsigned int, 48, 5, 12>; long unsigned int <anonymous> = 112; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85746, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = discard_block_engine<subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>; long unsigned int <anonymous> = 216; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85806, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = discard_block_engine<subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>; long unsigned int <anonymous> = 120; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85866, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = shuffle_order_engine<linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>; long unsigned int <anonymous> = 2064; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.85926, {}>>>;


;; Function static constexpr bool std::_TupleConstraints<<anonymous>, _Types>::__is_explicitly_default_constructible() [with bool <anonymous> = true; _Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 9; _Head = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86014
      (struct linear_congruential_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head>::_Tuple_impl() [with long unsigned int _Idx = 9; _Head = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<9, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.77965) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 8; _Head = std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86028
      (struct shuffle_order_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 8; _Head = std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>; _Tail = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<9, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.78576) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<8, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.78577) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 7; _Head = std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86044
      (struct discard_block_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 7; _Head = std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>; _Tail = {std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<8, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.79205) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<7, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.79206) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 6; _Head = std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86060
      (struct discard_block_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 6; _Head = std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>; _Tail = {std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<7, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.79842) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<6, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.79843) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 5; _Head = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86076
      (struct subtract_with_carry_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 5; _Head = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>; _Tail = {std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<6, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.80421) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<5, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.80422) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 4; _Head = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86092
      (struct subtract_with_carry_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 4; _Head = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>; _Tail = {std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<5, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.81008) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<4, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.81009) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 3; _Head = std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86108
      (struct mersenne_twister_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 3; _Head = std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>; _Tail = {std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<4, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.81636) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<3, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.81637) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 2; _Head = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86124
      (struct mersenne_twister_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 2; _Head = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>; _Tail = {std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<3, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.82272) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<2, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.82273) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 1; _Head = std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86140
      (struct linear_congruential_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 1; _Head = std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>; _Tail = {std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<2, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.82916) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<1, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.82917) >>>>>;
}


;; Function constexpr std::_Head_base<_Idx, _Head, false>::_Head_base() [with long unsigned int _Idx = 0; _Head = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Head_base *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Head_base *) this)->_M_head_impl = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.86156
      (struct linear_congruential_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
}


;; Function constexpr std::_Tuple_impl<_Idx, _Head, _Tail ...>::_Tuple_impl() [with long unsigned int _Idx = 0; _Head = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; _Tail = {std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Tuple_impl *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<1, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct _Tuple_impl *) this)->D.83534) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Head_base<0, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, false>::_Head_base (&((struct _Tuple_impl *) this)->D.83535) >>>>>;
}


;; Function constexpr std::tuple< <template-parameter-1-1> >::tuple() [with _Dummy = void; typename std::enable_if<_TCC<((bool)std::is_void<_Dummy>::value)>::__is_implicitly_default_constructible(), bool>::type <anonymous> = true; _Elements = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct tuple *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Tuple_impl<0, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::_Tuple_impl (&((struct tuple *) this)->D.85007) >>>>>;
}


;; Function int main() (null)
;; enabled by -tree-original


{
  struct tuple engines;

    struct tuple engines;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::tuple<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> >::tuple<> (&engines) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<> ((struct tuple &) &engines) >>>>>;
  return <retval> = 0;
}
return <retval> = 0;


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = char; std::size_t = long unsigned int; char_type = char] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.86195>;
  <D.86196>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void)  ++__i >>>>>;
  <D.86195>:;
  if (<<cleanup_point !__gnu_cxx::char_traits<char>::eq ((const char_type &) (__p + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) &TARGET_EXPR <D.86189, 0>)>>) goto <D.86196>; else goto <D.86194>;
  <D.86194>:;
  return <retval> = __i;
}


;; Function static constexpr const __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = char; char_type = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.86210>;
    <D.86209>:;
    if (<<cleanup_point __gnu_cxx::char_traits<char>::eq ((const char_type &) (__s + (sizetype) NON_LVALUE_EXPR <__i>), __a)>>)
      {
        return <retval> = __s + (sizetype) NON_LVALUE_EXPR <__i>;
      }
    <<cleanup_point (void)  ++__i>>;
    <D.86210>:;
    if (__i < __n) goto <D.86209>; else goto <D.86207>;
    <D.86207>:;
  }
  return <retval> = 0B;
}


;; Function static constexpr int __gnu_cxx::char_traits<_CharT>::compare(const char_type*, const char_type*, std::size_t) [with _CharT = wchar_t; char_type = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.86224>;
    <D.86223>:;
    if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.86224>:;
    if (__i < __n) goto <D.86223>; else goto <D.86221>;
    <D.86221>:;
  }
  return <retval> = 0;
}


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = wchar_t; std::size_t = long unsigned int; char_type = wchar_t] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.86234>;
  <D.86235>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void)  ++__i >>>>>;
  <D.86234>:;
  if (<<cleanup_point !__gnu_cxx::char_traits<wchar_t>::eq ((const char_type &) (__p + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.86228, 0>)>>) goto <D.86235>; else goto <D.86233>;
  <D.86233>:;
  return <retval> = __i;
}


;; Function static constexpr const __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = wchar_t; char_type = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.86249>;
    <D.86248>:;
    if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 4);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.86249>:;
    if (__i < __n) goto <D.86248>; else goto <D.86246>;
    <D.86246>:;
  }
  return <retval> = 0B;
}


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = float; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = double; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, 3339675911)>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, size_type) [with _CharT = char; _Traits = std::char_traits<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string_view *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string_view *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string_view *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string_view *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.86381, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long int, long int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long int, long int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.86483, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, long int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long unsigned int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.86570, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long unsigned int, long unsigned int, char, int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long long int, long long int, char, int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long long int, long long int, char, int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.86648, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long int, long long int, char, int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.86726, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, char, int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  double __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<double, double, char>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<double, double, char>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.86803, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<double, double, char>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  float __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<float, float, char>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<float, float, char>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((float) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.86880, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<float, float, char>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long double __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long double __tmp;

    long double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long double, long double, char>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long double, long double, char>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((long double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.86957, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long double, long double, char>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER(eob)};
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) &TARGET_EXPR <D.86998, <<< Unknown tree: aggr_init_expr
        4
        __ct_comp 
        D.86998
        (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.87019>;
    <D.87020>:;
    {
      const unsigned int __num = (__val % 100) * 2;

            const unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) __pos) = (char) __digits[(unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.87019>:;
    if (__val > 99) goto <D.87020>; else goto <D.87018>;
    <D.87018>:;
    {
      if (__val > 9)
        {
          {
            const unsigned int __num = __val * 2;

                        const unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*(__first + 1) = (char) __digits[(unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringEiEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>::operator() ((struct type *) &__op, (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function constexpr std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_use_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; pointer = char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str)) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) std::char_traits<char>::copy ((char *) &((struct basic_string *) this)->D.28283._M_local_buf, (const char_type *) &__str->D.28283._M_local_buf, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str) + 1) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __str->D.28283._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char>::_M_use_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringEjEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>::operator() ((struct type *) &__op, (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(unsigned int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.87139>;
    <D.87140>:;
    {
      const long unsigned int __num = (__val % 100) * 2;

            const long unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) __pos) = (char) __digits[(long unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(long unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.87139>:;
    if (__val > 99) goto <D.87140>; else goto <D.87138>;
    <D.87138>:;
    {
      if (__val > 9)
        {
          {
            const long unsigned int __num = __val * 2;

                        const long unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*(__first + 1) = (char) __digits[(long unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(long unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringElEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>::operator() ((struct type *) &__op, (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(long int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringEmEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>::operator() ((struct type *) &__op, (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(long unsigned int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.87244>;
    <D.87245>:;
    {
      const long long unsigned int __num = (__val % 100) * 2;

            const long long unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) __pos) = (char) __digits[(long long unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(long long unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.87244>:;
    if (__val > 99) goto <D.87245>; else goto <D.87243>;
    <D.87243>:;
    {
      if (__val > 9)
        {
          {
            const long long unsigned int __num = __val * 2;

                        const long long unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*(__first + 1) = (char) __digits[(long long unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(long long unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringExEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>::operator() ((struct type *) &__op, (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(long long int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation)::_Terminator::~_Terminator() [with _Operation = std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_set_length (NON_LVALUE_EXPR <((struct _Terminator *) this)->_M_this>, ((struct _Terminator *) this)->_M_r) >>>>>;
      }
    finally
      {
        *(struct _Terminator *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__resize_and_overwrite(size_type, _Operation) [with _Operation = std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE22__resize_and_overwriteIZNS_9to_stringEyEUlPcmE_EEvmT_)
;; enabled by -tree-original


{
  char * const __p;
  typedef extern struct _Terminator _Terminator;
  struct _Terminator __term = {._M_r=0};
  long unsigned int __r;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::reserve ((struct basic_string *) this, (size_type) __n) >>>>>;
    char * const __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this)) >>>>>;
  <<cleanup_point   struct _Terminator __term = {._M_r=0};>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __term._M_this = (struct basic_string *) this >>>>>;
  try
    {
            long unsigned int __r;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__r = std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>::operator() ((struct type *) &__op, (char *) __p, (long unsigned int) __n)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term._M_r = __r) >>>>>;
      if (__term._M_r > (long unsigned int) __n)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            __builtin_unreachable () >>>>>;
        }
    }
  finally
    {
      std::__cxx11::basic_string<char>::__resize_and_overwrite<std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)> >(size_type, std::__cxx11::to_string(long long unsigned int)::<lambda(char*, std::size_t)>)::_Terminator::~_Terminator (&__term);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, __va_list_tag*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<char>; _CharT = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  char * __s;
  struct  __args[1];
  const int __len;

    char * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__s = (char *) __builtin_alloca (NON_LVALUE_EXPR <__n>)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
    __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__len = __convf (__s, __n, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.87406, <<< Unknown tree: aggr_init_expr
    7
    __ct_comp 
    D.87406
    (struct basic_string *) <<< Unknown tree: void_cst >>>
    __s
    __s + (sizetype) __len
    (const struct allocator &) &TARGET_EXPR <D.87405, <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.87405
      (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.87469, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long int, long int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long int, long int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.87533, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, long int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long unsigned int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.87597, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long unsigned int, long unsigned int, wchar_t, int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long long int, long long int, wchar_t, int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long long int, long long int, wchar_t, int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.87661, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long int, long long int, wchar_t, int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.87725, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long unsigned int, long long unsigned int, wchar_t, int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  float __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<float, float, wchar_t>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<float, float, wchar_t>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((float) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.87788, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<float, float, wchar_t>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  double __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<double, double, wchar_t>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<double, double, wchar_t>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.87851, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<double, double, wchar_t>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::false_type = std::false_type] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::true_type = std::true_type] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long double __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long double __tmp;

    long double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
    __gnu_cxx::__stoa<long double, long double, wchar_t>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa<long double, long double, wchar_t>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((long double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.87914, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long double, long double, wchar_t>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<wchar_t>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<wchar_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<wchar_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<wchar_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER(eob)};
    }
}


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.88072, {.D.12640={}}>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = const char*; <template-parameter-2-2> = void; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct basic_string *) this)->_M_string_length = 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_construct<const char*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.87959, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator __sv_type() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; __sv_type = std::basic_string_view<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.88084, <<< Unknown tree: aggr_init_expr
    6
    __ct_comp 
    D.88084
    (struct basic_string_view *) <<< Unknown tree: void_cst >>>
    std::__cxx11::basic_string<char>::data ((const struct basic_string *) this)
    std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) >>>>;, D.88084>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<char>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      if (__s == 0B && __n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __s, __s + (sizetype) NON_LVALUE_EXPR <__n>, TARGET_EXPR <D.88095, {.D.12630={}}>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, size_type, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      if (__s == 0B && __n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4), TARGET_EXPR <D.88114, {.D.12630={}}>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char16_t>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char16_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<char16_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char16_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER(eob)};
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, size_type, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      if (__s == 0B && __n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 2), TARGET_EXPR <D.88169, {.D.12630={}}>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char32_t>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char32_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<char32_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char32_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER(eob)};
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, size_type, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      if (__s == 0B && __n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4), TARGET_EXPR <D.88227, {.D.12630={}}>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const _CharT*, __cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = char_traits<char>; _Alloc = allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.88387, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.88387
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, __lhs) >>>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const __cxx11::basic_string<_CharT, _Traits, _Allocator>&, __cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = char_traits<char>; _Alloc = allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.88415, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.88415
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, __lhs) >>>>>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = int; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::__hash_combine(const _Tp&, std::size_t) [with _Tp = const std::_V2::error_category*; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, __hash)>>;


;; Function _Tp std::__hypot3(_Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__x = std::abs (__x)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__y = std::abs (__y)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = std::abs (__z)) >>>>>;
  {
    float __a = __x < __y ? __y < __z ? __z : __y : __x < __z ? __z : __x;

        float __a = __x < __y ? __y < __z ? __z : __y : __x < __z ? __z : __x;
    if (__a != 0.0)
      {
        <<cleanup_point return <retval> = std::sqrt (((__x / __a) * (__x / __a) + (__y / __a) * (__y / __a)) + (__z / __a) * (__z / __a)) * __a>>;
      }
    else
      {
        return <retval> = 0.0;
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__hypot3(_Tp, _Tp, _Tp) [with _Tp = double] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__x = std::abs (__x)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__y = std::abs (__y)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = std::abs (__z)) >>>>>;
  {
    double __a = __x < __y ? __y < __z ? __z : __y : __x < __z ? __z : __x;

        double __a = __x < __y ? __y < __z ? __z : __y : __x < __z ? __z : __x;
    if (__a != 0.0)
      {
        <<cleanup_point return <retval> = sqrt (((__x / __a) * (__x / __a) + (__y / __a) * (__y / __a)) + (__z / __a) * (__z / __a)) * __a>>;
      }
    else
      {
        return <retval> = 0.0;
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__hypot3(_Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__x = std::abs (__x)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__y = std::abs (__y)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = std::abs (__z)) >>>>>;
  {
    long double __a = __x < __y ? __y < __z ? __z : __y : __x < __z ? __z : __x;

        long double __a = __x < __y ? __y < __z ? __z : __y : __x < __z ? __z : __x;
    if (__a != 0.0)
      {
        <<cleanup_point return <retval> = std::sqrt (((__x / __a) * (__x / __a) + (__y / __a) * (__y / __a)) + (__z / __a) * (__z / __a)) * __a>>;
      }
    else
      {
        return <retval> = 0.0;
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__assoc_laguerre(unsigned int, unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__poly_laguerre<unsigned int, float> (__n, __m, __x)>>;


;; Function _Tp std::__detail::__assoc_laguerre(unsigned int, unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__poly_laguerre<unsigned int, long double> (__n, __m, __x)>>;


;; Function _Tp std::__detail::__assoc_legendre_p(unsigned int, unsigned int, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__m > __l)
      {
        return <retval> = 0.0;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<float> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__m == 0)
                      {
                        <<cleanup_point return <retval> = std::__detail::__poly_legendre_p<float> (__l, __x)>>;
                      }
                    else
                      {
                        {
                          float __p_mm = 1.0e+0;
                          float __p_mp1m = ((float) (__m * 2 + 1) * __x) * __p_mm;
                          float __p_lm2m = __p_mm;
                          float __P_lm1m = __p_mp1m;
                          float __p_lm = 0.0;

                          <<cleanup_point                           float __p_mm = 1.0e+0;>>;
                          {
                            if (__m != 0)
                              {
                                {
                                  float __root;
                                  float __fact = 1.0e+0;

                                                                    float __root;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (__root = std::sqrt (1.0e+0 - __x) * std::sqrt (__x + 1.0e+0)) >>>>>;
                                  <<cleanup_point                                   float __fact = 1.0e+0;>>;
                                  {
                                    unsigned int __i = 1;

                                    <<cleanup_point                                     unsigned int __i = 1;>>;
                                    goto <D.88471>;
                                    <D.88470>:;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
                                      (void) (__p_mm = ((__phase * __fact) * __root) * __p_mm) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
                                      (void) (__fact = __fact + 2.0e+0) >>>>>;
                                    <<cleanup_point (void)  ++__i>>;
                                    <D.88471>:;
                                    if (__i <= __m) goto <D.88470>; else goto <D.88468>;
                                    <D.88468>:;
                                  }
                                }
                              }
                          }
                          if (__l == __m)
                            {
                              return <retval> = __p_mm;
                            }
                                                    float __p_mp1m = ((float) (__m * 2 + 1) * __x) * __p_mm;
                          if (__m + 1 == __l)
                            {
                              return <retval> = __p_mp1m;
                            }
                                                    float __p_lm2m = __p_mm;
                                                    float __P_lm1m = __p_mp1m;
                          <<cleanup_point                           float __p_lm = 0.0;>>;
                          {
                            unsigned int __j = __m + 2;

                                                        unsigned int __j = __m + 2;
                            goto <D.88475>;
                            <D.88474>:;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_lm = (((float) (__j * 2 + 4294967295) * __x) * __P_lm1m - (float) ((__j + __m) + 4294967295) * __p_lm2m) / (float) (__j - __m)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_lm2m = __P_lm1m) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__P_lm1m = __p_lm) >>>>>;
                            <<cleanup_point (void)  ++__j>>;
                            <D.88475>:;
                            if (__j <= __l) goto <D.88474>; else goto <D.88472>;
                            <D.88472>:;
                          }
                          return <retval> = __p_lm;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__assoc_legendre_p(unsigned int, unsigned int, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__m > __l)
      {
        return <retval> = 0.0;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<long double> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__m == 0)
                      {
                        <<cleanup_point return <retval> = std::__detail::__poly_legendre_p<long double> (__l, __x)>>;
                      }
                    else
                      {
                        {
                          long double __p_mm = 1.0e+0;
                          long double __p_mp1m = ((long double) (__m * 2 + 1) * __x) * __p_mm;
                          long double __p_lm2m = __p_mm;
                          long double __P_lm1m = __p_mp1m;
                          long double __p_lm = 0.0;

                          <<cleanup_point                           long double __p_mm = 1.0e+0;>>;
                          {
                            if (__m != 0)
                              {
                                {
                                  long double __root;
                                  long double __fact = 1.0e+0;

                                                                    long double __root;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (__root = std::sqrt (1.0e+0 - __x) * std::sqrt (__x + 1.0e+0)) >>>>>;
                                  <<cleanup_point                                   long double __fact = 1.0e+0;>>;
                                  {
                                    unsigned int __i = 1;

                                    <<cleanup_point                                     unsigned int __i = 1;>>;
                                    goto <D.88495>;
                                    <D.88494>:;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
                                      (void) (__p_mm = ((__phase * __fact) * __root) * __p_mm) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
                                      (void) (__fact = __fact + 2.0e+0) >>>>>;
                                    <<cleanup_point (void)  ++__i>>;
                                    <D.88495>:;
                                    if (__i <= __m) goto <D.88494>; else goto <D.88492>;
                                    <D.88492>:;
                                  }
                                }
                              }
                          }
                          if (__l == __m)
                            {
                              return <retval> = __p_mm;
                            }
                                                    long double __p_mp1m = ((long double) (__m * 2 + 1) * __x) * __p_mm;
                          if (__m + 1 == __l)
                            {
                              return <retval> = __p_mp1m;
                            }
                                                    long double __p_lm2m = __p_mm;
                                                    long double __P_lm1m = __p_mp1m;
                          <<cleanup_point                           long double __p_lm = 0.0;>>;
                          {
                            unsigned int __j = __m + 2;

                                                        unsigned int __j = __m + 2;
                            goto <D.88499>;
                            <D.88498>:;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_lm = (((long double) (__j * 2 + 4294967295) * __x) * __P_lm1m - (long double) ((__j + __m) + 4294967295) * __p_lm2m) / (long double) (__j - __m)) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_lm2m = __P_lm1m) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__P_lm1m = __p_lm) >>>>>;
                            <<cleanup_point (void)  ++__j>>;
                            <D.88499>:;
                            if (__j <= __l) goto <D.88498>; else goto <D.88496>;
                            <D.88496>:;
                          }
                          return <retval> = __p_lm;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__beta(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__isnan<float> (__x) || std::__detail::__isnan<float> (__y)>>)
  {
    <<cleanup_point return <retval> =  Nan>>;
  }
else
  {
    <<cleanup_point return <retval> = std::__detail::__beta_lgamma<float> (__x, __y)>>;
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__beta(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__isnan<long double> (__x) || std::__detail::__isnan<long double> (__y)>>)
  {
    <<cleanup_point return <retval> =  Nan>>;
  }
else
  {
    <<cleanup_point return <retval> = std::__detail::__beta_lgamma<long double> (__x, __y)>>;
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__comp_ellint_1(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__isnan<float> (__k)>>)
  {
    <<cleanup_point return <retval> =  Nan>>;
  }
else
  {
    if (<<cleanup_point std::abs (__k) >= 1.0e+0>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        <<cleanup_point return <retval> = std::__detail::__ellint_rf<float> (0.0, 1.0e+0 - __k * __k, 1.0e+0)>>;
      }
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__comp_ellint_1(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__isnan<long double> (__k)>>)
  {
    <<cleanup_point return <retval> =  Nan>>;
  }
else
  {
    if (<<cleanup_point std::abs (__k) >= 1.0e+0>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        <<cleanup_point return <retval> = std::__detail::__ellint_rf<long double> (0.0, 1.0e+0 - __k * __k, 1.0e+0)>>;
      }
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__comp_ellint_2(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<float> (__k)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::abs (__k) == 1.0e+0>>)
              {
                return <retval> = 1.0e+0;
              }
            else
              {
                {
                  {
                    if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
                          std::__throw_domain_error ((const char *) "Bad argument in __comp_ellint_2.") >>>>>;
                      }
                    else
                      {
                        {
                          const float __kk = __k * __k;

                                                    const float __kk = __k * __k;
                          <<cleanup_point return <retval> = std::__detail::__ellint_rf<float> (0.0, 1.0e+0 - (float) __kk, 1.0e+0) - (std::__detail::__ellint_rd<float> (0.0, 1.0e+0 - (float) __kk, 1.0e+0) * (float) __kk) / 3.0e+0>>;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__comp_ellint_2(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<long double> (__k)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::abs (__k) == 1.0e+0>>)
              {
                return <retval> = 1.0e+0;
              }
            else
              {
                {
                  {
                    if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
                          std::__throw_domain_error ((const char *) "Bad argument in __comp_ellint_2.") >>>>>;
                      }
                    else
                      {
                        {
                          const long double __kk = __k * __k;

                                                    const long double __kk = __k * __k;
                          <<cleanup_point return <retval> = std::__detail::__ellint_rf<long double> (0.0, 1.0e+0 - (long double) __kk, 1.0e+0) - (std::__detail::__ellint_rd<long double> (0.0, 1.0e+0 - (long double) __kk, 1.0e+0) * (long double) __kk) / 3.0e+0>>;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__comp_ellint_3(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<float> (__k) || std::__detail::__isnan<float> (__nu)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (__nu == 1.0e+0)
              {
                <<cleanup_point return <retval> =  Inf>>;
              }
            else
              {
                {
                  {
                    if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
                          std::__throw_domain_error ((const char *) "Bad argument in __comp_ellint_3.") >>>>>;
                      }
                    else
                      {
                        {
                          const float __kk = __k * __k;

                                                    const float __kk = __k * __k;
                          <<cleanup_point return <retval> = std::__detail::__ellint_rf<float> (0.0, 1.0e+0 - (float) __kk, 1.0e+0) + (std::__detail::__ellint_rj<float> (0.0, 1.0e+0 - (float) __kk, 1.0e+0, 1.0e+0 - __nu) * __nu) / 3.0e+0>>;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__comp_ellint_3(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<long double> (__k) || std::__detail::__isnan<long double> (__nu)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (__nu == 1.0e+0)
              {
                <<cleanup_point return <retval> =  Inf>>;
              }
            else
              {
                {
                  {
                    if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
                          std::__throw_domain_error ((const char *) "Bad argument in __comp_ellint_3.") >>>>>;
                      }
                    else
                      {
                        {
                          const long double __kk = __k * __k;

                                                    const long double __kk = __k * __k;
                          <<cleanup_point return <retval> = std::__detail::__ellint_rf<long double> (0.0, 1.0e+0 - (long double) __kk, 1.0e+0) + (std::__detail::__ellint_rj<long double> (0.0, 1.0e+0 - (long double) __kk, 1.0e+0, 1.0e+0 - __nu) * __nu) / 3.0e+0>>;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_bessel_i(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__nu < 0.0 || __x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __cyl_bessel_i.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<float> (__nu) || std::__detail::__isnan<float> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x * __x < (__nu + 1.0e+0) * 1.0e+1)
                      {
                        <<cleanup_point return <retval> = std::__detail::__cyl_bessel_ij_series<float> (__nu, __x, 1.0e+0, 200)>>;
                      }
                    else
                      {
                        {
                          float __I_nu;
                          float __K_nu;
                          float __Ip_nu;
                          float __Kp_nu;

                                                    float __I_nu;
                                                    float __K_nu;
                                                    float __Ip_nu;
                                                    float __Kp_nu;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__bessel_ik<float> (__nu, __x, (float &) &__I_nu, (float &) &__K_nu, (float &) &__Ip_nu, (float &) &__Kp_nu) >>>>>;
                          return <retval> = __I_nu;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_bessel_i(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__nu < 0.0 || __x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __cyl_bessel_i.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<long double> (__nu) || std::__detail::__isnan<long double> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x * __x < (__nu + 1.0e+0) * 1.0e+1)
                      {
                        <<cleanup_point return <retval> = std::__detail::__cyl_bessel_ij_series<long double> (__nu, __x, 1.0e+0, 200)>>;
                      }
                    else
                      {
                        {
                          long double __I_nu;
                          long double __K_nu;
                          long double __Ip_nu;
                          long double __Kp_nu;

                                                    long double __I_nu;
                                                    long double __K_nu;
                                                    long double __Ip_nu;
                                                    long double __Kp_nu;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__bessel_ik<long double> (__nu, __x, (long double &) &__I_nu, (long double &) &__K_nu, (long double &) &__Ip_nu, (long double &) &__Kp_nu) >>>>>;
                          return <retval> = __I_nu;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_bessel_j(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__nu < 0.0 || __x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __cyl_bessel_j.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<float> (__nu) || std::__detail::__isnan<float> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x * __x < (__nu + 1.0e+0) * 1.0e+1)
                      {
                        <<cleanup_point return <retval> = std::__detail::__cyl_bessel_ij_series<float> (__nu, __x, -1.0e+0, 200)>>;
                      }
                    else
                      {
                        {
                          {
                            if (__x > 1.0e+3)
                              {
                                {
                                  float __J_nu;
                                  float __N_nu;

                                                                    float __J_nu;
                                                                    float __N_nu;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    std::__detail::__cyl_bessel_jn_asymp<float> (__nu, __x, (float &) &__J_nu, (float &) &__N_nu) >>>>>;
                                  return <retval> = __J_nu;
                                }
                              }
                            else
                              {
                                {
                                  float __J_nu;
                                  float __N_nu;
                                  float __Jp_nu;
                                  float __Np_nu;

                                                                    float __J_nu;
                                                                    float __N_nu;
                                                                    float __Jp_nu;
                                                                    float __Np_nu;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    std::__detail::__bessel_jn<float> (__nu, __x, (float &) &__J_nu, (float &) &__N_nu, (float &) &__Jp_nu, (float &) &__Np_nu) >>>>>;
                                  return <retval> = __J_nu;
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_bessel_j(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__nu < 0.0 || __x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __cyl_bessel_j.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<long double> (__nu) || std::__detail::__isnan<long double> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x * __x < (__nu + 1.0e+0) * 1.0e+1)
                      {
                        <<cleanup_point return <retval> = std::__detail::__cyl_bessel_ij_series<long double> (__nu, __x, -1.0e+0, 200)>>;
                      }
                    else
                      {
                        {
                          {
                            if (__x > 1.0e+3)
                              {
                                {
                                  long double __J_nu;
                                  long double __N_nu;

                                                                    long double __J_nu;
                                                                    long double __N_nu;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    std::__detail::__cyl_bessel_jn_asymp<long double> (__nu, __x, (long double &) &__J_nu, (long double &) &__N_nu) >>>>>;
                                  return <retval> = __J_nu;
                                }
                              }
                            else
                              {
                                {
                                  long double __J_nu;
                                  long double __N_nu;
                                  long double __Jp_nu;
                                  long double __Np_nu;

                                                                    long double __J_nu;
                                                                    long double __N_nu;
                                                                    long double __Jp_nu;
                                                                    long double __Np_nu;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    std::__detail::__bessel_jn<long double> (__nu, __x, (long double &) &__J_nu, (long double &) &__N_nu, (long double &) &__Jp_nu, (long double &) &__Np_nu) >>>>>;
                                  return <retval> = __J_nu;
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_bessel_k(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__nu < 0.0 || __x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __cyl_bessel_k.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<float> (__nu) || std::__detail::__isnan<float> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  float __I_nu;
                  float __K_nu;
                  float __Ip_nu;
                  float __Kp_nu;

                                    float __I_nu;
                                    float __K_nu;
                                    float __Ip_nu;
                                    float __Kp_nu;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    std::__detail::__bessel_ik<float> (__nu, __x, (float &) &__I_nu, (float &) &__K_nu, (float &) &__Ip_nu, (float &) &__Kp_nu) >>>>>;
                  return <retval> = __K_nu;
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_bessel_k(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__nu < 0.0 || __x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __cyl_bessel_k.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<long double> (__nu) || std::__detail::__isnan<long double> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  long double __I_nu;
                  long double __K_nu;
                  long double __Ip_nu;
                  long double __Kp_nu;

                                    long double __I_nu;
                                    long double __K_nu;
                                    long double __Ip_nu;
                                    long double __Kp_nu;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    std::__detail::__bessel_ik<long double> (__nu, __x, (long double &) &__I_nu, (long double &) &__K_nu, (long double &) &__Ip_nu, (long double &) &__Kp_nu) >>>>>;
                  return <retval> = __K_nu;
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_neumann_n(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__nu < 0.0 || __x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __cyl_neumann_n.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<float> (__nu) || std::__detail::__isnan<float> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x > 1.0e+3)
                      {
                        {
                          float __J_nu;
                          float __N_nu;

                                                    float __J_nu;
                                                    float __N_nu;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__cyl_bessel_jn_asymp<float> (__nu, __x, (float &) &__J_nu, (float &) &__N_nu) >>>>>;
                          return <retval> = __N_nu;
                        }
                      }
                    else
                      {
                        {
                          float __J_nu;
                          float __N_nu;
                          float __Jp_nu;
                          float __Np_nu;

                                                    float __J_nu;
                                                    float __N_nu;
                                                    float __Jp_nu;
                                                    float __Np_nu;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__bessel_jn<float> (__nu, __x, (float &) &__J_nu, (float &) &__N_nu, (float &) &__Jp_nu, (float &) &__Np_nu) >>>>>;
                          return <retval> = __N_nu;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_neumann_n(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__nu < 0.0 || __x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __cyl_neumann_n.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<long double> (__nu) || std::__detail::__isnan<long double> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x > 1.0e+3)
                      {
                        {
                          long double __J_nu;
                          long double __N_nu;

                                                    long double __J_nu;
                                                    long double __N_nu;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__cyl_bessel_jn_asymp<long double> (__nu, __x, (long double &) &__J_nu, (long double &) &__N_nu) >>>>>;
                          return <retval> = __N_nu;
                        }
                      }
                    else
                      {
                        {
                          long double __J_nu;
                          long double __N_nu;
                          long double __Jp_nu;
                          long double __Np_nu;

                                                    long double __J_nu;
                                                    long double __N_nu;
                                                    long double __Jp_nu;
                                                    long double __Np_nu;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__bessel_jn<long double> (__nu, __x, (long double &) &__J_nu, (long double &) &__N_nu, (long double &) &__Jp_nu, (long double &) &__Np_nu) >>>>>;
                          return <retval> = __N_nu;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_1(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<float> (__k) || std::__detail::__isnan<float> (__phi)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Bad argument in __ellint_1.") >>>>>;
              }
            else
              {
                {
                  const int __n;
                  const float __phi_red;
                  const float __s;
                  const float __c;
                  const float __F;

                                    const int __n;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__n = (int) std::floor (__phi / std::__detail::__numeric_constants<float>::__pi () + 5.0e-1)) >>>>>;
                                    const float __phi_red;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__phi_red = __phi - (float) __n * std::__detail::__numeric_constants<float>::__pi ()) >>>>>;
                                    const float __s;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__s = std::sin ((float) __phi_red)) >>>>>;
                                    const float __c;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__c = std::cos ((float) __phi_red)) >>>>>;
                                    const float __F;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__F = std::__detail::__ellint_rf<float> ((float) __c * (float) __c, 1.0e+0 - ((__k * __k) * (float) __s) * (float) __s, 1.0e+0) * (float) __s) >>>>>;
                  if (__n == 0)
                    {
                      return <retval> = (float) __F;
                    }
                  else
                    {
                      <<cleanup_point return <retval> = ((float) __n * 2.0e+0) * std::__detail::__comp_ellint_1<float> (__k) + (float) __F>>;
                    }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_1(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<long double> (__k) || std::__detail::__isnan<long double> (__phi)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Bad argument in __ellint_1.") >>>>>;
              }
            else
              {
                {
                  const int __n;
                  const long double __phi_red;
                  const long double __s;
                  const long double __c;
                  const long double __F;

                                    const int __n;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__n = (int) std::floor (__phi / std::__detail::__numeric_constants<long double>::__pi () + 5.0e-1)) >>>>>;
                                    const long double __phi_red;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__phi_red = __phi - (long double) __n * std::__detail::__numeric_constants<long double>::__pi ()) >>>>>;
                                    const long double __s;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__s = std::sin ((long double) __phi_red)) >>>>>;
                                    const long double __c;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__c = std::cos ((long double) __phi_red)) >>>>>;
                                    const long double __F;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__F = std::__detail::__ellint_rf<long double> ((long double) __c * (long double) __c, 1.0e+0 - ((__k * __k) * (long double) __s) * (long double) __s, 1.0e+0) * (long double) __s) >>>>>;
                  if (__n == 0)
                    {
                      return <retval> = (long double) __F;
                    }
                  else
                    {
                      <<cleanup_point return <retval> = ((long double) __n * 2.0e+0) * std::__detail::__comp_ellint_1<long double> (__k) + (long double) __F>>;
                    }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_2(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<float> (__k) || std::__detail::__isnan<float> (__phi)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Bad argument in __ellint_2.") >>>>>;
              }
            else
              {
                {
                  const int __n;
                  const float __phi_red;
                  const float __kk = __k * __k;
                  const float __s;
                  const float __ss = (float) __s * (float) __s;
                  const float __sss = (float) __ss * (float) __s;
                  const float __c;
                  const float __cc = (float) __c * (float) __c;
                  const float __E;

                                    const int __n;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__n = (int) std::floor (__phi / std::__detail::__numeric_constants<float>::__pi () + 5.0e-1)) >>>>>;
                                    const float __phi_red;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__phi_red = __phi - (float) __n * std::__detail::__numeric_constants<float>::__pi ()) >>>>>;
                                    const float __kk = __k * __k;
                                    const float __s;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__s = std::sin ((float) __phi_red)) >>>>>;
                                    const float __ss = (float) __s * (float) __s;
                                    const float __sss = (float) __ss * (float) __s;
                                    const float __c;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__c = std::cos ((float) __phi_red)) >>>>>;
                                    const float __cc = (float) __c * (float) __c;
                                    const float __E;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__E = std::__detail::__ellint_rf<float> ((float) __cc, 1.0e+0 - (float) __kk * (float) __ss, 1.0e+0) * (float) __s - (((float) __kk * (float) __sss) * std::__detail::__ellint_rd<float> ((float) __cc, 1.0e+0 - (float) __kk * (float) __ss, 1.0e+0)) / 3.0e+0) >>>>>;
                  if (__n == 0)
                    {
                      return <retval> = (float) __E;
                    }
                  else
                    {
                      <<cleanup_point return <retval> = ((float) __n * 2.0e+0) * std::__detail::__comp_ellint_2<float> (__k) + (float) __E>>;
                    }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_2(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<long double> (__k) || std::__detail::__isnan<long double> (__phi)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Bad argument in __ellint_2.") >>>>>;
              }
            else
              {
                {
                  const int __n;
                  const long double __phi_red;
                  const long double __kk = __k * __k;
                  const long double __s;
                  const long double __ss = (long double) __s * (long double) __s;
                  const long double __sss = (long double) __ss * (long double) __s;
                  const long double __c;
                  const long double __cc = (long double) __c * (long double) __c;
                  const long double __E;

                                    const int __n;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__n = (int) std::floor (__phi / std::__detail::__numeric_constants<long double>::__pi () + 5.0e-1)) >>>>>;
                                    const long double __phi_red;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__phi_red = __phi - (long double) __n * std::__detail::__numeric_constants<long double>::__pi ()) >>>>>;
                                    const long double __kk = __k * __k;
                                    const long double __s;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__s = std::sin ((long double) __phi_red)) >>>>>;
                                    const long double __ss = (long double) __s * (long double) __s;
                                    const long double __sss = (long double) __ss * (long double) __s;
                                    const long double __c;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__c = std::cos ((long double) __phi_red)) >>>>>;
                                    const long double __cc = (long double) __c * (long double) __c;
                                    const long double __E;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__E = std::__detail::__ellint_rf<long double> ((long double) __cc, 1.0e+0 - (long double) __kk * (long double) __ss, 1.0e+0) * (long double) __s - (((long double) __kk * (long double) __sss) * std::__detail::__ellint_rd<long double> ((long double) __cc, 1.0e+0 - (long double) __kk * (long double) __ss, 1.0e+0)) / 3.0e+0) >>>>>;
                  if (__n == 0)
                    {
                      return <retval> = (long double) __E;
                    }
                  else
                    {
                      <<cleanup_point return <retval> = ((long double) __n * 2.0e+0) * std::__detail::__comp_ellint_2<long double> (__k) + (long double) __E>>;
                    }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_3(_Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point (std::__detail::__isnan<float> (__k) || std::__detail::__isnan<float> (__nu)) || std::__detail::__isnan<float> (__phi)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Bad argument in __ellint_3.") >>>>>;
              }
            else
              {
                {
                  const int __n;
                  const float __phi_red;
                  const float __kk = __k * __k;
                  const float __s;
                  const float __ss = (float) __s * (float) __s;
                  const float __sss = (float) __ss * (float) __s;
                  const float __c;
                  const float __cc = (float) __c * (float) __c;
                  const float __Pi;

                                    const int __n;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__n = (int) std::floor (__phi / std::__detail::__numeric_constants<float>::__pi () + 5.0e-1)) >>>>>;
                                    const float __phi_red;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__phi_red = __phi - (float) __n * std::__detail::__numeric_constants<float>::__pi ()) >>>>>;
                                    const float __kk = __k * __k;
                                    const float __s;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__s = std::sin ((float) __phi_red)) >>>>>;
                                    const float __ss = (float) __s * (float) __s;
                                    const float __sss = (float) __ss * (float) __s;
                                    const float __c;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__c = std::cos ((float) __phi_red)) >>>>>;
                                    const float __cc = (float) __c * (float) __c;
                                    const float __Pi;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__Pi = std::__detail::__ellint_rf<float> ((float) __cc, 1.0e+0 - (float) __kk * (float) __ss, 1.0e+0) * (float) __s + ((__nu * (float) __sss) * std::__detail::__ellint_rj<float> ((float) __cc, 1.0e+0 - (float) __kk * (float) __ss, 1.0e+0, 1.0e+0 - __nu * (float) __ss)) / 3.0e+0) >>>>>;
                  if (__n == 0)
                    {
                      return <retval> = (float) __Pi;
                    }
                  else
                    {
                      <<cleanup_point return <retval> = ((float) __n * 2.0e+0) * std::__detail::__comp_ellint_3<float> (__k, __nu) + (float) __Pi>>;
                    }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_3(_Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point (std::__detail::__isnan<long double> (__k) || std::__detail::__isnan<long double> (__nu)) || std::__detail::__isnan<long double> (__phi)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::abs (__k) > 1.0e+0>>)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Bad argument in __ellint_3.") >>>>>;
              }
            else
              {
                {
                  const int __n;
                  const long double __phi_red;
                  const long double __kk = __k * __k;
                  const long double __s;
                  const long double __ss = (long double) __s * (long double) __s;
                  const long double __sss = (long double) __ss * (long double) __s;
                  const long double __c;
                  const long double __cc = (long double) __c * (long double) __c;
                  const long double __Pi;

                                    const int __n;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__n = (int) std::floor (__phi / std::__detail::__numeric_constants<long double>::__pi () + 5.0e-1)) >>>>>;
                                    const long double __phi_red;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__phi_red = __phi - (long double) __n * std::__detail::__numeric_constants<long double>::__pi ()) >>>>>;
                                    const long double __kk = __k * __k;
                                    const long double __s;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__s = std::sin ((long double) __phi_red)) >>>>>;
                                    const long double __ss = (long double) __s * (long double) __s;
                                    const long double __sss = (long double) __ss * (long double) __s;
                                    const long double __c;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__c = std::cos ((long double) __phi_red)) >>>>>;
                                    const long double __cc = (long double) __c * (long double) __c;
                                    const long double __Pi;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__Pi = std::__detail::__ellint_rf<long double> ((long double) __cc, 1.0e+0 - (long double) __kk * (long double) __ss, 1.0e+0) * (long double) __s + ((__nu * (long double) __sss) * std::__detail::__ellint_rj<long double> ((long double) __cc, 1.0e+0 - (long double) __kk * (long double) __ss, 1.0e+0, 1.0e+0 - __nu * (long double) __ss)) / 3.0e+0) >>>>>;
                  if (__n == 0)
                    {
                      return <retval> = (long double) __Pi;
                    }
                  else
                    {
                      <<cleanup_point return <retval> = ((long double) __n * 2.0e+0) * std::__detail::__comp_ellint_3<long double> (__k, __nu) + (long double) __Pi>>;
                    }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__expint(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__isnan<float> (__x)>>)
  {
    <<cleanup_point return <retval> =  Nan>>;
  }
else
  {
    <<cleanup_point return <retval> = std::__detail::__expint_Ei<float> (__x)>>;
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__expint(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__isnan<long double> (__x)>>)
  {
    <<cleanup_point return <retval> =  Nan>>;
  }
else
  {
    <<cleanup_point return <retval> = std::__detail::__expint_Ei<long double> (__x)>>;
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__poly_hermite(unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__isnan<float> (__x)>>)
  {
    <<cleanup_point return <retval> =  Nan>>;
  }
else
  {
    <<cleanup_point return <retval> = std::__detail::__poly_hermite_recursion<float> (__n, __x)>>;
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__poly_hermite(unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__isnan<long double> (__x)>>)
  {
    <<cleanup_point return <retval> =  Nan>>;
  }
else
  {
    <<cleanup_point return <retval> = std::__detail::__poly_hermite_recursion<long double> (__n, __x)>>;
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__laguerre(unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__poly_laguerre<unsigned int, float> (__n, 0, __x)>>;


;; Function _Tp std::__detail::__laguerre(unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__poly_laguerre<unsigned int, long double> (__n, 0, __x)>>;


;; Function _Tp std::__detail::__poly_legendre_p(unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<float> (__x)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (__x == 1.0e+0)
              {
                return <retval> = 1.0e+0;
              }
            else
              {
                {
                  {
                    if (__x == -1.0e+0)
                      {
                        return <retval> = (__l & 1) != 0 ? -1.0e+0 : 1.0e+0;
                      }
                    else
                      {
                        {
                          float __p_lm2 = 1.0e+0;
                          float __p_lm1 = __x;
                          float __p_l = 0.0;

                          <<cleanup_point                           float __p_lm2 = 1.0e+0;>>;
                          if (__l == 0)
                            {
                              return <retval> = __p_lm2;
                            }
                                                    float __p_lm1 = __x;
                          if (__l == 1)
                            {
                              return <retval> = __p_lm1;
                            }
                          <<cleanup_point                           float __p_l = 0.0;>>;
                          {
                            unsigned int __ll = 2;

                            <<cleanup_point                             unsigned int __ll = 2;>>;
                            goto <D.88804>;
                            <D.88803>:;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_l = ((__x * 2.0e+0) * __p_lm1 - __p_lm2) - (__x * __p_lm1 - __p_lm2) / (float) __ll) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_lm2 = __p_lm1) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_lm1 = __p_l) >>>>>;
                            <<cleanup_point (void)  ++__ll>>;
                            <D.88804>:;
                            if (__ll <= __l) goto <D.88803>; else goto <D.88801>;
                            <D.88801>:;
                          }
                          return <retval> = __p_l;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__poly_legendre_p(unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<long double> (__x)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (__x == 1.0e+0)
              {
                return <retval> = 1.0e+0;
              }
            else
              {
                {
                  {
                    if (__x == -1.0e+0)
                      {
                        return <retval> = (__l & 1) != 0 ? -1.0e+0 : 1.0e+0;
                      }
                    else
                      {
                        {
                          long double __p_lm2 = 1.0e+0;
                          long double __p_lm1 = __x;
                          long double __p_l = 0.0;

                          <<cleanup_point                           long double __p_lm2 = 1.0e+0;>>;
                          if (__l == 0)
                            {
                              return <retval> = __p_lm2;
                            }
                                                    long double __p_lm1 = __x;
                          if (__l == 1)
                            {
                              return <retval> = __p_lm1;
                            }
                          <<cleanup_point                           long double __p_l = 0.0;>>;
                          {
                            unsigned int __ll = 2;

                            <<cleanup_point                             unsigned int __ll = 2;>>;
                            goto <D.88815>;
                            <D.88814>:;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_l = ((__x * 2.0e+0) * __p_lm1 - __p_lm2) - (__x * __p_lm1 - __p_lm2) / (long double) __ll) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_lm2 = __p_lm1) >>>>>;
                            <<cleanup_point <<< Unknown tree: expr_stmt
                              (void) (__p_lm1 = __p_l) >>>>>;
                            <<cleanup_point (void)  ++__ll>>;
                            <D.88815>:;
                            if (__ll <= __l) goto <D.88814>; else goto <D.88812>;
                            <D.88812>:;
                          }
                          return <retval> = __p_l;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__riemann_zeta(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<float> (__s)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (__s == 1.0e+0)
              {
                <<cleanup_point return <retval> =  Inf>>;
              }
            else
              {
                {
                  {
                    if (__s < -1.9e+1)
                      {
                        {
                          float __zeta;

                                                    float __zeta;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__zeta = std::__detail::__riemann_zeta_product<float> (1.0e+0 - __s)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__zeta = TARGET_EXPR <D.88821, ((std::pow (std::__detail::__numeric_constants<float>::__pi () * 2.0e+0, __s) * std::sin (std::__detail::__numeric_constants<float>::__pi_2 () * __s)) * std::exp (std::lgamma (1.0e+0 - __s))) / std::__detail::__numeric_constants<float>::__pi ()>;, __zeta * D.88821;) >>>>>;
                          return <retval> = __zeta;
                        }
                      }
                    else
                      {
                        {
                          {
                            if (__s < 2.0e+1)
                              {
                                {
                                  bool __glob = 1;

                                  <<cleanup_point                                   bool __glob = 1;>>;
                                  {
                                    if (__glob)
                                      {
                                        <<cleanup_point return <retval> = std::__detail::__riemann_zeta_glob<float> (__s)>>;
                                      }
                                    else
                                      {
                                        {
                                          {
                                            if (__s > 1.0e+0)
                                              {
                                                <<cleanup_point return <retval> = std::__detail::__riemann_zeta_sum<float> (__s)>>;
                                              }
                                            else
                                              {
                                                {
                                                  float __zeta;

                                                                                                    float __zeta;
                                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                                    (void) (__zeta = ((std::pow (std::__detail::__numeric_constants<float>::__pi () * 2.0e+0, __s) * std::sin (std::__detail::__numeric_constants<float>::__pi_2 () * __s)) * std::tgamma (1.0e+0 - __s)) * std::__detail::__riemann_zeta_sum<float> (1.0e+0 - __s)) >>>>>;
                                                  return <retval> = __zeta;
                                                }
                                              }
                                          }
                                        }
                                      }
                                  }
                                }
                              }
                            else
                              {
                                <<cleanup_point return <retval> = std::__detail::__riemann_zeta_product<float> (__s)>>;
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__riemann_zeta(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point std::__detail::__isnan<long double> (__s)>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (__s == 1.0e+0)
              {
                <<cleanup_point return <retval> =  Inf>>;
              }
            else
              {
                {
                  {
                    if (__s < -1.9e+1)
                      {
                        {
                          long double __zeta;

                                                    long double __zeta;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__zeta = std::__detail::__riemann_zeta_product<long double> (1.0e+0 - __s)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__zeta = TARGET_EXPR <D.88833, ((std::pow (std::__detail::__numeric_constants<long double>::__pi () * 2.0e+0, __s) * std::sin (std::__detail::__numeric_constants<long double>::__pi_2 () * __s)) * std::exp (std::lgamma (1.0e+0 - __s))) / std::__detail::__numeric_constants<long double>::__pi ()>;, __zeta * D.88833;) >>>>>;
                          return <retval> = __zeta;
                        }
                      }
                    else
                      {
                        {
                          {
                            if (__s < 2.0e+1)
                              {
                                {
                                  bool __glob = 1;

                                  <<cleanup_point                                   bool __glob = 1;>>;
                                  {
                                    if (__glob)
                                      {
                                        <<cleanup_point return <retval> = std::__detail::__riemann_zeta_glob<long double> (__s)>>;
                                      }
                                    else
                                      {
                                        {
                                          {
                                            if (__s > 1.0e+0)
                                              {
                                                <<cleanup_point return <retval> = std::__detail::__riemann_zeta_sum<long double> (__s)>>;
                                              }
                                            else
                                              {
                                                {
                                                  long double __zeta;

                                                                                                    long double __zeta;
                                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                                    (void) (__zeta = ((std::pow (std::__detail::__numeric_constants<long double>::__pi () * 2.0e+0, __s) * std::sin (std::__detail::__numeric_constants<long double>::__pi_2 () * __s)) * std::tgamma (1.0e+0 - __s)) * std::__detail::__riemann_zeta_sum<long double> (1.0e+0 - __s)) >>>>>;
                                                  return <retval> = __zeta;
                                                }
                                              }
                                          }
                                        }
                                      }
                                  }
                                }
                              }
                            else
                              {
                                <<cleanup_point return <retval> = std::__detail::__riemann_zeta_product<long double> (__s)>>;
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__sph_bessel(unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __sph_bessel.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<float> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x == 0.0)
                      {
                        if (__n == 0)
                          {
                            return <retval> = 1.0e+0;
                          }
                        else
                          {
                            return <retval> = 0.0;
                          }
                      }
                    else
                      {
                        {
                          float __j_n;
                          float __n_n;
                          float __jp_n;
                          float __np_n;

                                                    float __j_n;
                                                    float __n_n;
                                                    float __jp_n;
                                                    float __np_n;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__sph_bessel_jn<float> (__n, __x, (float &) &__j_n, (float &) &__n_n, (float &) &__jp_n, (float &) &__np_n) >>>>>;
                          return <retval> = __j_n;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__sph_bessel(unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __sph_bessel.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<long double> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x == 0.0)
                      {
                        if (__n == 0)
                          {
                            return <retval> = 1.0e+0;
                          }
                        else
                          {
                            return <retval> = 0.0;
                          }
                      }
                    else
                      {
                        {
                          long double __j_n;
                          long double __n_n;
                          long double __jp_n;
                          long double __np_n;

                                                    long double __j_n;
                                                    long double __n_n;
                                                    long double __jp_n;
                                                    long double __np_n;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__sph_bessel_jn<long double> (__n, __x, (long double &) &__j_n, (long double &) &__n_n, (long double &) &__jp_n, (long double &) &__np_n) >>>>>;
                          return <retval> = __j_n;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__sph_legendre(unsigned int, unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __x;

  if (<<cleanup_point std::__detail::__isnan<float> (__theta)>>)
    {
      <<cleanup_point return <retval> =  Nan>>;
    }
    const float __x;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__x = std::cos (__theta)) >>>>>;
  {
    if (__m > __l)
      {
        return <retval> = 0.0;
      }
    else
      {
        {
          {
            if (__m == 0)
              {
                {
                  float __P;
                  float __fact;

                                    float __P;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__P = std::__detail::__poly_legendre_p<float> (__l, (float) __x)) >>>>>;
                                    float __fact;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__fact = std::sqrt ((float) (__l * 2 + 1) / (std::__detail::__numeric_constants<float>::__pi () * 4.0e+0))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__P = __P * __fact) >>>>>;
                  return <retval> = __P;
                }
              }
            else
              {
                {
                  {
                    if ((float) __x == 1.0e+0 || (float) __x == -1.0e+0)
                      {
                        return <retval> = 0.0;
                      }
                    else
                      {
                        {
                          const float __sgn = (__m & 1) != 0 ? -1.0e+0 : 1.0e+0;
                          const float __y_mp1m_factor;
                          const float __lncirc;
                          const float __lnpoch;
                          const float __lnpre_val;
                          const float __sr;
                          float __y_mm;
                          float __y_mp1m = (float) __y_mp1m_factor * __y_mm;

                                                    const float __sgn = (__m & 1) != 0 ? -1.0e+0 : 1.0e+0;
                                                    const float __y_mp1m_factor;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__y_mp1m_factor = std::sqrt ((float) (__m * 2 + 3)) * (float) __x) >>>>>;
                                                    const float __lncirc;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__lncirc = std::log1p (-NON_LVALUE_EXPR <__x> * (float) __x)) >>>>>;
                                                    const float __lnpoch;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__lnpoch = std::lgamma ((float) __m + 5.0e-1) - std::lgamma ((float) __m)) >>>>>;
                                                    const float __lnpre_val;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__lnpre_val = std::__detail::__numeric_constants<float>::__lnpi () * -2.5e-1 + ((float) __m * (float) __lncirc + (float) __lnpoch) * 5.0e-1) >>>>>;
                                                    const float __sr;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__sr = std::sqrt ((1.0e+0 / (float) __m + 2.0e+0) / (std::__detail::__numeric_constants<float>::__pi () * 4.0e+0))) >>>>>;
                                                    float __y_mm;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__y_mm = ((float) __sgn * (float) __sr) * std::exp ((float) __lnpre_val)) >>>>>;
                                                    float __y_mp1m = (float) __y_mp1m_factor * __y_mm;
                          {
                            if (__l == __m)
                              {
                                return <retval> = __y_mm;
                              }
                            else
                              {
                                {
                                  {
                                    if (__m + 1 == __l)
                                      {
                                        return <retval> = __y_mp1m;
                                      }
                                    else
                                      {
                                        {
                                          float __y_lm = 0.0;

                                          <<cleanup_point                                           float __y_lm = 0.0;>>;
                                          {
                                            unsigned int __ll = __m + 2;

                                                                                        unsigned int __ll = __m + 2;
                                            goto <D.88892>;
                                            <D.88891>:;
                                            {
                                              const float __rat1 = (float) (__ll - __m) / (float) (__ll + __m);
                                              const float __rat2 = (float) ((__ll - __m) + 4294967295) / (float) ((__ll + __m) + 4294967295);
                                              const float __fact1;
                                              const float __fact2;

                                                                                            const float __rat1 = (float) (__ll - __m) / (float) (__ll + __m);
                                                                                            const float __rat2 = (float) ((__ll - __m) + 4294967295) / (float) ((__ll + __m) + 4294967295);
                                                                                            const float __fact1;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__fact1 = std::sqrt (((float) (__ll * 2 + 1) * (float) __rat1) * (float) (__ll * 2 + 4294967295))) >>>>>;
                                                                                            const float __fact2;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__fact2 = std::sqrt ((((float) __rat1 * (float) __rat2) * (float) (__ll * 2 + 1)) / (float) (__ll * 2 + 4294967293))) >>>>>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__y_lm = (((float) __x * __y_mp1m) * (float) __fact1 - ((float) ((__ll + __m) + 4294967295) * __y_mm) * (float) __fact2) / (float) (__ll - __m)) >>>>>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__y_mm = __y_mp1m) >>>>>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__y_mp1m = __y_lm) >>>>>;
                                            }
                                            <<cleanup_point (void)  ++__ll>>;
                                            <D.88892>:;
                                            if (__ll <= __l) goto <D.88891>; else goto <D.88889>;
                                            <D.88889>:;
                                          }
                                          return <retval> = __y_lm;
                                        }
                                      }
                                  }
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__sph_legendre(unsigned int, unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __x;

  if (<<cleanup_point std::__detail::__isnan<long double> (__theta)>>)
    {
      <<cleanup_point return <retval> =  Nan>>;
    }
    const long double __x;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__x = std::cos (__theta)) >>>>>;
  {
    if (__m > __l)
      {
        return <retval> = 0.0;
      }
    else
      {
        {
          {
            if (__m == 0)
              {
                {
                  long double __P;
                  long double __fact;

                                    long double __P;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__P = std::__detail::__poly_legendre_p<long double> (__l, (long double) __x)) >>>>>;
                                    long double __fact;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__fact = std::sqrt ((long double) (__l * 2 + 1) / (std::__detail::__numeric_constants<long double>::__pi () * 4.0e+0))) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__P = __P * __fact) >>>>>;
                  return <retval> = __P;
                }
              }
            else
              {
                {
                  {
                    if ((long double) __x == 1.0e+0 || (long double) __x == -1.0e+0)
                      {
                        return <retval> = 0.0;
                      }
                    else
                      {
                        {
                          const long double __sgn = (__m & 1) != 0 ? -1.0e+0 : 1.0e+0;
                          const long double __y_mp1m_factor;
                          const long double __lncirc;
                          const long double __lnpoch;
                          const long double __lnpre_val;
                          const long double __sr;
                          long double __y_mm;
                          long double __y_mp1m = (long double) __y_mp1m_factor * __y_mm;

                                                    const long double __sgn = (__m & 1) != 0 ? -1.0e+0 : 1.0e+0;
                                                    const long double __y_mp1m_factor;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__y_mp1m_factor = std::sqrt ((long double) (__m * 2 + 3)) * (long double) __x) >>>>>;
                                                    const long double __lncirc;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__lncirc = std::log1p (-NON_LVALUE_EXPR <__x> * (long double) __x)) >>>>>;
                                                    const long double __lnpoch;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__lnpoch = std::lgamma ((long double) __m + 5.0e-1) - std::lgamma ((long double) __m)) >>>>>;
                                                    const long double __lnpre_val;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__lnpre_val = std::__detail::__numeric_constants<long double>::__lnpi () * -2.5e-1 + ((long double) __m * (long double) __lncirc + (long double) __lnpoch) * 5.0e-1) >>>>>;
                                                    const long double __sr;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__sr = std::sqrt ((1.0e+0 / (long double) __m + 2.0e+0) / (std::__detail::__numeric_constants<long double>::__pi () * 4.0e+0))) >>>>>;
                                                    long double __y_mm;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__y_mm = ((long double) __sgn * (long double) __sr) * std::exp ((long double) __lnpre_val)) >>>>>;
                                                    long double __y_mp1m = (long double) __y_mp1m_factor * __y_mm;
                          {
                            if (__l == __m)
                              {
                                return <retval> = __y_mm;
                              }
                            else
                              {
                                {
                                  {
                                    if (__m + 1 == __l)
                                      {
                                        return <retval> = __y_mp1m;
                                      }
                                    else
                                      {
                                        {
                                          long double __y_lm = 0.0;

                                          <<cleanup_point                                           long double __y_lm = 0.0;>>;
                                          {
                                            unsigned int __ll = __m + 2;

                                                                                        unsigned int __ll = __m + 2;
                                            goto <D.88917>;
                                            <D.88916>:;
                                            {
                                              const long double __rat1 = (long double) (__ll - __m) / (long double) (__ll + __m);
                                              const long double __rat2 = (long double) ((__ll - __m) + 4294967295) / (long double) ((__ll + __m) + 4294967295);
                                              const long double __fact1;
                                              const long double __fact2;

                                                                                            const long double __rat1 = (long double) (__ll - __m) / (long double) (__ll + __m);
                                                                                            const long double __rat2 = (long double) ((__ll - __m) + 4294967295) / (long double) ((__ll + __m) + 4294967295);
                                                                                            const long double __fact1;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__fact1 = std::sqrt (((long double) (__ll * 2 + 1) * (long double) __rat1) * (long double) (__ll * 2 + 4294967295))) >>>>>;
                                                                                            const long double __fact2;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__fact2 = std::sqrt ((((long double) __rat1 * (long double) __rat2) * (long double) (__ll * 2 + 1)) / (long double) (__ll * 2 + 4294967293))) >>>>>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__y_lm = (((long double) __x * __y_mp1m) * (long double) __fact1 - ((long double) ((__ll + __m) + 4294967295) * __y_mm) * (long double) __fact2) / (long double) (__ll - __m)) >>>>>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__y_mm = __y_mp1m) >>>>>;
                                              <<cleanup_point <<< Unknown tree: expr_stmt
                                                (void) (__y_mp1m = __y_lm) >>>>>;
                                            }
                                            <<cleanup_point (void)  ++__ll>>;
                                            <D.88917>:;
                                            if (__ll <= __l) goto <D.88916>; else goto <D.88914>;
                                            <D.88914>:;
                                          }
                                          return <retval> = __y_lm;
                                        }
                                      }
                                  }
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__sph_neumann(unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __sph_neumann.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<float> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x == 0.0)
                      {
                        <<cleanup_point return <retval> =  -Inf>>;
                      }
                    else
                      {
                        {
                          float __j_n;
                          float __n_n;
                          float __jp_n;
                          float __np_n;

                                                    float __j_n;
                                                    float __n_n;
                                                    float __jp_n;
                                                    float __np_n;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__sph_bessel_jn<float> (__n, __x, (float &) &__j_n, (float &) &__n_n, (float &) &__jp_n, (float &) &__np_n) >>>>>;
                          return <retval> = __n_n;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__sph_neumann(unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Bad argument in __sph_neumann.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<long double> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__x == 0.0)
                      {
                        <<cleanup_point return <retval> =  -Inf>>;
                      }
                    else
                      {
                        {
                          long double __j_n;
                          long double __n_n;
                          long double __jp_n;
                          long double __np_n;

                                                    long double __j_n;
                                                    long double __n_n;
                                                    long double __jp_n;
                                                    long double __np_n;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            std::__detail::__sph_bessel_jn<long double> (__n, __x, (long double &) &__j_n, (long double &) &__n_n, (long double &) &__jp_n, (long double &) &__np_n) >>>>>;
                          return <retval> = __n_n;
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function void std::__detail::__airy(_Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __absx;
  const float __rootx;
  const float __z = (((float) __absx * 2.0e+0) * (float) __rootx) / 3.0e+0;
  const float _S_inf =  Inf;

    const float __absx;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__absx = std::abs (__x)) >>>>>;
    const float __rootx;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__rootx = std::sqrt ((float) __absx)) >>>>>;
    const float __z = (((float) __absx * 2.0e+0) * (float) __rootx) / 3.0e+0;
  <<cleanup_point   const float _S_inf =  Inf;>>;
  {
    if (<<cleanup_point std::__detail::__isnan<float> (__x)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*__Bip = *__Aip = *__Bi = *__Ai =  Nan) >>>>>;
      }
    else
      {
        {
          {
            if ((float) __z ==  Inf)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (*__Aip = *__Ai = 0.0) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (*__Bip = *__Bi =  Inf) >>>>>;
              }
            else
              {
                {
                  {
                    if ((float) __z ==  -Inf)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
                          (void) (*__Bip = *__Aip = *__Bi = *__Ai = 0.0) >>>>>;
                      }
                    else
                      {
                        {
                          {
                            if (__x > 0.0)
                              {
                                {
                                  float __I_nu;
                                  float __Ip_nu;
                                  float __K_nu;
                                  float __Kp_nu;

                                                                    float __I_nu;
                                                                    float __Ip_nu;
                                                                    float __K_nu;
                                                                    float __Kp_nu;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    std::__detail::__bessel_ik<float> (3.333333432674407958984375e-1, (float) __z, (float &) &__I_nu, (float &) &__K_nu, (float &) &__Ip_nu, (float &) &__Kp_nu) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (*__Ai = ((float) __rootx * __K_nu) / (std::__detail::__numeric_constants<float>::__sqrt3 () * std::__detail::__numeric_constants<float>::__pi ())) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (*__Bi = (__K_nu / std::__detail::__numeric_constants<float>::__pi () + (__I_nu * 2.0e+0) / std::__detail::__numeric_constants<float>::__sqrt3 ()) * (float) __rootx) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    std::__detail::__bessel_ik<float> (6.66666686534881591796875e-1, (float) __z, (float &) &__I_nu, (float &) &__K_nu, (float &) &__Ip_nu, (float &) &__Kp_nu) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (*__Aip = (-NON_LVALUE_EXPR <__x> * __K_nu) / (std::__detail::__numeric_constants<float>::__sqrt3 () * std::__detail::__numeric_constants<float>::__pi ())) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (*__Bip = (__K_nu / std::__detail::__numeric_constants<float>::__pi () + (__I_nu * 2.0e+0) / std::__detail::__numeric_constants<float>::__sqrt3 ()) * __x) >>>>>;
                                }
                              }
                            else
                              {
                                {
                                  {
                                    if (__x < 0.0)
                                      {
                                        {
                                          float __J_nu;
                                          float __Jp_nu;
                                          float __N_nu;
                                          float __Np_nu;

                                                                                    float __J_nu;
                                                                                    float __Jp_nu;
                                                                                    float __N_nu;
                                                                                    float __Np_nu;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            std::__detail::__bessel_jn<float> (3.333333432674407958984375e-1, (float) __z, (float &) &__J_nu, (float &) &__N_nu, (float &) &__Jp_nu, (float &) &__Np_nu) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            (void) (*__Ai = ((__J_nu - __N_nu / std::__detail::__numeric_constants<float>::__sqrt3 ()) * (float) __rootx) * 5.0e-1) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            (void) (*__Bi = (-NON_LVALUE_EXPR <__rootx> * (__J_nu / std::__detail::__numeric_constants<float>::__sqrt3 () + __N_nu)) * 5.0e-1) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            std::__detail::__bessel_jn<float> (6.66666686534881591796875e-1, (float) __z, (float &) &__J_nu, (float &) &__N_nu, (float &) &__Jp_nu, (float &) &__Np_nu) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            (void) (*__Aip = ((__N_nu / std::__detail::__numeric_constants<float>::__sqrt3 () + __J_nu) * (float) __absx) * 5.0e-1) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            (void) (*__Bip = ((__J_nu / std::__detail::__numeric_constants<float>::__sqrt3 () - __N_nu) * (float) __absx) * 5.0e-1) >>>>>;
                                        }
                                      }
                                    else
                                      {
                                        <<cleanup_point <<< Unknown tree: expr_stmt
                                          (void) (*__Ai = 3.550280630588531494140625e-1) >>>>>;
                                        <<cleanup_point <<< Unknown tree: expr_stmt
                                          (void) (*__Bi = *__Ai * std::__detail::__numeric_constants<float>::__sqrt3 ()) >>>>>;
                                        <<cleanup_point <<< Unknown tree: expr_stmt
                                          (void) (*__Aip = -2.58819401264190673828125e-1) >>>>>;
                                        <<cleanup_point <<< Unknown tree: expr_stmt
                                          (void) (*__Bip = -NON_LVALUE_EXPR <*__Aip> * std::__detail::__numeric_constants<float>::__sqrt3 ()) >>>>>;
                                      }
                                  }
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  return;
}


;; Function void std::__detail::__airy(_Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __absx;
  const long double __rootx;
  const long double __z = (((long double) __absx * 2.0e+0) * (long double) __rootx) / 3.0e+0;
  const long double _S_inf =  Inf;

    const long double __absx;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__absx = std::abs (__x)) >>>>>;
    const long double __rootx;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__rootx = std::sqrt ((long double) __absx)) >>>>>;
    const long double __z = (((long double) __absx * 2.0e+0) * (long double) __rootx) / 3.0e+0;
  <<cleanup_point   const long double _S_inf =  Inf;>>;
  {
    if (<<cleanup_point std::__detail::__isnan<long double> (__x)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*__Bip = *__Aip = *__Bi = *__Ai =  Nan) >>>>>;
      }
    else
      {
        {
          {
            if ((long double) __z ==  Inf)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (*__Aip = *__Ai = 0.0) >>>>>;
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (*__Bip = *__Bi =  Inf) >>>>>;
              }
            else
              {
                {
                  {
                    if ((long double) __z ==  -Inf)
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
                          (void) (*__Bip = *__Aip = *__Bi = *__Ai = 0.0) >>>>>;
                      }
                    else
                      {
                        {
                          {
                            if (__x > 0.0)
                              {
                                {
                                  long double __I_nu;
                                  long double __Ip_nu;
                                  long double __K_nu;
                                  long double __Kp_nu;

                                                                    long double __I_nu;
                                                                    long double __Ip_nu;
                                                                    long double __K_nu;
                                                                    long double __Kp_nu;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    std::__detail::__bessel_ik<long double> (3.33333333333333333342368351437379203616728773340582847595e-1, (long double) __z, (long double &) &__I_nu, (long double &) &__K_nu, (long double &) &__Ip_nu, (long double &) &__Kp_nu) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (*__Ai = ((long double) __rootx * __K_nu) / (std::__detail::__numeric_constants<long double>::__sqrt3 () * std::__detail::__numeric_constants<long double>::__pi ())) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (*__Bi = (__K_nu / std::__detail::__numeric_constants<long double>::__pi () + (__I_nu * 2.0e+0) / std::__detail::__numeric_constants<long double>::__sqrt3 ()) * (long double) __rootx) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    std::__detail::__bessel_ik<long double> (6.6666666666666666668473670287475840723345754668116569519e-1, (long double) __z, (long double &) &__I_nu, (long double &) &__K_nu, (long double &) &__Ip_nu, (long double &) &__Kp_nu) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (*__Aip = (-NON_LVALUE_EXPR <__x> * __K_nu) / (std::__detail::__numeric_constants<long double>::__sqrt3 () * std::__detail::__numeric_constants<long double>::__pi ())) >>>>>;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (*__Bip = (__K_nu / std::__detail::__numeric_constants<long double>::__pi () + (__I_nu * 2.0e+0) / std::__detail::__numeric_constants<long double>::__sqrt3 ()) * __x) >>>>>;
                                }
                              }
                            else
                              {
                                {
                                  {
                                    if (__x < 0.0)
                                      {
                                        {
                                          long double __J_nu;
                                          long double __Jp_nu;
                                          long double __N_nu;
                                          long double __Np_nu;

                                                                                    long double __J_nu;
                                                                                    long double __Jp_nu;
                                                                                    long double __N_nu;
                                                                                    long double __Np_nu;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            std::__detail::__bessel_jn<long double> (3.33333333333333333342368351437379203616728773340582847595e-1, (long double) __z, (long double &) &__J_nu, (long double &) &__N_nu, (long double &) &__Jp_nu, (long double &) &__Np_nu) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            (void) (*__Ai = ((__J_nu - __N_nu / std::__detail::__numeric_constants<long double>::__sqrt3 ()) * (long double) __rootx) * 5.0e-1) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            (void) (*__Bi = (-NON_LVALUE_EXPR <__rootx> * (__J_nu / std::__detail::__numeric_constants<long double>::__sqrt3 () + __N_nu)) * 5.0e-1) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            std::__detail::__bessel_jn<long double> (6.6666666666666666668473670287475840723345754668116569519e-1, (long double) __z, (long double &) &__J_nu, (long double &) &__N_nu, (long double &) &__Jp_nu, (long double &) &__Np_nu) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            (void) (*__Aip = ((__N_nu / std::__detail::__numeric_constants<long double>::__sqrt3 () + __J_nu) * (long double) __absx) * 5.0e-1) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
                                            (void) (*__Bip = ((__J_nu / std::__detail::__numeric_constants<long double>::__sqrt3 () - __N_nu) * (long double) __absx) * 5.0e-1) >>>>>;
                                        }
                                      }
                                    else
                                      {
                                        <<cleanup_point <<< Unknown tree: expr_stmt
                                          (void) (*__Ai = 3.55028053887817239255226056671155276944773504510521888733e-1) >>>>>;
                                        <<cleanup_point <<< Unknown tree: expr_stmt
                                          (void) (*__Bi = *__Ai * std::__detail::__numeric_constants<long double>::__sqrt3 ()) >>>>>;
                                        <<cleanup_point <<< Unknown tree: expr_stmt
                                          (void) (*__Aip = -2.58819403792806798392809111697410173746902728453278541565e-1) >>>>>;
                                        <<cleanup_point <<< Unknown tree: expr_stmt
                                          (void) (*__Bip = -NON_LVALUE_EXPR <*__Aip> * std::__detail::__numeric_constants<long double>::__sqrt3 ()) >>>>>;
                                      }
                                  }
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  return;
}


;; Function _Tp std::__detail::__conf_hyperg(_Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __c_nint;

    const float __c_nint;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__c_nint = std::nearbyint (__c)) >>>>>;
  if (<<cleanup_point (std::__detail::__isnan<float> (__a) || std::__detail::__isnan<float> (__c)) || std::__detail::__isnan<float> (__x)>>)
    {
      <<cleanup_point return <retval> =  Nan>>;
    }
  else
    {
      if ((float) __c_nint == __c && (float) __c_nint <= 0.0)
        {
          <<cleanup_point return <retval> =  Inf>>;
        }
      else
        {
          if (__a == 0.0)
            {
              return <retval> = 1.0e+0;
            }
          else
            {
              if (__c == __a)
                {
                  <<cleanup_point return <retval> = std::exp (__x)>>;
                }
              else
                {
                  if (__x < 0.0)
                    {
                      <<cleanup_point return <retval> = std::__detail::__conf_hyperg_luke<float> (__a, __c, __x)>>;
                    }
                  else
                    {
                      <<cleanup_point return <retval> = std::__detail::__conf_hyperg_series<float> (__a, __c, __x)>>;
                    }
                }
            }
        }
    }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__conf_hyperg(_Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __c_nint;

    const long double __c_nint;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__c_nint = std::nearbyint (__c)) >>>>>;
  if (<<cleanup_point (std::__detail::__isnan<long double> (__a) || std::__detail::__isnan<long double> (__c)) || std::__detail::__isnan<long double> (__x)>>)
    {
      <<cleanup_point return <retval> =  Nan>>;
    }
  else
    {
      if ((long double) __c_nint == __c && (long double) __c_nint <= 0.0)
        {
          <<cleanup_point return <retval> =  Inf>>;
        }
      else
        {
          if (__a == 0.0)
            {
              return <retval> = 1.0e+0;
            }
          else
            {
              if (__c == __a)
                {
                  <<cleanup_point return <retval> = std::exp (__x)>>;
                }
              else
                {
                  if (__x < 0.0)
                    {
                      <<cleanup_point return <retval> = std::__detail::__conf_hyperg_luke<long double> (__a, __c, __x)>>;
                    }
                  else
                    {
                      <<cleanup_point return <retval> = std::__detail::__conf_hyperg_series<long double> (__a, __c, __x)>>;
                    }
                }
            }
        }
    }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__hyperg(_Tp, _Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __a_nint;
  const float __b_nint;
  const float __c_nint;
  const float __toler = 1.1920928955078125e-4;

    const float __a_nint;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__a_nint = std::nearbyint (__a)) >>>>>;
    const float __b_nint;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__b_nint = std::nearbyint (__b)) >>>>>;
    const float __c_nint;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__c_nint = std::nearbyint (__c)) >>>>>;
  <<cleanup_point   const float __toler = 1.1920928955078125e-4;>>;
  if (<<cleanup_point std::abs (__x) >= 1.0e+0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_domain_error ((const char *) "Argument outside unit circle in __hyperg.") >>>>>;
    }
  else
    {
      if (<<cleanup_point ((std::__detail::__isnan<float> (__a) || std::__detail::__isnan<float> (__b)) || std::__detail::__isnan<float> (__c)) || std::__detail::__isnan<float> (__x)>>)
        {
          <<cleanup_point return <retval> =  Nan>>;
        }
      else
        {
          if ((float) __c_nint == __c && (float) __c_nint <= 0.0)
            {
              <<cleanup_point return <retval> =  Inf>>;
            }
          else
            {
              if (<<cleanup_point std::abs (__c - __b) < 1.1920928955078125e-4 || std::abs (__c - __a) < 1.1920928955078125e-4>>)
                {
                  <<cleanup_point return <retval> = std::pow (1.0e+0 - __x, (__c - __a) - __b)>>;
                }
              else
                {
                  if ((((__a >= 0.0 && __b >= 0.0) && __c >= 0.0) && __x >= 0.0) && __x < 9.9500000476837158203125e-1)
                    {
                      <<cleanup_point return <retval> = std::__detail::__hyperg_series<float> (__a, __b, __c, __x)>>;
                    }
                  else
                    {
                      if (<<cleanup_point std::abs (__a) < 1.0e+1 && std::abs (__b) < 1.0e+1>>)
                        {
                          if (<<cleanup_point __a < 0.0 && std::abs (__a - (float) __a_nint) < 1.1920928955078125e-4>>)
                            {
                              <<cleanup_point return <retval> = std::__detail::__hyperg_series<float> ((float) __a_nint, __b, __c, __x)>>;
                            }
                          else
                            {
                              if (<<cleanup_point __b < 0.0 && std::abs (__b - (float) __b_nint) < 1.1920928955078125e-4>>)
                                {
                                  <<cleanup_point return <retval> = std::__detail::__hyperg_series<float> (__a, (float) __b_nint, __c, __x)>>;
                                }
                              else
                                {
                                  if (__x < -2.5e-1)
                                    {
                                      <<cleanup_point return <retval> = std::__detail::__hyperg_luke<float> (__a, __b, __c, __x)>>;
                                    }
                                  else
                                    {
                                      if (__x < 5.0e-1)
                                        {
                                          <<cleanup_point return <retval> = std::__detail::__hyperg_series<float> (__a, __b, __c, __x)>>;
                                        }
                                      else
                                        {
                                          if (<<cleanup_point std::abs (__c) > 1.0e+1>>)
                                            {
                                              <<cleanup_point return <retval> = std::__detail::__hyperg_series<float> (__a, __b, __c, __x)>>;
                                            }
                                          else
                                            {
                                              <<cleanup_point return <retval> = std::__detail::__hyperg_reflect<float> (__a, __b, __c, __x)>>;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                      else
                        {
                          <<cleanup_point return <retval> = std::__detail::__hyperg_luke<float> (__a, __b, __c, __x)>>;
                        }
                    }
                }
            }
        }
    }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__hyperg(_Tp, _Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __a_nint;
  const long double __b_nint;
  const long double __c_nint;
  const long double __toler = 1.08420217248550443400745280086994171142578125e-16;

    const long double __a_nint;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__a_nint = std::nearbyint (__a)) >>>>>;
    const long double __b_nint;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__b_nint = std::nearbyint (__b)) >>>>>;
    const long double __c_nint;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__c_nint = std::nearbyint (__c)) >>>>>;
  <<cleanup_point   const long double __toler = 1.08420217248550443400745280086994171142578125e-16;>>;
  if (<<cleanup_point std::abs (__x) >= 1.0e+0>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_domain_error ((const char *) "Argument outside unit circle in __hyperg.") >>>>>;
    }
  else
    {
      if (<<cleanup_point ((std::__detail::__isnan<long double> (__a) || std::__detail::__isnan<long double> (__b)) || std::__detail::__isnan<long double> (__c)) || std::__detail::__isnan<long double> (__x)>>)
        {
          <<cleanup_point return <retval> =  Nan>>;
        }
      else
        {
          if ((long double) __c_nint == __c && (long double) __c_nint <= 0.0)
            {
              <<cleanup_point return <retval> =  Inf>>;
            }
          else
            {
              if (<<cleanup_point std::abs (__c - __b) < 1.08420217248550443400745280086994171142578125e-16 || std::abs (__c - __a) < 1.08420217248550443400745280086994171142578125e-16>>)
                {
                  <<cleanup_point return <retval> = std::pow (1.0e+0 - __x, (__c - __a) - __b)>>;
                }
              else
                {
                  if ((((__a >= 0.0 && __b >= 0.0) && __c >= 0.0) && __x >= 0.0) && __x < 9.95000000000000000004336808689942017736029811203479766846e-1)
                    {
                      <<cleanup_point return <retval> = std::__detail::__hyperg_series<long double> (__a, __b, __c, __x)>>;
                    }
                  else
                    {
                      if (<<cleanup_point std::abs (__a) < 1.0e+1 && std::abs (__b) < 1.0e+1>>)
                        {
                          if (<<cleanup_point __a < 0.0 && std::abs (__a - (long double) __a_nint) < 1.08420217248550443400745280086994171142578125e-16>>)
                            {
                              <<cleanup_point return <retval> = std::__detail::__hyperg_series<long double> ((long double) __a_nint, __b, __c, __x)>>;
                            }
                          else
                            {
                              if (<<cleanup_point __b < 0.0 && std::abs (__b - (long double) __b_nint) < 1.08420217248550443400745280086994171142578125e-16>>)
                                {
                                  <<cleanup_point return <retval> = std::__detail::__hyperg_series<long double> (__a, (long double) __b_nint, __c, __x)>>;
                                }
                              else
                                {
                                  if (__x < -2.5e-1)
                                    {
                                      <<cleanup_point return <retval> = std::__detail::__hyperg_luke<long double> (__a, __b, __c, __x)>>;
                                    }
                                  else
                                    {
                                      if (__x < 5.0e-1)
                                        {
                                          <<cleanup_point return <retval> = std::__detail::__hyperg_series<long double> (__a, __b, __c, __x)>>;
                                        }
                                      else
                                        {
                                          if (<<cleanup_point std::abs (__c) > 1.0e+1>>)
                                            {
                                              <<cleanup_point return <retval> = std::__detail::__hyperg_series<long double> (__a, __b, __c, __x)>>;
                                            }
                                          else
                                            {
                                              <<cleanup_point return <retval> = std::__detail::__hyperg_reflect<long double> (__a, __b, __c, __x)>>;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                      else
                        {
                          <<cleanup_point return <retval> = std::__detail::__hyperg_luke<long double> (__a, __b, __c, __x)>>;
                        }
                    }
                }
            }
        }
    }
  __builtin_unreachable ();
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, const _Alloc&) [with <template-parameter-2-1> = std::allocator<char>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      {
        const char * __end;

        if (__s == 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__throw_logic_error ((const char *) "basic_string: construction from null is not valid") >>>>>;
          }
                const char * __end;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__end = __s + (sizetype) std::char_traits<char>::length (__s)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __s, __end, TARGET_EXPR <D.89046, {.D.12630={}}>) >>>>>;
      }
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct _Vector_impl *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::allocator<unsigned int>::allocator ((struct allocator *) this) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data (&((struct _Vector_impl *) this)->D.72713) >>>>>;
      }
    catch
      {
        std::allocator<unsigned int>::~allocator ((struct allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        
      }
    finally
      {
        std::__new_allocator<unsigned int>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate ((struct _Vector_base *) this, ((struct _Vector_base *) this)->_M_impl.D.72713._M_start, (size_t) ((((struct _Vector_base *) this)->_M_impl.D.72713._M_end_of_storage - ((struct _Vector_base *) this)->_M_impl.D.72713._M_start) /[ex] 4)) >>>>>;
          }
        finally
          {
            std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl (&((struct _Vector_base *) this)->_M_impl);
          }
      }
    finally
      {
        *(struct _Vector_base *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::vector<_Tp, _Alloc>::~vector() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::_Destroy<unsigned int*, unsigned int> (((struct vector *) this)->D.73373._M_impl.D.72713._M_start, ((struct vector *) this)->D.73373._M_impl.D.72713._M_finish, (struct allocator &) std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator (&((struct vector *) this)->D.73373)) >>>>>;
          }
        finally
          {
            std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base (&((struct vector *) this)->D.73373);
          }
      }
    finally
      {
        *(struct vector *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::size() const [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) (((unsigned int *) ((const struct vector *) this)->D.73373._M_impl.D.72713._M_finish - (unsigned int *) ((const struct vector *) this)->D.73373._M_impl.D.72713._M_start) /[ex] 4)
   >>>;
__builtin_unreachable ();


;; Function std::linear_congruential_engine<_UIntType, __a, __c, __m>::linear_congruential_engine() [with _UIntType = long unsigned int; _UIntType __a = 16807; _UIntType __c = 0; _UIntType __m = 2147483647] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct linear_congruential_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::linear_congruential_engine ((struct linear_congruential_engine *) this, 1) >>>>>;
}


;; Function std::shuffle_order_engine<_RandomNumberEngine, __k>::shuffle_order_engine() [with _RandomNumberEngine = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; long unsigned int __k = 256] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct shuffle_order_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct shuffle_order_engine *) this)->_M_b = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.89077
      (struct linear_congruential_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>::_M_initialize ((struct shuffle_order_engine *) this) >>>>>;
}


;; Function std::discard_block_engine<_RandomNumberEngine, __p, __r>::discard_block_engine() [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>; long unsigned int __p = 389; long unsigned int __r = 11] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct discard_block_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct discard_block_engine *) this)->_M_b = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.89082
      (struct subtract_with_carry_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct discard_block_engine *) this)->_M_n = 0) >>>>>;
}


;; Function std::discard_block_engine<_RandomNumberEngine, __p, __r>::discard_block_engine() [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>; long unsigned int __p = 223; long unsigned int __r = 23] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct discard_block_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct discard_block_engine *) this)->_M_b = <<< Unknown tree: aggr_init_expr
      4
      __ct_comp 
      D.89087
      (struct subtract_with_carry_engine *) <<< Unknown tree: void_cst >>> >>>) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct discard_block_engine *) this)->_M_n = 0) >>>>>;
}


;; Function std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::subtract_with_carry_engine() [with _UIntType = long unsigned int; long unsigned int __w = 48; long unsigned int __s = 5; long unsigned int __r = 12] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct subtract_with_carry_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::subtract_with_carry_engine ((struct subtract_with_carry_engine *) this, 0) >>>>>;
}


;; Function std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::subtract_with_carry_engine() [with _UIntType = long unsigned int; long unsigned int __w = 24; long unsigned int __s = 10; long unsigned int __r = 24] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct subtract_with_carry_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::subtract_with_carry_engine ((struct subtract_with_carry_engine *) this, 0) >>>>>;
}


;; Function std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::mersenne_twister_engine() [with _UIntType = long unsigned int; long unsigned int __w = 64; long unsigned int __n = 312; long unsigned int __m = 156; long unsigned int __r = 31; _UIntType __a = 13043109905998158313; long unsigned int __u = 29; _UIntType __d = 6148914691236517205; long unsigned int __s = 17; _UIntType __b = 8202884508482404352; long unsigned int __t = 37; _UIntType __c = 18444473444759240704; long unsigned int __l = 43; _UIntType __f = 6364136223846793005] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct mersenne_twister_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::mersenne_twister_engine ((struct mersenne_twister_engine *) this, 5489) >>>>>;
}


;; Function std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::mersenne_twister_engine() [with _UIntType = long unsigned int; long unsigned int __w = 32; long unsigned int __n = 624; long unsigned int __m = 397; long unsigned int __r = 31; _UIntType __a = 2567483615; long unsigned int __u = 11; _UIntType __d = 4294967295; long unsigned int __s = 7; _UIntType __b = 2636928640; long unsigned int __t = 15; _UIntType __c = 4022730752; long unsigned int __l = 18; _UIntType __f = 1812433253] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct mersenne_twister_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::mersenne_twister_engine ((struct mersenne_twister_engine *) this, 5489) >>>>>;
}


;; Function std::linear_congruential_engine<_UIntType, __a, __c, __m>::linear_congruential_engine() [with _UIntType = long unsigned int; _UIntType __a = 48271; _UIntType __c = 0; _UIntType __m = 2147483647] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct linear_congruential_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>::linear_congruential_engine ((struct linear_congruential_engine *) this, 1) >>>>>;
}


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 0; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm0EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::linear_congruential_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm0EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm0EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.89130, 0>;, std::random_device::random_device (&rd);;, D.89130 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm0EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm0EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm0EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.89340, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.89340 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm0EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.89377>;
    <D.89376>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (&val, (struct linear_congruential_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.89377>:;
    if (j <= 9) goto <D.89376>; else goto <D.89374>;
    <D.89374>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<1, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = char; char_type = char] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::lt(const char_type&, const char_type&) [with _CharT = wchar_t; char_type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 < *__c2;


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = wchar_t; char_type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; pointer = char*] (null)
;; enabled by -tree-original


return <retval> = (char *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) std::__ptr_traits_ptr_to<char*, char, false>::pointer_to ((element_type &) &((struct basic_string *) this)->D.28283._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<char>::allocator ((struct allocator *) this, (const struct allocator &) __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function constexpr void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_init_local_buf() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__n>), (const char_type &) &TARGET_EXPR <D.89432, 0>) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.28283._M_allocated_capacity) >>>>>;
  }


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; allocator_type = std::__cxx11::basic_string<char>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = allocator<char>&; typename remove_reference<_Tp>::type = allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char>::_M_local_data ((const struct basic_string *) this)>>)
  {
    if (((const struct basic_string *) this)->_M_string_length > 15)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          __builtin_unreachable () >>>>>;
      }
    return <retval> = 1;
  }
return <retval> = 0;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable ();


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(pointer) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.28283._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(unsigned int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(unsigned int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(long int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(long int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(long unsigned int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(long unsigned int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(long long int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(long long int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::to_string(long long unsigned int)::<lambda(char*, size_t)>&; typename remove_reference<_Tp>::type = __cxx11::to_string(long long unsigned int)::<lambda(char*, size_t)>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.89491, {.D.12640={}}>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct basic_string *) this)->_M_string_length = 0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.89477, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; pointer = wchar_t*] (null)
;; enabled by -tree-original


return <retval> = (wchar_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) std::__ptr_traits_ptr_to<wchar_t*, wchar_t, false>::pointer_to ((element_type &) &((struct basic_string *) this)->D.30133._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<wchar_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const char*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const char*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<wchar_t>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_S_copy_chars<const char*> (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<wchar_t>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<wchar_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.30133._M_allocated_capacity) >>>>>;
  }


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;
__builtin_unreachable ();


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<char>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<char>::_M_construct<const char*>(const char*, const char*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<wchar_t>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_M_constructIPKwEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*>(const wchar_t*, const wchar_t*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*>(const wchar_t*, const wchar_t*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::__ptr_traits_ptr_to<char16_t*, char16_t, false>::pointer_to ((element_type &) &((struct basic_string *) this)->D.32102._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<char16_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char16_t>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12_M_constructIPKDsEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const char16_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*>(const char16_t*, const char16_t*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_S_copy_chars (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*>(const char16_t*, const char16_t*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char16_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.32102._M_allocated_capacity) >>>>>;
  }


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::__ptr_traits_ptr_to<char32_t*, char32_t, false>::pointer_to ((element_type &) &((struct basic_string *) this)->D.33611._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator<char32_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char32_t>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12_M_constructIPKDiEEvT_S8_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<const char32_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*>(const char32_t*, const char32_t*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_S_copy_chars (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*>(const char32_t*, const char32_t*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__cxx11::basic_string<char32_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.33611._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(size_type, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos, 0, __s, std::char_traits<char>::length (__s))>>;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = __cxx11::basic_string<char>&; typename remove_reference<_Tp>::type = __cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;
__builtin_unreachable ();


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos1, 0, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function _Tp std::__detail::__poly_laguerre(unsigned int, _Tpa, _Tp) [with _Tpa = unsigned int; _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Negative argument in __poly_laguerre.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<float> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__n == 0)
                      {
                        return <retval> = 1.0e+0;
                      }
                    else
                      {
                        {
                          {
                            if (__n == 1)
                              {
                                return <retval> = ((float) __alpha1 + 1.0e+0) - __x;
                              }
                            else
                              {
                                {
                                  {
                                    if (__x == 0.0)
                                      {
                                        {
                                          float __prod = (float) __alpha1 + 1.0e+0;

                                                                                    float __prod = (float) __alpha1 + 1.0e+0;
                                          {
                                            unsigned int __k = 2;

                                            <<cleanup_point                                             unsigned int __k = 2;>>;
                                            goto <D.90643>;
                                            <D.90642>:;
                                            <<cleanup_point <<< Unknown tree: expr_stmt
                                              (void) (__prod = (((float) __alpha1 + (float) __k) / (float) __k) * __prod) >>>>>;
                                            <<cleanup_point (void)  ++__k>>;
                                            <D.90643>:;
                                            if (__k <= __n) goto <D.90642>; else goto <D.90640>;
                                            <D.90640>:;
                                          }
                                          return <retval> = __prod;
                                        }
                                      }
                                    else
                                      {
                                        if ((__n > 10000000 && (float) __alpha1 > -1.0e+0) && ((float) __alpha1 + 1.0e+0) * 2.0e+0 + (float) (__n * 4) > __x)
                                          {
                                            <<cleanup_point return <retval> = std::__detail::__poly_laguerre_large_n<unsigned int, float> (__n, __alpha1, __x)>>;
                                          }
                                        else
                                          {
                                            if ((float) __alpha1 >= 0.0 || __x > 0.0 && (float) __alpha1 < -(float) (__n + 1))
                                              {
                                                <<cleanup_point return <retval> = std::__detail::__poly_laguerre_recursion<unsigned int, float> (__n, __alpha1, __x)>>;
                                              }
                                            else
                                              {
                                                <<cleanup_point return <retval> = std::__detail::__poly_laguerre_hyperg<unsigned int, float> (__n, __alpha1, __x)>>;
                                              }
                                          }
                                      }
                                  }
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__poly_laguerre(unsigned int, _Tpa, _Tp) [with _Tpa = unsigned int; _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__x < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Negative argument in __poly_laguerre.") >>>>>;
      }
    else
      {
        {
          {
            if (<<cleanup_point std::__detail::__isnan<long double> (__x)>>)
              {
                <<cleanup_point return <retval> =  Nan>>;
              }
            else
              {
                {
                  {
                    if (__n == 0)
                      {
                        return <retval> = 1.0e+0;
                      }
                    else
                      {
                        {
                          {
                            if (__n == 1)
                              {
                                return <retval> = ((long double) __alpha1 + 1.0e+0) - __x;
                              }
                            else
                              {
                                {
                                  {
                                    if (__x == 0.0)
                                      {
                                        {
                                          long double __prod = (long double) __alpha1 + 1.0e+0;

                                                                                    long double __prod = (long double) __alpha1 + 1.0e+0;
                                          {
                                            unsigned int __k = 2;

                                            <<cleanup_point                                             unsigned int __k = 2;>>;
                                            goto <D.90665>;
                                            <D.90664>:;
                                            <<cleanup_point <<< Unknown tree: expr_stmt
                                              (void) (__prod = (((long double) __alpha1 + (long double) __k) / (long double) __k) * __prod) >>>>>;
                                            <<cleanup_point (void)  ++__k>>;
                                            <D.90665>:;
                                            if (__k <= __n) goto <D.90664>; else goto <D.90662>;
                                            <D.90662>:;
                                          }
                                          return <retval> = __prod;
                                        }
                                      }
                                    else
                                      {
                                        if (__n > 10000000 && ((long double) __alpha1 + 1.0e+0) * 2.0e+0 + (long double) (__n * 4) > __x)
                                          {
                                            <<cleanup_point return <retval> = std::__detail::__poly_laguerre_large_n<unsigned int, long double> (__n, __alpha1, __x)>>;
                                          }
                                        else
                                          {
                                            if (1)
                                              {
                                                <<cleanup_point return <retval> = std::__detail::__poly_laguerre_recursion<unsigned int, long double> (__n, __alpha1, __x)>>;
                                              }
                                            else
                                              {
                                                <<cleanup_point return <retval> = std::__detail::__poly_laguerre_hyperg<unsigned int, long double> (__n, __alpha1, __x)>>;
                                              }
                                          }
                                      }
                                  }
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function bool std::__detail::__isnan(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::isnan (__x)>>;


;; Function bool std::__detail::__isnan(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::isnan (__x)>>;


;; Function _Tp std::__detail::__beta_lgamma(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  float __bet;

    float __bet;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__bet = (std::lgamma (__x) + std::lgamma (__y)) - std::lgamma (__x + __y)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__bet = std::exp (__bet)) >>>>>;
  return <retval> = __bet;
}


;; Function _Tp std::__detail::__beta_lgamma(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __bet;

    long double __bet;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__bet = (std::lgamma (__x) + std::lgamma (__y)) - std::lgamma (__x + __y)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__bet = std::exp (__bet)) >>>>>;
  return <retval> = __bet;
}


;; Function _Tp std::__detail::__ellint_rf(_Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __min = 1.17549435082228750796873653722224567781866555677208752151e-38;
  const float __lolim = 5.87747175411143753984368268611122838909332778386043760754e-38;

  <<cleanup_point   const float __min = 1.17549435082228750796873653722224567781866555677208752151e-38;>>;
  <<cleanup_point   const float __lolim = 5.87747175411143753984368268611122838909332778386043760754e-38;>>;
  {
    if ((__x < 0.0 || __y < 0.0) || __z < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Argument less than zero in __ellint_rf.") >>>>>;
      }
    else
      {
        {
          {
            if ((__x + __y < 5.87747175411143753984368268611122838909332778386043760754e-38 || __x + __z < 5.87747175411143753984368268611122838909332778386043760754e-38) || __y + __z < 5.87747175411143753984368268611122838909332778386043760754e-38)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Argument too small in __ellint_rf") >>>>>;
              }
            else
              {
                {
                  const float __c0 = 2.5e-1;
                  const float __c1 = 4.16666679084300994873046875e-2;
                  const float __c2 = 1.00000001490116119384765625e-1;
                  const float __c3 = 6.8181820213794708251953125e-2;
                  const float __c4 = 7.1428574621677398681640625e-2;
                  float __xn = __x;
                  float __yn = __y;
                  float __zn = __z;
                  const float __eps = 1.1920928955078125e-7;
                  const float __errtol = 7.0153869688510894775390625e-2;
                  float __mu;
                  float __xndev;
                  float __yndev;
                  float __zndev;
                  const unsigned int __max_iter = 100;
                  const float __e2 = __xndev * __yndev - __zndev * __zndev;
                  const float __e3 = (__xndev * __yndev) * __zndev;
                  const float __s = ((((float) __e2 * 4.16666679084300994873046875e-2 - 1.00000001490116119384765625e-1) - (float) __e3 * 6.8181820213794708251953125e-2) * (float) __e2 + 1.0e+0) + (float) __e3 * 7.1428574621677398681640625e-2;

                  <<cleanup_point                   const float __c0 = 2.5e-1;>>;
                  <<cleanup_point                   const float __c1 = 4.16666679084300994873046875e-2;>>;
                  <<cleanup_point                   const float __c2 = 1.00000001490116119384765625e-1;>>;
                  <<cleanup_point                   const float __c3 = 6.8181820213794708251953125e-2;>>;
                  <<cleanup_point                   const float __c4 = 7.1428574621677398681640625e-2;>>;
                                    float __xn = __x;
                                    float __yn = __y;
                                    float __zn = __z;
                  <<cleanup_point                   const float __eps = 1.1920928955078125e-7;>>;
                  <<cleanup_point                   const float __errtol = 7.0153869688510894775390625e-2;>>;
                                    float __mu;
                                    float __xndev;
                                    float __yndev;
                                    float __zndev;
                  <<cleanup_point                   const unsigned int __max_iter = 100;>>;
                  {
                    unsigned int __iter = 0;

                    <<cleanup_point                     unsigned int __iter = 0;>>;
                    goto <D.90717>;
                    <D.90716>:;
                    {
                      float __epsilon;
                      const float __xnroot;
                      const float __ynroot;
                      const float __znroot;
                      const float __lambda = ((float) __ynroot + (float) __znroot) * (float) __xnroot + (float) __ynroot * (float) __znroot;

                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__mu = ((__xn + __yn) + __zn) / 3.0e+0) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xndev = 2.0e+0 - (__mu + __xn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yndev = 2.0e+0 - (__mu + __yn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zndev = 2.0e+0 - (__mu + __zn) / __mu) >>>>>;
                                            float __epsilon;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (float) *std::max<float> ((const float &) &TARGET_EXPR <D.90704, std::abs (__xndev)>, (const float &) &TARGET_EXPR <D.90705, std::abs (__yndev)>)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (float) *std::max<float> ((const float &) &__epsilon, (const float &) &TARGET_EXPR <D.90706, std::abs (__zndev)>)) >>>>>;
                      if (__epsilon < 7.0153869688510894775390625e-2) goto <D.90714>;
                                            const float __xnroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xnroot = std::sqrt (__xn)) >>>>>;
                                            const float __ynroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__ynroot = std::sqrt (__yn)) >>>>>;
                                            const float __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__znroot = std::sqrt (__zn)) >>>>>;
                                            const float __lambda = ((float) __ynroot + (float) __znroot) * (float) __xnroot + (float) __ynroot * (float) __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xn = (__xn + (float) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yn = (__yn + (float) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zn = (__zn + (float) __lambda) * 2.5e-1) >>>>>;
                    }
                    <<cleanup_point (void)  ++__iter>>;
                    <D.90717>:;
                    if (__iter <= 99) goto <D.90716>; else goto <D.90714>;
                    <D.90714>:;
                  }
                                    const float __e2 = __xndev * __yndev - __zndev * __zndev;
                                    const float __e3 = (__xndev * __yndev) * __zndev;
                                    const float __s = ((((float) __e2 * 4.16666679084300994873046875e-2 - 1.00000001490116119384765625e-1) - (float) __e3 * 6.8181820213794708251953125e-2) * (float) __e2 + 1.0e+0) + (float) __e3 * 7.1428574621677398681640625e-2;
                  <<cleanup_point return <retval> = (float) __s / std::sqrt (__mu)>>;
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_rf(_Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __min = 3.36210314311209350626267781732175260259807934484647124011e-4932;
  const long double __lolim = 1.68105157155604675313133890866087630129903967242323562006e-4931;

  <<cleanup_point   const long double __min = 3.36210314311209350626267781732175260259807934484647124011e-4932;>>;
  <<cleanup_point   const long double __lolim = 1.68105157155604675313133890866087630129903967242323562006e-4931;>>;
  {
    if ((__x < 0.0 || __y < 0.0) || __z < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Argument less than zero in __ellint_rf.") >>>>>;
      }
    else
      {
        {
          {
            if ((__x + __y < 1.68105157155604675313133890866087630129903967242323562006e-4931 || __x + __z < 1.68105157155604675313133890866087630129903967242323562006e-4931) || __y + __z < 1.68105157155604675313133890866087630129903967242323562006e-4931)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Argument too small in __ellint_rf") >>>>>;
              }
            else
              {
                {
                  const long double __c0 = 2.5e-1;
                  const long double __c1 = 4.16666666666666666677960439296724004520910966675728559494e-2;
                  const long double __c2 = 1.00000000000000000001355252715606880542509316001087427139e-1;
                  const long double __c3 = 6.81818181818181818200298900667366552852399763651192188263e-2;
                  const long double __c4 = 7.14285714285714285704605337745665138982076314277946949005e-2;
                  long double __xn = __x;
                  long double __yn = __y;
                  long double __zn = __z;
                  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
                  const long double __errtol = 6.90533966002487816673314276628287133874550818291027098894e-4;
                  long double __mu;
                  long double __xndev;
                  long double __yndev;
                  long double __zndev;
                  const unsigned int __max_iter = 100;
                  const long double __e2 = __xndev * __yndev - __zndev * __zndev;
                  const long double __e3 = (__xndev * __yndev) * __zndev;
                  const long double __s = ((((long double) __e2 * 4.16666666666666666677960439296724004520910966675728559494e-2 - 1.00000000000000000001355252715606880542509316001087427139e-1) - (long double) __e3 * 6.81818181818181818200298900667366552852399763651192188263e-2) * (long double) __e2 + 1.0e+0) + (long double) __e3 * 7.14285714285714285704605337745665138982076314277946949005e-2;

                  <<cleanup_point                   const long double __c0 = 2.5e-1;>>;
                  <<cleanup_point                   const long double __c1 = 4.16666666666666666677960439296724004520910966675728559494e-2;>>;
                  <<cleanup_point                   const long double __c2 = 1.00000000000000000001355252715606880542509316001087427139e-1;>>;
                  <<cleanup_point                   const long double __c3 = 6.81818181818181818200298900667366552852399763651192188263e-2;>>;
                  <<cleanup_point                   const long double __c4 = 7.14285714285714285704605337745665138982076314277946949005e-2;>>;
                                    long double __xn = __x;
                                    long double __yn = __y;
                                    long double __zn = __z;
                  <<cleanup_point                   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
                  <<cleanup_point                   const long double __errtol = 6.90533966002487816673314276628287133874550818291027098894e-4;>>;
                                    long double __mu;
                                    long double __xndev;
                                    long double __yndev;
                                    long double __zndev;
                  <<cleanup_point                   const unsigned int __max_iter = 100;>>;
                  {
                    unsigned int __iter = 0;

                    <<cleanup_point                     unsigned int __iter = 0;>>;
                    goto <D.90757>;
                    <D.90756>:;
                    {
                      long double __epsilon;
                      const long double __xnroot;
                      const long double __ynroot;
                      const long double __znroot;
                      const long double __lambda = ((long double) __ynroot + (long double) __znroot) * (long double) __xnroot + (long double) __ynroot * (long double) __znroot;

                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__mu = ((__xn + __yn) + __zn) / 3.0e+0) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xndev = 2.0e+0 - (__mu + __xn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yndev = 2.0e+0 - (__mu + __yn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zndev = 2.0e+0 - (__mu + __zn) / __mu) >>>>>;
                                            long double __epsilon;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (long double) *std::max<long double> ((const long double &) &TARGET_EXPR <D.90744, std::abs (__xndev)>, (const long double &) &TARGET_EXPR <D.90745, std::abs (__yndev)>)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (long double) *std::max<long double> ((const long double &) &__epsilon, (const long double &) &TARGET_EXPR <D.90746, std::abs (__zndev)>)) >>>>>;
                      if (__epsilon < 6.90533966002487816673314276628287133874550818291027098894e-4) goto <D.90754>;
                                            const long double __xnroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xnroot = std::sqrt (__xn)) >>>>>;
                                            const long double __ynroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__ynroot = std::sqrt (__yn)) >>>>>;
                                            const long double __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__znroot = std::sqrt (__zn)) >>>>>;
                                            const long double __lambda = ((long double) __ynroot + (long double) __znroot) * (long double) __xnroot + (long double) __ynroot * (long double) __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xn = (__xn + (long double) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yn = (__yn + (long double) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zn = (__zn + (long double) __lambda) * 2.5e-1) >>>>>;
                    }
                    <<cleanup_point (void)  ++__iter>>;
                    <D.90757>:;
                    if (__iter <= 99) goto <D.90756>; else goto <D.90754>;
                    <D.90754>:;
                  }
                                    const long double __e2 = __xndev * __yndev - __zndev * __zndev;
                                    const long double __e3 = (__xndev * __yndev) * __zndev;
                                    const long double __s = ((((long double) __e2 * 4.16666666666666666677960439296724004520910966675728559494e-2 - 1.00000000000000000001355252715606880542509316001087427139e-1) - (long double) __e3 * 6.81818181818181818200298900667366552852399763651192188263e-2) * (long double) __e2 + 1.0e+0) + (long double) __e3 * 7.14285714285714285704605337745665138982076314277946949005e-2;
                  <<cleanup_point return <retval> = (long double) __s / std::sqrt (__mu)>>;
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_rd(_Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __eps = 1.1920928955078125e-7;
  const float __errtol = 4.960627853870391845703125e-2;
  const float __max = 3.4028234663852885981170418348451692544e+38;
  const float __lolim = 4.1033284075387175404666066806549331902635377455901277699e-26;

  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   const float __errtol = 4.960627853870391845703125e-2;>>;
  <<cleanup_point   const float __max = 3.4028234663852885981170418348451692544e+38;>>;
  <<cleanup_point   const float __lolim = 4.1033284075387175404666066806549331902635377455901277699e-26;>>;
  {
    if (__x < 0.0 || __y < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Argument less than zero in __ellint_rd.") >>>>>;
      }
    else
      {
        {
          {
            if (__x + __y < 4.1033284075387175404666066806549331902635377455901277699e-26 || __z < 4.1033284075387175404666066806549331902635377455901277699e-26)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Argument too small in __ellint_rd.") >>>>>;
              }
            else
              {
                {
                  const float __c0 = 2.5e-1;
                  const float __c1 = 2.1428571641445159912109375e-1;
                  const float __c2 = 1.6666667163372039794921875e-1;
                  const float __c3 = 4.090909063816070556640625e-1;
                  const float __c4 = 1.15384615957736968994140625e-1;
                  float __xn = __x;
                  float __yn = __y;
                  float __zn = __z;
                  float __sigma = 0.0;
                  float __power4 = 1.0e+0;
                  float __mu;
                  float __xndev;
                  float __yndev;
                  float __zndev;
                  const unsigned int __max_iter = 100;
                  float __ea = __xndev * __yndev;
                  float __eb = __zndev * __zndev;
                  float __ec = __ea - __eb;
                  float __ed = __ea - __eb * 6.0e+0;
                  float __ef = (__ed + __ec) + __ec;
                  float __s1 = (((__ed * 4.090909063816070556640625e-1) / 3.0e+0 - 2.1428571641445159912109375e-1) - ((__zndev * 3.4615385532379150390625e-1) * __ef) * 5.0e-1) * __ed;
                  float __s2 = (__ef * 1.6666667163372039794921875e-1 + ((__ec * -4.090909063816070556640625e-1 - __zndev * 1.15384615957736968994140625e-1) - __ea) * __zndev) * __zndev;

                  <<cleanup_point                   const float __c0 = 2.5e-1;>>;
                  <<cleanup_point                   const float __c1 = 2.1428571641445159912109375e-1;>>;
                  <<cleanup_point                   const float __c2 = 1.6666667163372039794921875e-1;>>;
                  <<cleanup_point                   const float __c3 = 4.090909063816070556640625e-1;>>;
                  <<cleanup_point                   const float __c4 = 1.15384615957736968994140625e-1;>>;
                                    float __xn = __x;
                                    float __yn = __y;
                                    float __zn = __z;
                  <<cleanup_point                   float __sigma = 0.0;>>;
                  <<cleanup_point                   float __power4 = 1.0e+0;>>;
                                    float __mu;
                                    float __xndev;
                                    float __yndev;
                                    float __zndev;
                  <<cleanup_point                   const unsigned int __max_iter = 100;>>;
                  {
                    unsigned int __iter = 0;

                    <<cleanup_point                     unsigned int __iter = 0;>>;
                    goto <D.90800>;
                    <D.90799>:;
                    {
                      float __epsilon;
                      float __xnroot;
                      float __ynroot;
                      float __znroot;
                      float __lambda = (__ynroot + __znroot) * __xnroot + __ynroot * __znroot;

                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__mu = ((__xn + __yn) + __zn * 3.0e+0) / 5.0e+0) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xndev = (__mu - __xn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yndev = (__mu - __yn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zndev = (__mu - __zn) / __mu) >>>>>;
                                            float __epsilon;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (float) *std::max<float> ((const float &) &TARGET_EXPR <D.90783, std::abs (__xndev)>, (const float &) &TARGET_EXPR <D.90784, std::abs (__yndev)>)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (float) *std::max<float> ((const float &) &__epsilon, (const float &) &TARGET_EXPR <D.90785, std::abs (__zndev)>)) >>>>>;
                      if (__epsilon < 4.960627853870391845703125e-2) goto <D.90797>;
                                            float __xnroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xnroot = std::sqrt (__xn)) >>>>>;
                                            float __ynroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__ynroot = std::sqrt (__yn)) >>>>>;
                                            float __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__znroot = std::sqrt (__zn)) >>>>>;
                                            float __lambda = (__ynroot + __znroot) * __xnroot + __ynroot * __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__sigma = __power4 / ((__zn + __lambda) * __znroot) + __sigma) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__power4 = __power4 * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xn = (__xn + __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yn = (__yn + __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zn = (__zn + __lambda) * 2.5e-1) >>>>>;
                    }
                    <<cleanup_point (void)  ++__iter>>;
                    <D.90800>:;
                    if (__iter <= 99) goto <D.90799>; else goto <D.90797>;
                    <D.90797>:;
                  }
                                    float __ea = __xndev * __yndev;
                                    float __eb = __zndev * __zndev;
                                    float __ec = __ea - __eb;
                                    float __ed = __ea - __eb * 6.0e+0;
                                    float __ef = (__ed + __ec) + __ec;
                                    float __s1 = (((__ed * 4.090909063816070556640625e-1) / 3.0e+0 - 2.1428571641445159912109375e-1) - ((__zndev * 3.4615385532379150390625e-1) * __ef) * 5.0e-1) * __ed;
                                    float __s2 = (__ef * 1.6666667163372039794921875e-1 + ((__ec * -4.090909063816070556640625e-1 - __zndev * 1.15384615957736968994140625e-1) - __ea) * __zndev) * __zndev;
                  <<cleanup_point return <retval> = __sigma * 3.0e+0 + (((__s1 + 1.0e+0) + __s2) * __power4) / (std::sqrt (__mu) * __mu)>>;
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_rd(_Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __errtol = 4.88281249999999999894120881593212457616459687415044754744e-4;
  const long double __max = 1.18973149535723176502126385303097020516906332229462420044e+4932;
  const long double __lolim = 1.78127384014477864355517339846540032182605725731412968489e-3288;

  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   const long double __errtol = 4.88281249999999999894120881593212457616459687415044754744e-4;>>;
  <<cleanup_point   const long double __max = 1.18973149535723176502126385303097020516906332229462420044e+4932;>>;
  <<cleanup_point   const long double __lolim = 1.78127384014477864355517339846540032182605725731412968489e-3288;>>;
  {
    if (__x < 0.0 || __y < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Argument less than zero in __ellint_rd.") >>>>>;
      }
    else
      {
        {
          {
            if (__x + __y < 1.78127384014477864355517339846540032182605725731412968489e-3288 || __z < 1.78127384014477864355517339846540032182605725731412968489e-3288)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Argument too small in __ellint_rd.") >>>>>;
              }
            else
              {
                {
                  const long double __c0 = 2.5e-1;
                  const long double __c1 = 2.14285714285714285718157864901733944407169474288821220398e-1;
                  const long double __c2 = 1.66666666666666666671184175718689601808364386670291423798e-1;
                  const long double __c3 = 4.09090909090909090906626813244351126286346698179841041565e-1;
                  const long double __c4 = 1.15384615384615384616948368518007939087510749232023954391e-1;
                  long double __xn = __x;
                  long double __yn = __y;
                  long double __zn = __z;
                  long double __sigma = 0.0;
                  long double __power4 = 1.0e+0;
                  long double __mu;
                  long double __xndev;
                  long double __yndev;
                  long double __zndev;
                  const unsigned int __max_iter = 100;
                  long double __ea = __xndev * __yndev;
                  long double __eb = __zndev * __zndev;
                  long double __ec = __ea - __eb;
                  long double __ed = __ea - __eb * 6.0e+0;
                  long double __ef = (__ed + __ec) + __ec;
                  long double __s1 = (((__ed * 4.09090909090909090906626813244351126286346698179841041565e-1) / 3.0e+0 - 2.14285714285714285718157864901733944407169474288821220398e-1) - ((__zndev * 3.46153846153846153844068841975989414549985667690634727478e-1) * __ef) * 5.0e-1) * __ed;
                  long double __s2 = (__ef * 1.66666666666666666671184175718689601808364386670291423798e-1 + ((__ec * -4.09090909090909090906626813244351126286346698179841041565e-1 - __zndev * 1.15384615384615384616948368518007939087510749232023954391e-1) - __ea) * __zndev) * __zndev;

                  <<cleanup_point                   const long double __c0 = 2.5e-1;>>;
                  <<cleanup_point                   const long double __c1 = 2.14285714285714285718157864901733944407169474288821220398e-1;>>;
                  <<cleanup_point                   const long double __c2 = 1.66666666666666666671184175718689601808364386670291423798e-1;>>;
                  <<cleanup_point                   const long double __c3 = 4.09090909090909090906626813244351126286346698179841041565e-1;>>;
                  <<cleanup_point                   const long double __c4 = 1.15384615384615384616948368518007939087510749232023954391e-1;>>;
                                    long double __xn = __x;
                                    long double __yn = __y;
                                    long double __zn = __z;
                  <<cleanup_point                   long double __sigma = 0.0;>>;
                  <<cleanup_point                   long double __power4 = 1.0e+0;>>;
                                    long double __mu;
                                    long double __xndev;
                                    long double __yndev;
                                    long double __zndev;
                  <<cleanup_point                   const unsigned int __max_iter = 100;>>;
                  {
                    unsigned int __iter = 0;

                    <<cleanup_point                     unsigned int __iter = 0;>>;
                    goto <D.90843>;
                    <D.90842>:;
                    {
                      long double __epsilon;
                      long double __xnroot;
                      long double __ynroot;
                      long double __znroot;
                      long double __lambda = (__ynroot + __znroot) * __xnroot + __ynroot * __znroot;

                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__mu = ((__xn + __yn) + __zn * 3.0e+0) / 5.0e+0) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xndev = (__mu - __xn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yndev = (__mu - __yn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zndev = (__mu - __zn) / __mu) >>>>>;
                                            long double __epsilon;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (long double) *std::max<long double> ((const long double &) &TARGET_EXPR <D.90826, std::abs (__xndev)>, (const long double &) &TARGET_EXPR <D.90827, std::abs (__yndev)>)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (long double) *std::max<long double> ((const long double &) &__epsilon, (const long double &) &TARGET_EXPR <D.90828, std::abs (__zndev)>)) >>>>>;
                      if (__epsilon < 4.88281249999999999894120881593212457616459687415044754744e-4) goto <D.90840>;
                                            long double __xnroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xnroot = std::sqrt (__xn)) >>>>>;
                                            long double __ynroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__ynroot = std::sqrt (__yn)) >>>>>;
                                            long double __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__znroot = std::sqrt (__zn)) >>>>>;
                                            long double __lambda = (__ynroot + __znroot) * __xnroot + __ynroot * __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__sigma = __power4 / ((__zn + __lambda) * __znroot) + __sigma) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__power4 = __power4 * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xn = (__xn + __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yn = (__yn + __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zn = (__zn + __lambda) * 2.5e-1) >>>>>;
                    }
                    <<cleanup_point (void)  ++__iter>>;
                    <D.90843>:;
                    if (__iter <= 99) goto <D.90842>; else goto <D.90840>;
                    <D.90840>:;
                  }
                                    long double __ea = __xndev * __yndev;
                                    long double __eb = __zndev * __zndev;
                                    long double __ec = __ea - __eb;
                                    long double __ed = __ea - __eb * 6.0e+0;
                                    long double __ef = (__ed + __ec) + __ec;
                                    long double __s1 = (((__ed * 4.09090909090909090906626813244351126286346698179841041565e-1) / 3.0e+0 - 2.14285714285714285718157864901733944407169474288821220398e-1) - ((__zndev * 3.46153846153846153844068841975989414549985667690634727478e-1) * __ef) * 5.0e-1) * __ed;
                                    long double __s2 = (__ef * 1.66666666666666666671184175718689601808364386670291423798e-1 + ((__ec * -4.09090909090909090906626813244351126286346698179841041565e-1 - __zndev * 1.15384615384615384616948368518007939087510749232023954391e-1) - __ea) * __zndev) * __zndev;
                  <<cleanup_point return <retval> = __sigma * 3.0e+0 + (((__s1 + 1.0e+0) + __s2) * __power4) / (std::sqrt (__mu) * __mu)>>;
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_rj(_Tp, _Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __min = 1.17549435082228750796873653722224567781866555677208752151e-38;
  const float __lolim = 3.888031931999214041439927314058877527713775634765625e-13;

  <<cleanup_point   const float __min = 1.17549435082228750796873653722224567781866555677208752151e-38;>>;
  <<cleanup_point   const float __lolim = 3.888031931999214041439927314058877527713775634765625e-13;>>;
  {
    if ((__x < 0.0 || __y < 0.0) || __z < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Argument less than zero in __ellint_rj.") >>>>>;
      }
    else
      {
        {
          {
            if (((__x + __y < 3.888031931999214041439927314058877527713775634765625e-13 || __x + __z < 3.888031931999214041439927314058877527713775634765625e-13) || __y + __z < 3.888031931999214041439927314058877527713775634765625e-13) || __p < 3.888031931999214041439927314058877527713775634765625e-13)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Argument too small in __ellint_rj") >>>>>;
              }
            else
              {
                {
                  const float __c0 = 2.5e-1;
                  const float __c1 = 2.1428571641445159912109375e-1;
                  const float __c2 = 3.333333432674407958984375e-1;
                  const float __c3 = 1.3636364042758941650390625e-1;
                  const float __c4 = 1.15384615957736968994140625e-1;
                  float __xn = __x;
                  float __yn = __y;
                  float __zn = __z;
                  float __pn = __p;
                  float __sigma = 0.0;
                  float __power4 = 1.0e+0;
                  const float __eps = 1.1920928955078125e-7;
                  const float __errtol = 4.960627853870391845703125e-2;
                  float __mu;
                  float __xndev;
                  float __yndev;
                  float __zndev;
                  float __pndev;
                  const unsigned int __max_iter = 100;
                  float __ea = (__yndev + __zndev) * __xndev + __yndev * __zndev;
                  float __eb = (__xndev * __yndev) * __zndev;
                  float __ec = __pndev * __pndev;
                  float __e2 = __ea - __ec * 3.0e+0;
                  float __e3 = (__pndev * 2.0e+0) * (__ea - __ec) + __eb;
                  float __s1 = (((__e2 * 4.09090936183929443359375e-1) * 2.5e-1 - 2.1428571641445159912109375e-1) - (__e3 * 3.4615385532379150390625e-1) * 5.0e-1) * __e2 + 1.0e+0;
                  float __s2 = ((__pndev * 1.15384615957736968994140625e-1 - 2.727272808551788330078125e-1) * __pndev + 1.6666667163372039794921875e-1) * __eb;
                  float __s3 = (__pndev * __ea) * (3.333333432674407958984375e-1 - __pndev * 1.3636364042758941650390625e-1) - (__pndev * 3.333333432674407958984375e-1) * __ec;

                  <<cleanup_point                   const float __c0 = 2.5e-1;>>;
                  <<cleanup_point                   const float __c1 = 2.1428571641445159912109375e-1;>>;
                  <<cleanup_point                   const float __c2 = 3.333333432674407958984375e-1;>>;
                  <<cleanup_point                   const float __c3 = 1.3636364042758941650390625e-1;>>;
                  <<cleanup_point                   const float __c4 = 1.15384615957736968994140625e-1;>>;
                                    float __xn = __x;
                                    float __yn = __y;
                                    float __zn = __z;
                                    float __pn = __p;
                  <<cleanup_point                   float __sigma = 0.0;>>;
                  <<cleanup_point                   float __power4 = 1.0e+0;>>;
                  <<cleanup_point                   const float __eps = 1.1920928955078125e-7;>>;
                  <<cleanup_point                   const float __errtol = 4.960627853870391845703125e-2;>>;
                                    float __mu;
                                    float __xndev;
                                    float __yndev;
                                    float __zndev;
                                    float __pndev;
                  <<cleanup_point                   const unsigned int __max_iter = 100;>>;
                  {
                    unsigned int __iter = 0;

                    <<cleanup_point                     unsigned int __iter = 0;>>;
                    goto <D.90898>;
                    <D.90897>:;
                    {
                      float __epsilon;
                      const float __xnroot;
                      const float __ynroot;
                      const float __znroot;
                      const float __lambda = ((float) __ynroot + (float) __znroot) * (float) __xnroot + (float) __ynroot * (float) __znroot;
                      const float __alpha1 = (((float) __xnroot + (float) __ynroot) + (float) __znroot) * __pn + ((float) __xnroot * (float) __ynroot) * (float) __znroot;
                      const float __alpha2 = (float) __alpha1 * (float) __alpha1;
                      const float __beta = ((__pn + (float) __lambda) * __pn) * (__pn + (float) __lambda);

                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__mu = (((__xn + __yn) + __zn) + __pn * 2.0e+0) / 5.0e+0) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xndev = (__mu - __xn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yndev = (__mu - __yn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zndev = (__mu - __zn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pndev = (__mu - __pn) / __mu) >>>>>;
                                            float __epsilon;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (float) *std::max<float> ((const float &) &TARGET_EXPR <D.90872, std::abs (__xndev)>, (const float &) &TARGET_EXPR <D.90873, std::abs (__yndev)>)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (float) *std::max<float> ((const float &) &__epsilon, (const float &) &TARGET_EXPR <D.90874, std::abs (__zndev)>)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (float) *std::max<float> ((const float &) &__epsilon, (const float &) &TARGET_EXPR <D.90875, std::abs (__pndev)>)) >>>>>;
                      if (__epsilon < 4.960627853870391845703125e-2) goto <D.90895>;
                                            const float __xnroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xnroot = std::sqrt (__xn)) >>>>>;
                                            const float __ynroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__ynroot = std::sqrt (__yn)) >>>>>;
                                            const float __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__znroot = std::sqrt (__zn)) >>>>>;
                                            const float __lambda = ((float) __ynroot + (float) __znroot) * (float) __xnroot + (float) __ynroot * (float) __znroot;
                                            const float __alpha1 = (((float) __xnroot + (float) __ynroot) + (float) __znroot) * __pn + ((float) __xnroot * (float) __ynroot) * (float) __znroot;
                                            const float __alpha2 = (float) __alpha1 * (float) __alpha1;
                                            const float __beta = ((__pn + (float) __lambda) * __pn) * (__pn + (float) __lambda);
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__sigma = TARGET_EXPR <D.90886, std::__detail::__ellint_rc<float> ((float) __alpha2, (float) __beta) * __power4>;, __sigma + D.90886;) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__power4 = __power4 * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xn = (__xn + (float) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yn = (__yn + (float) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zn = (__zn + (float) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pn = (__pn + (float) __lambda) * 2.5e-1) >>>>>;
                    }
                    <<cleanup_point (void)  ++__iter>>;
                    <D.90898>:;
                    if (__iter <= 99) goto <D.90897>; else goto <D.90895>;
                    <D.90895>:;
                  }
                                    float __ea = (__yndev + __zndev) * __xndev + __yndev * __zndev;
                                    float __eb = (__xndev * __yndev) * __zndev;
                                    float __ec = __pndev * __pndev;
                                    float __e2 = __ea - __ec * 3.0e+0;
                                    float __e3 = (__pndev * 2.0e+0) * (__ea - __ec) + __eb;
                                    float __s1 = (((__e2 * 4.09090936183929443359375e-1) * 2.5e-1 - 2.1428571641445159912109375e-1) - (__e3 * 3.4615385532379150390625e-1) * 5.0e-1) * __e2 + 1.0e+0;
                                    float __s2 = ((__pndev * 1.15384615957736968994140625e-1 - 2.727272808551788330078125e-1) * __pndev + 1.6666667163372039794921875e-1) * __eb;
                                    float __s3 = (__pndev * __ea) * (3.333333432674407958984375e-1 - __pndev * 1.3636364042758941650390625e-1) - (__pndev * 3.333333432674407958984375e-1) * __ec;
                  <<cleanup_point return <retval> = __sigma * 3.0e+0 + (((__s1 + __s2) + __s3) * __power4) / (std::sqrt (__mu) * __mu)>>;
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_rj(_Tp, _Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __min = 3.36210314311209350626267781732175260259807934484647124011e-4932;
  const long double __lolim = 2.56169259178330866951846333088682286707711400264182402737e-1644;

  <<cleanup_point   const long double __min = 3.36210314311209350626267781732175260259807934484647124011e-4932;>>;
  <<cleanup_point   const long double __lolim = 2.56169259178330866951846333088682286707711400264182402737e-1644;>>;
  {
    if ((__x < 0.0 || __y < 0.0) || __z < 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Argument less than zero in __ellint_rj.") >>>>>;
      }
    else
      {
        {
          {
            if (((__x + __y < 2.56169259178330866951846333088682286707711400264182402737e-1644 || __x + __z < 2.56169259178330866951846333088682286707711400264182402737e-1644) || __y + __z < 2.56169259178330866951846333088682286707711400264182402737e-1644) || __p < 2.56169259178330866951846333088682286707711400264182402737e-1644)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  std::__throw_domain_error ((const char *) "Argument too small in __ellint_rj") >>>>>;
              }
            else
              {
                {
                  const long double __c0 = 2.5e-1;
                  const long double __c1 = 2.14285714285714285718157864901733944407169474288821220398e-1;
                  const long double __c2 = 3.33333333333333333342368351437379203616728773340582847595e-1;
                  const long double __c3 = 1.36363636363636363640059780133473310570479952730238437653e-1;
                  const long double __c4 = 1.15384615384615384616948368518007939087510749232023954391e-1;
                  long double __xn = __x;
                  long double __yn = __y;
                  long double __zn = __z;
                  long double __pn = __p;
                  long double __sigma = 0.0;
                  long double __power4 = 1.0e+0;
                  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
                  const long double __errtol = 4.88281249999999999894120881593212457616459687415044754744e-4;
                  long double __mu;
                  long double __xndev;
                  long double __yndev;
                  long double __zndev;
                  long double __pndev;
                  const unsigned int __max_iter = 100;
                  long double __ea = (__yndev + __zndev) * __xndev + __yndev * __zndev;
                  long double __eb = (__xndev * __yndev) * __zndev;
                  long double __ec = __pndev * __pndev;
                  long double __e2 = __ea - __ec * 3.0e+0;
                  long double __e3 = (__pndev * 2.0e+0) * (__ea - __ec) + __eb;
                  long double __s1 = (((__e2 * 4.09090909090909090933731867556488737136533018201589584351e-1) * 2.5e-1 - 2.14285714285714285718157864901733944407169474288821220398e-1) - (__e3 * 3.46153846153846153844068841975989414549985667690634727478e-1) * 5.0e-1) * __e2 + 1.0e+0;
                  long double __s2 = ((__pndev * 1.15384615384615384616948368518007939087510749232023954391e-1 - 2.72727272727272727280119560266946621140959905460476875305e-1) * __pndev + 1.66666666666666666671184175718689601808364386670291423798e-1) * __eb;
                  long double __s3 = (__pndev * __ea) * (3.33333333333333333342368351437379203616728773340582847595e-1 - __pndev * 1.36363636363636363640059780133473310570479952730238437653e-1) - (__pndev * 3.33333333333333333342368351437379203616728773340582847595e-1) * __ec;

                  <<cleanup_point                   const long double __c0 = 2.5e-1;>>;
                  <<cleanup_point                   const long double __c1 = 2.14285714285714285718157864901733944407169474288821220398e-1;>>;
                  <<cleanup_point                   const long double __c2 = 3.33333333333333333342368351437379203616728773340582847595e-1;>>;
                  <<cleanup_point                   const long double __c3 = 1.36363636363636363640059780133473310570479952730238437653e-1;>>;
                  <<cleanup_point                   const long double __c4 = 1.15384615384615384616948368518007939087510749232023954391e-1;>>;
                                    long double __xn = __x;
                                    long double __yn = __y;
                                    long double __zn = __z;
                                    long double __pn = __p;
                  <<cleanup_point                   long double __sigma = 0.0;>>;
                  <<cleanup_point                   long double __power4 = 1.0e+0;>>;
                  <<cleanup_point                   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
                  <<cleanup_point                   const long double __errtol = 4.88281249999999999894120881593212457616459687415044754744e-4;>>;
                                    long double __mu;
                                    long double __xndev;
                                    long double __yndev;
                                    long double __zndev;
                                    long double __pndev;
                  <<cleanup_point                   const unsigned int __max_iter = 100;>>;
                  {
                    unsigned int __iter = 0;

                    <<cleanup_point                     unsigned int __iter = 0;>>;
                    goto <D.90953>;
                    <D.90952>:;
                    {
                      long double __epsilon;
                      const long double __xnroot;
                      const long double __ynroot;
                      const long double __znroot;
                      const long double __lambda = ((long double) __ynroot + (long double) __znroot) * (long double) __xnroot + (long double) __ynroot * (long double) __znroot;
                      const long double __alpha1 = (((long double) __xnroot + (long double) __ynroot) + (long double) __znroot) * __pn + ((long double) __xnroot * (long double) __ynroot) * (long double) __znroot;
                      const long double __alpha2 = (long double) __alpha1 * (long double) __alpha1;
                      const long double __beta = ((__pn + (long double) __lambda) * __pn) * (__pn + (long double) __lambda);

                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__mu = (((__xn + __yn) + __zn) + __pn * 2.0e+0) / 5.0e+0) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xndev = (__mu - __xn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yndev = (__mu - __yn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zndev = (__mu - __zn) / __mu) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pndev = (__mu - __pn) / __mu) >>>>>;
                                            long double __epsilon;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (long double) *std::max<long double> ((const long double &) &TARGET_EXPR <D.90927, std::abs (__xndev)>, (const long double &) &TARGET_EXPR <D.90928, std::abs (__yndev)>)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (long double) *std::max<long double> ((const long double &) &__epsilon, (const long double &) &TARGET_EXPR <D.90929, std::abs (__zndev)>)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__epsilon = (long double) *std::max<long double> ((const long double &) &__epsilon, (const long double &) &TARGET_EXPR <D.90930, std::abs (__pndev)>)) >>>>>;
                      if (__epsilon < 4.88281249999999999894120881593212457616459687415044754744e-4) goto <D.90950>;
                                            const long double __xnroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xnroot = std::sqrt (__xn)) >>>>>;
                                            const long double __ynroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__ynroot = std::sqrt (__yn)) >>>>>;
                                            const long double __znroot;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__znroot = std::sqrt (__zn)) >>>>>;
                                            const long double __lambda = ((long double) __ynroot + (long double) __znroot) * (long double) __xnroot + (long double) __ynroot * (long double) __znroot;
                                            const long double __alpha1 = (((long double) __xnroot + (long double) __ynroot) + (long double) __znroot) * __pn + ((long double) __xnroot * (long double) __ynroot) * (long double) __znroot;
                                            const long double __alpha2 = (long double) __alpha1 * (long double) __alpha1;
                                            const long double __beta = ((__pn + (long double) __lambda) * __pn) * (__pn + (long double) __lambda);
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__sigma = TARGET_EXPR <D.90941, std::__detail::__ellint_rc<long double> ((long double) __alpha2, (long double) __beta) * __power4>;, __sigma + D.90941;) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__power4 = __power4 * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__xn = (__xn + (long double) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__yn = (__yn + (long double) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__zn = (__zn + (long double) __lambda) * 2.5e-1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pn = (__pn + (long double) __lambda) * 2.5e-1) >>>>>;
                    }
                    <<cleanup_point (void)  ++__iter>>;
                    <D.90953>:;
                    if (__iter <= 99) goto <D.90952>; else goto <D.90950>;
                    <D.90950>:;
                  }
                                    long double __ea = (__yndev + __zndev) * __xndev + __yndev * __zndev;
                                    long double __eb = (__xndev * __yndev) * __zndev;
                                    long double __ec = __pndev * __pndev;
                                    long double __e2 = __ea - __ec * 3.0e+0;
                                    long double __e3 = (__pndev * 2.0e+0) * (__ea - __ec) + __eb;
                                    long double __s1 = (((__e2 * 4.09090909090909090933731867556488737136533018201589584351e-1) * 2.5e-1 - 2.14285714285714285718157864901733944407169474288821220398e-1) - (__e3 * 3.46153846153846153844068841975989414549985667690634727478e-1) * 5.0e-1) * __e2 + 1.0e+0;
                                    long double __s2 = ((__pndev * 1.15384615384615384616948368518007939087510749232023954391e-1 - 2.72727272727272727280119560266946621140959905460476875305e-1) * __pndev + 1.66666666666666666671184175718689601808364386670291423798e-1) * __eb;
                                    long double __s3 = (__pndev * __ea) * (3.33333333333333333342368351437379203616728773340582847595e-1 - __pndev * 1.36363636363636363640059780133473310570479952730238437653e-1) - (__pndev * 3.33333333333333333342368351437379203616728773340582847595e-1) * __ec;
                  <<cleanup_point return <retval> = __sigma * 3.0e+0 + (((__s1 + __s2) + __s3) * __power4) / (std::sqrt (__mu) * __mu)>>;
                }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__cyl_bessel_ij_series(_Tp, _Tp, _Tp, unsigned int) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __x2 = __x * 5.0e-1;
  float __fact;
  const float __xx4 = (__sgn * (float) __x2) * (float) __x2;
  float __Jn = 1.0e+0;
  float __term = 1.0e+0;

  if (__x == 0.0)
    {
      return <retval> = __nu == 0.0 ? 1.0e+0 : 0.0;
    }
    const float __x2 = __x * 5.0e-1;
    float __fact;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = std::log ((float) __x2) * __nu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = TARGET_EXPR <D.90961, std::lgamma (__nu + 1.0e+0)>;, __fact - D.90961;) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = std::exp (__fact)) >>>>>;
    const float __xx4 = (__sgn * (float) __x2) * (float) __x2;
  <<cleanup_point   float __Jn = 1.0e+0;>>;
  <<cleanup_point   float __term = 1.0e+0;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.90969>;
    <D.90968>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__term = ((float) __xx4 / ((float) __i * ((float) __i + __nu))) * __term) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Jn = __Jn + __term) >>>>>;
    if (<<cleanup_point std::abs (__term / __Jn) < 1.1920928955078125e-7>>) goto <D.90966>;
    <<cleanup_point (void)  ++__i>>;
    <D.90969>:;
    if (__i < __max_iter) goto <D.90968>; else goto <D.90966>;
    <D.90966>:;
  }
  return <retval> = __fact * __Jn;
}


;; Function void std::__detail::__bessel_ik(_Tp, _Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __eps = 1.1920928955078125e-7;
  const float __fp_min = 1.1920928955078125e-6;
  const int __max_iter = 15000;
  const float __x_min = 2.0e+0;
  const int __nl = (int) (__nu + 5.0e-1);
  const float __mu = __nu - (float) __nl;
  const float __mu2 = (float) __mu * (float) __mu;
  const float __xi = 1.0e+0 / __x;
  const float __xi2 = (float) __xi * 2.0e+0;
  float __h = __nu * (float) __xi;
  float __b = (float) __xi2 * __nu;
  float __d = 0.0;
  float __c = __h;
  int __i;
  float __Inul = 1.1920928955078125e-6;
  float __Ipnul = __h * __Inul;
  float __Inul1 = __Inul;
  float __Ipnu1 = __Ipnul;
  float __fact = __nu * (float) __xi;
  float __f = __Ipnul / __Inul;
  float __Kmu;
  float __Knu1;
  float __Kpmu = ((float) __mu * (float) __xi) * __Kmu - __Knu1;
  float __Inumu = (float) __xi / (__f * __Kmu - __Kpmu);

  if (__x == 0.0)
    {
      if (__nu == 0.0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__Inu = 1.0e+0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__Ipnu = 0.0) >>>>>;
        }
      else
        {
          if (__nu == 1.0e+0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Inu = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Ipnu = 5.0e-1) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Inu = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Ipnu = 0.0) >>>>>;
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*__Knu =  Inf) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*__Kpnu =  -Inf) >>>>>;
      return;
    }
  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   const float __fp_min = 1.1920928955078125e-6;>>;
  <<cleanup_point   const int __max_iter = 15000;>>;
  <<cleanup_point   const float __x_min = 2.0e+0;>>;
    const int __nl = (int) (__nu + 5.0e-1);
    const float __mu = __nu - (float) __nl;
    const float __mu2 = (float) __mu * (float) __mu;
    const float __xi = 1.0e+0 / __x;
    const float __xi2 = (float) __xi * 2.0e+0;
    float __h = __nu * (float) __xi;
  if (__h < 1.1920928955078125e-6)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = 1.1920928955078125e-6) >>>>>;
    }
    float __b = (float) __xi2 * __nu;
  <<cleanup_point   float __d = 0.0;>>;
    float __c = __h;
    int __i;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__i = 1) >>>>>;
    goto <D.91046>;
    <D.91045>:;
    {
      const float __del = __c * __d;

      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__b = __b + (float) __xi2) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__d = 1.0e+0 / (__b + __d)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__c = 1.0e+0 / __c + __b) >>>>>;
            const float __del = __c * __d;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = __h * (float) __del) >>>>>;
      if (<<cleanup_point std::abs ((float) __del - 1.0e+0) < 1.1920928955078125e-7>>) goto <D.91043>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91046>:;
    if (__i <= 15000) goto <D.91045>; else goto <D.91043>;
    <D.91043>:;
  }
  if (__i > 15000)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Argument x too large in __bessel_ik; try asymptotic expansion.") >>>>>;
    }
  <<cleanup_point   float __Inul = 1.1920928955078125e-6;>>;
    float __Ipnul = __h * __Inul;
    float __Inul1 = __Inul;
    float __Ipnu1 = __Ipnul;
    float __fact = __nu * (float) __xi;
  {
    int __l = (int) __nl;

        int __l = (int) __nl;
    goto <D.91050>;
    <D.91049>:;
    {
      const float __Inutemp = __fact * __Inul + __Ipnul;

            const float __Inutemp = __fact * __Inul + __Ipnul;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__fact = __fact - (float) __xi) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Ipnul = __fact * (float) __Inutemp + __Inul) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Inul = (float) __Inutemp) >>>>>;
    }
    <<cleanup_point (void)  --__l>>;
    <D.91050>:;
    if (__l > 0) goto <D.91049>; else goto <D.91047>;
    <D.91047>:;
  }
    float __f = __Ipnul / __Inul;
    float __Kmu;
    float __Knu1;
  {
    if (__x < 2.0e+0)
      {
        {
          const float __x2 = __x * 5.0e-1;
          const float __pimu;
          const float __fact;
          float __d;
          float __e = (float) __mu * __d;
          const float __fact2;
          float __gam1;
          float __gam2;
          float __gampl;
          float __gammi;
          float __ff;
          float __sum = __ff;
          float __p = __e / (__gampl * 2.0e+0);
          float __q = 1.0e+0 / ((__e * 2.0e+0) * __gammi);
          float __c = 1.0e+0;
          float __sum1 = __p;
          int __i;

                    const float __x2 = __x * 5.0e-1;
                    const float __pimu;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__pimu = std::__detail::__numeric_constants<float>::__pi () * (float) __mu) >>>>>;
                    const float __fact;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact = std::abs ((float) __pimu) < 1.1920928955078125e-7 ? 1.0e+0 : (float) __pimu / std::sin ((float) __pimu)) >>>>>;
                    float __d;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = -std::log ((float) __x2)) >>>>>;
                    float __e = (float) __mu * __d;
                    const float __fact2;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact2 = std::abs (__e) < 1.1920928955078125e-7 ? 1.0e+0 : std::sinh (__e) / __e) >>>>>;
                    float __gam1;
                    float __gam2;
                    float __gampl;
                    float __gammi;
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__detail::__gamma_temme<float> ((float) __mu, (float &) &__gam1, (float &) &__gam2, (float &) &__gampl, (float &) &__gammi) >>>>>;
                    float __ff;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ff = (std::cosh (__e) * __gam1 + (__gam2 * (float) __fact2) * __d) * (float) __fact) >>>>>;
                    float __sum = __ff;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__e = std::exp (__e)) >>>>>;
                    float __p = __e / (__gampl * 2.0e+0);
                    float __q = 1.0e+0 / ((__e * 2.0e+0) * __gammi);
          <<cleanup_point           float __c = 1.0e+0;>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = (float) __x2 * (float) __x2) >>>>>;
                    float __sum1 = __p;
                    int __i;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__i = 1) >>>>>;
            goto <D.91054>;
            <D.91053>:;
            {
              const float __del = __c * __ff;
              const float __del1 = (__p - (float) __i * __ff) * __c;

              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ff = (((float) __i * __ff + __p) + __q) / ((float) (__i * __i) - (float) __mu2)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__c = (__d / (float) __i) * __c) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__p = __p / ((float) __i - (float) __mu)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q = __q / ((float) __i + (float) __mu)) >>>>>;
                            const float __del = __c * __ff;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sum = __sum + (float) __del) >>>>>;
                            const float __del1 = (__p - (float) __i * __ff) * __c;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sum1 = __sum1 + (float) __del1) >>>>>;
              if (<<cleanup_point std::abs ((float) __del) < std::abs (__sum) * 1.1920928955078125e-7>>) goto <D.91051>;
            }
            <<cleanup_point (void)  ++__i>>;
            <D.91054>:;
            if (__i <= 15000) goto <D.91053>; else goto <D.91051>;
            <D.91051>:;
          }
          if (__i > 15000)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_runtime_error ((const char *) "Bessel k series failed to converge in __bessel_ik.") >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Kmu = __sum) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Knu1 = __sum1 * (float) __xi2) >>>>>;
        }
      }
    else
      {
        {
          float __b = (__x + 1.0e+0) * 2.0e+0;
          float __d = 1.0e+0 / __b;
          float __delh = __d;
          float __h = __delh;
          float __q1 = 0.0;
          float __q2 = 1.0e+0;
          float __a1 = 2.5e-1 - (float) __mu2;
          float __q;
          float __a = -NON_LVALUE_EXPR <__a1>;
          float __s = __q * __delh + 1.0e+0;
          int __i;

                    float __b = (__x + 1.0e+0) * 2.0e+0;
                    float __d = 1.0e+0 / __b;
                    float __delh = __d;
                    float __h = __delh;
          <<cleanup_point           float __q1 = 0.0;>>;
          <<cleanup_point           float __q2 = 1.0e+0;>>;
                    float __a1 = 2.5e-1 - (float) __mu2;
                    float __q;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__q = __c = __a1) >>>>>;
                    float __a = -NON_LVALUE_EXPR <__a1>;
                    float __s = __q * __delh + 1.0e+0;
                    int __i;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__i = 2) >>>>>;
            goto <D.91058>;
            <D.91057>:;
            {
              const float __qnew = (__q1 - __b * __q2) / __a;
              const float __dels = __q * __delh;

              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__a = __a - (float) ((__i + -1) * 2)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__c = (-NON_LVALUE_EXPR <__a> * __c) / (float) __i) >>>>>;
                            const float __qnew = (__q1 - __b * __q2) / __a;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q1 = __q2) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q2 = (float) __qnew) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q = __c * (float) __qnew + __q) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__b = __b + 2.0e+0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d = 1.0e+0 / (__a * __d + __b)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__delh = (__b * __d - 1.0e+0) * __delh) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__h = __h + __delh) >>>>>;
                            const float __dels = __q * __delh;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__s = __s + (float) __dels) >>>>>;
              if (<<cleanup_point std::abs ((float) __dels / __s) < 1.1920928955078125e-7>>) goto <D.91055>;
            }
            <<cleanup_point (void)  ++__i>>;
            <D.91058>:;
            if (__i <= 15000) goto <D.91057>; else goto <D.91055>;
            <D.91055>:;
          }
          if (__i > 15000)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_runtime_error ((const char *) "Steed\'s method failed in __bessel_ik.") >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__h = __a1 * __h) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Kmu = (std::sqrt (std::__detail::__numeric_constants<float>::__pi () / (__x * 2.0e+0)) * std::exp (-NON_LVALUE_EXPR <__x>)) / __s) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Knu1 = (((((float) __mu + __x) + 5.0e-1) - __h) * __Kmu) * (float) __xi) >>>>>;
        }
      }
  }
    float __Kpmu = ((float) __mu * (float) __xi) * __Kmu - __Knu1;
    float __Inumu = (float) __xi / (__f * __Kmu - __Kpmu);
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Inu = (__Inumu * __Inul1) / __Inul) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Ipnu = (__Inumu * __Ipnu1) / __Inul) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__i = 1) >>>>>;
    goto <D.91062>;
    <D.91061>:;
    {
      const float __Knutemp = (((float) __i + (float) __mu) * (float) __xi2) * __Knu1 + __Kmu;

            const float __Knutemp = (((float) __i + (float) __mu) * (float) __xi2) * __Knu1 + __Kmu;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Kmu = __Knu1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Knu1 = (float) __Knutemp) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91062>:;
    if (__i <= (int) __nl) goto <D.91061>; else goto <D.91059>;
    <D.91059>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Knu = __Kmu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Kpnu = (__nu * (float) __xi) * __Kmu - __Knu1) >>>>>;
  return;
}


;; Function _Tp std::__detail::__cyl_bessel_ij_series(_Tp, _Tp, _Tp, unsigned int) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __x2 = __x * 5.0e-1;
  long double __fact;
  const long double __xx4 = (__sgn * (long double) __x2) * (long double) __x2;
  long double __Jn = 1.0e+0;
  long double __term = 1.0e+0;

  if (__x == 0.0)
    {
      return <retval> = __nu == 0.0 ? 1.0e+0 : 0.0;
    }
    const long double __x2 = __x * 5.0e-1;
    long double __fact;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = std::log ((long double) __x2) * __nu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = TARGET_EXPR <D.91070, std::lgamma (__nu + 1.0e+0)>;, __fact - D.91070;) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = std::exp (__fact)) >>>>>;
    const long double __xx4 = (__sgn * (long double) __x2) * (long double) __x2;
  <<cleanup_point   long double __Jn = 1.0e+0;>>;
  <<cleanup_point   long double __term = 1.0e+0;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.91078>;
    <D.91077>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__term = ((long double) __xx4 / ((long double) __i * ((long double) __i + __nu))) * __term) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Jn = __Jn + __term) >>>>>;
    if (<<cleanup_point std::abs (__term / __Jn) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91075>;
    <<cleanup_point (void)  ++__i>>;
    <D.91078>:;
    if (__i < __max_iter) goto <D.91077>; else goto <D.91075>;
    <D.91075>:;
  }
  return <retval> = __fact * __Jn;
}


;; Function void std::__detail::__bessel_ik(_Tp, _Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __fp_min = 1.08420217248550443400745280086994171142578125e-18;
  const int __max_iter = 15000;
  const long double __x_min = 2.0e+0;
  const int __nl = (int) (__nu + 5.0e-1);
  const long double __mu = __nu - (long double) __nl;
  const long double __mu2 = (long double) __mu * (long double) __mu;
  const long double __xi = 1.0e+0 / __x;
  const long double __xi2 = (long double) __xi * 2.0e+0;
  long double __h = __nu * (long double) __xi;
  long double __b = (long double) __xi2 * __nu;
  long double __d = 0.0;
  long double __c = __h;
  int __i;
  long double __Inul = 1.08420217248550443400745280086994171142578125e-18;
  long double __Ipnul = __h * __Inul;
  long double __Inul1 = __Inul;
  long double __Ipnu1 = __Ipnul;
  long double __fact = __nu * (long double) __xi;
  long double __f = __Ipnul / __Inul;
  long double __Kmu;
  long double __Knu1;
  long double __Kpmu = ((long double) __mu * (long double) __xi) * __Kmu - __Knu1;
  long double __Inumu = (long double) __xi / (__f * __Kmu - __Kpmu);

  if (__x == 0.0)
    {
      if (__nu == 0.0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__Inu = 1.0e+0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__Ipnu = 0.0) >>>>>;
        }
      else
        {
          if (__nu == 1.0e+0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Inu = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Ipnu = 5.0e-1) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Inu = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Ipnu = 0.0) >>>>>;
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*__Knu =  Inf) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*__Kpnu =  -Inf) >>>>>;
      return;
    }
  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   const long double __fp_min = 1.08420217248550443400745280086994171142578125e-18;>>;
  <<cleanup_point   const int __max_iter = 15000;>>;
  <<cleanup_point   const long double __x_min = 2.0e+0;>>;
    const int __nl = (int) (__nu + 5.0e-1);
    const long double __mu = __nu - (long double) __nl;
    const long double __mu2 = (long double) __mu * (long double) __mu;
    const long double __xi = 1.0e+0 / __x;
    const long double __xi2 = (long double) __xi * 2.0e+0;
    long double __h = __nu * (long double) __xi;
  if (__h < 1.08420217248550443400745280086994171142578125e-18)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = 1.08420217248550443400745280086994171142578125e-18) >>>>>;
    }
    long double __b = (long double) __xi2 * __nu;
  <<cleanup_point   long double __d = 0.0;>>;
    long double __c = __h;
    int __i;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__i = 1) >>>>>;
    goto <D.91155>;
    <D.91154>:;
    {
      const long double __del = __c * __d;

      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__b = __b + (long double) __xi2) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__d = 1.0e+0 / (__b + __d)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__c = 1.0e+0 / __c + __b) >>>>>;
            const long double __del = __c * __d;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = __h * (long double) __del) >>>>>;
      if (<<cleanup_point std::abs ((long double) __del - 1.0e+0) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91152>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91155>:;
    if (__i <= 15000) goto <D.91154>; else goto <D.91152>;
    <D.91152>:;
  }
  if (__i > 15000)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Argument x too large in __bessel_ik; try asymptotic expansion.") >>>>>;
    }
  <<cleanup_point   long double __Inul = 1.08420217248550443400745280086994171142578125e-18;>>;
    long double __Ipnul = __h * __Inul;
    long double __Inul1 = __Inul;
    long double __Ipnu1 = __Ipnul;
    long double __fact = __nu * (long double) __xi;
  {
    int __l = (int) __nl;

        int __l = (int) __nl;
    goto <D.91159>;
    <D.91158>:;
    {
      const long double __Inutemp = __fact * __Inul + __Ipnul;

            const long double __Inutemp = __fact * __Inul + __Ipnul;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__fact = __fact - (long double) __xi) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Ipnul = __fact * (long double) __Inutemp + __Inul) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Inul = (long double) __Inutemp) >>>>>;
    }
    <<cleanup_point (void)  --__l>>;
    <D.91159>:;
    if (__l > 0) goto <D.91158>; else goto <D.91156>;
    <D.91156>:;
  }
    long double __f = __Ipnul / __Inul;
    long double __Kmu;
    long double __Knu1;
  {
    if (__x < 2.0e+0)
      {
        {
          const long double __x2 = __x * 5.0e-1;
          const long double __pimu;
          const long double __fact;
          long double __d;
          long double __e = (long double) __mu * __d;
          const long double __fact2;
          long double __gam1;
          long double __gam2;
          long double __gampl;
          long double __gammi;
          long double __ff;
          long double __sum = __ff;
          long double __p = __e / (__gampl * 2.0e+0);
          long double __q = 1.0e+0 / ((__e * 2.0e+0) * __gammi);
          long double __c = 1.0e+0;
          long double __sum1 = __p;
          int __i;

                    const long double __x2 = __x * 5.0e-1;
                    const long double __pimu;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__pimu = std::__detail::__numeric_constants<long double>::__pi () * (long double) __mu) >>>>>;
                    const long double __fact;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact = std::abs ((long double) __pimu) < 1.08420217248550443400745280086994171142578125e-19 ? 1.0e+0 : (long double) __pimu / std::sin ((long double) __pimu)) >>>>>;
                    long double __d;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = -std::log ((long double) __x2)) >>>>>;
                    long double __e = (long double) __mu * __d;
                    const long double __fact2;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact2 = std::abs (__e) < 1.08420217248550443400745280086994171142578125e-19 ? 1.0e+0 : std::sinh (__e) / __e) >>>>>;
                    long double __gam1;
                    long double __gam2;
                    long double __gampl;
                    long double __gammi;
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__detail::__gamma_temme<long double> ((long double) __mu, (long double &) &__gam1, (long double &) &__gam2, (long double &) &__gampl, (long double &) &__gammi) >>>>>;
                    long double __ff;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ff = (std::cosh (__e) * __gam1 + (__gam2 * (long double) __fact2) * __d) * (long double) __fact) >>>>>;
                    long double __sum = __ff;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__e = std::exp (__e)) >>>>>;
                    long double __p = __e / (__gampl * 2.0e+0);
                    long double __q = 1.0e+0 / ((__e * 2.0e+0) * __gammi);
          <<cleanup_point           long double __c = 1.0e+0;>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = (long double) __x2 * (long double) __x2) >>>>>;
                    long double __sum1 = __p;
                    int __i;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__i = 1) >>>>>;
            goto <D.91163>;
            <D.91162>:;
            {
              const long double __del = __c * __ff;
              const long double __del1 = (__p - (long double) __i * __ff) * __c;

              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ff = (((long double) __i * __ff + __p) + __q) / ((long double) (__i * __i) - (long double) __mu2)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__c = (__d / (long double) __i) * __c) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__p = __p / ((long double) __i - (long double) __mu)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q = __q / ((long double) __i + (long double) __mu)) >>>>>;
                            const long double __del = __c * __ff;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sum = __sum + (long double) __del) >>>>>;
                            const long double __del1 = (__p - (long double) __i * __ff) * __c;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sum1 = __sum1 + (long double) __del1) >>>>>;
              if (<<cleanup_point std::abs ((long double) __del) < std::abs (__sum) * 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91160>;
            }
            <<cleanup_point (void)  ++__i>>;
            <D.91163>:;
            if (__i <= 15000) goto <D.91162>; else goto <D.91160>;
            <D.91160>:;
          }
          if (__i > 15000)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_runtime_error ((const char *) "Bessel k series failed to converge in __bessel_ik.") >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Kmu = __sum) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Knu1 = __sum1 * (long double) __xi2) >>>>>;
        }
      }
    else
      {
        {
          long double __b = (__x + 1.0e+0) * 2.0e+0;
          long double __d = 1.0e+0 / __b;
          long double __delh = __d;
          long double __h = __delh;
          long double __q1 = 0.0;
          long double __q2 = 1.0e+0;
          long double __a1 = 2.5e-1 - (long double) __mu2;
          long double __q;
          long double __a = -NON_LVALUE_EXPR <__a1>;
          long double __s = __q * __delh + 1.0e+0;
          int __i;

                    long double __b = (__x + 1.0e+0) * 2.0e+0;
                    long double __d = 1.0e+0 / __b;
                    long double __delh = __d;
                    long double __h = __delh;
          <<cleanup_point           long double __q1 = 0.0;>>;
          <<cleanup_point           long double __q2 = 1.0e+0;>>;
                    long double __a1 = 2.5e-1 - (long double) __mu2;
                    long double __q;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__q = __c = __a1) >>>>>;
                    long double __a = -NON_LVALUE_EXPR <__a1>;
                    long double __s = __q * __delh + 1.0e+0;
                    int __i;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__i = 2) >>>>>;
            goto <D.91167>;
            <D.91166>:;
            {
              const long double __qnew = (__q1 - __b * __q2) / __a;
              const long double __dels = __q * __delh;

              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__a = __a - (long double) ((__i + -1) * 2)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__c = (-NON_LVALUE_EXPR <__a> * __c) / (long double) __i) >>>>>;
                            const long double __qnew = (__q1 - __b * __q2) / __a;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q1 = __q2) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q2 = (long double) __qnew) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q = __c * (long double) __qnew + __q) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__b = __b + 2.0e+0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d = 1.0e+0 / (__a * __d + __b)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__delh = (__b * __d - 1.0e+0) * __delh) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__h = __h + __delh) >>>>>;
                            const long double __dels = __q * __delh;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__s = __s + (long double) __dels) >>>>>;
              if (<<cleanup_point std::abs ((long double) __dels / __s) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91164>;
            }
            <<cleanup_point (void)  ++__i>>;
            <D.91167>:;
            if (__i <= 15000) goto <D.91166>; else goto <D.91164>;
            <D.91164>:;
          }
          if (__i > 15000)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_runtime_error ((const char *) "Steed\'s method failed in __bessel_ik.") >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__h = __a1 * __h) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Kmu = (std::sqrt (std::__detail::__numeric_constants<long double>::__pi () / (__x * 2.0e+0)) * std::exp (-NON_LVALUE_EXPR <__x>)) / __s) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Knu1 = (((((long double) __mu + __x) + 5.0e-1) - __h) * __Kmu) * (long double) __xi) >>>>>;
        }
      }
  }
    long double __Kpmu = ((long double) __mu * (long double) __xi) * __Kmu - __Knu1;
    long double __Inumu = (long double) __xi / (__f * __Kmu - __Kpmu);
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Inu = (__Inumu * __Inul1) / __Inul) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Ipnu = (__Inumu * __Ipnu1) / __Inul) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__i = 1) >>>>>;
    goto <D.91171>;
    <D.91170>:;
    {
      const long double __Knutemp = (((long double) __i + (long double) __mu) * (long double) __xi2) * __Knu1 + __Kmu;

            const long double __Knutemp = (((long double) __i + (long double) __mu) * (long double) __xi2) * __Knu1 + __Kmu;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Kmu = __Knu1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Knu1 = (long double) __Knutemp) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91171>:;
    if (__i <= (int) __nl) goto <D.91170>; else goto <D.91168>;
    <D.91168>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Knu = __Kmu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Kpnu = (__nu * (long double) __xi) * __Kmu - __Knu1) >>>>>;
  return;
}


;; Function void std::__detail::__cyl_bessel_jn_asymp(_Tp, _Tp, _Tp&, _Tp&) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __mu = (__nu * 4.0e+0) * __nu;
  const float __8x = __x * 8.0e+0;
  float __P = 0.0;
  float __Q = 0.0;
  float __k = 0.0;
  float __term = 1.0e+0;
  int __epsP = 0;
  int __epsQ = 0;
  float __eps = 1.1920928955078125e-7;
  const float __chi;
  const float __c;
  const float __s;
  const float __coef;

    const float __mu = (__nu * 4.0e+0) * __nu;
    const float __8x = __x * 8.0e+0;
  <<cleanup_point   float __P = 0.0;>>;
  <<cleanup_point   float __Q = 0.0;>>;
  <<cleanup_point   float __k = 0.0;>>;
  <<cleanup_point   float __term = 1.0e+0;>>;
  <<cleanup_point   int __epsP = 0;>>;
  <<cleanup_point   int __epsQ = 0;>>;
  <<cleanup_point   float __eps = 1.1920928955078125e-7;>>;
  <D.91192>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term = (__k != 0.0 ? -((float) __mu - (__k * 2.0e+0 - 1.0e+0) * (__k * 2.0e+0 - 1.0e+0)) / (__k * (float) __8x) : 1.0e+0) * __term) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__epsP = std::abs (__term) < std::abs (__P) * __eps) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__P = __P + __term) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) __k++  >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term = (((float) __mu - (__k * 2.0e+0 - 1.0e+0) * (__k * 2.0e+0 - 1.0e+0)) / (__k * (float) __8x)) * __term) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__epsQ = std::abs (__term) < std::abs (__Q) * __eps) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__Q = __Q + __term) >>>>>;
  if ((__epsP != 0 && __epsQ != 0) && (double) __k > (double) __nu * 5.0e-1) goto <D.91190>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) __k++  >>>>>;
  if (__k < 1.0e+3) goto <D.91192>; else goto <D.91190>;
  <D.91190>:;
    const float __chi;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__chi = __x - (__nu + 5.0e-1) * std::__detail::__numeric_constants<float>::__pi_2 ()) >>>>>;
    const float __c;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__c = std::cos ((float) __chi)) >>>>>;
    const float __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__s = std::sin ((float) __chi)) >>>>>;
    const float __coef;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__coef = std::sqrt (2.0e+0 / (std::__detail::__numeric_constants<float>::__pi () * __x))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Jnu = ((float) __c * __P - (float) __s * __Q) * (float) __coef) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Nnu = ((float) __s * __P + (float) __c * __Q) * (float) __coef) >>>>>;
  return;
}


;; Function void std::__detail::__bessel_jn(_Tp, _Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __eps = 1.1920928955078125e-7;
  const float __fp_min = 1.08420217248550443400745280086994171142578125e-19;
  const int __max_iter = 15000;
  const float __x_min = 2.0e+0;
  const int __nl;
  const float __mu = __nu - (float) __nl;
  const float __mu2 = (float) __mu * (float) __mu;
  const float __xi = 1.0e+0 / __x;
  const float __xi2 = (float) __xi * 2.0e+0;
  float __w;
  int __isign = 1;
  float __h = __nu * (float) __xi;
  float __b = (float) __xi2 * __nu;
  float __d = 0.0;
  float __c = __h;
  int __i;
  float __Jnul = (float) __isign * 1.08420217248550443400745280086994171142578125e-19;
  float __Jpnul = __h * __Jnul;
  float __Jnul1 = __Jnul;
  float __Jpnu1 = __Jpnul;
  float __fact = __nu * (float) __xi;
  float __f = __Jpnul / __Jnul;
  float __Nmu;
  float __Nnu1;
  float __Npmu;
  float __Jmu;

  if (__x == 0.0)
    {
      if (__nu == 0.0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__Jnu = 1.0e+0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__Jpnu = 0.0) >>>>>;
        }
      else
        {
          if (__nu == 1.0e+0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Jnu = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Jpnu = 5.0e-1) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Jnu = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Jpnu = 0.0) >>>>>;
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*__Nnu =  -Inf) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*__Npnu =  Inf) >>>>>;
      return;
    }
  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   const float __fp_min = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   const int __max_iter = 15000;>>;
  <<cleanup_point   const float __x_min = 2.0e+0;>>;
    const int __nl;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__nl = __x < 2.0e+0 ? (int) (__nu + 5.0e-1) : (int) *std::max<int> ((const int &) &TARGET_EXPR <D.91205, 0>, (const int &) &TARGET_EXPR <D.91206, (int) ((__nu - __x) + 1.5e+0)>)) >>>>>;
    const float __mu = __nu - (float) __nl;
    const float __mu2 = (float) __mu * (float) __mu;
    const float __xi = 1.0e+0 / __x;
    const float __xi2 = (float) __xi * 2.0e+0;
    float __w;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__w = (float) __xi2 / std::__detail::__numeric_constants<float>::__pi ()) >>>>>;
  <<cleanup_point   int __isign = 1;>>;
    float __h = __nu * (float) __xi;
  if (__h < 1.08420217248550443400745280086994171142578125e-19)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = 1.08420217248550443400745280086994171142578125e-19) >>>>>;
    }
    float __b = (float) __xi2 * __nu;
  <<cleanup_point   float __d = 0.0;>>;
    float __c = __h;
    int __i;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__i = 1) >>>>>;
    goto <D.91272>;
    <D.91271>:;
    {
      const float __del = __c * __d;

      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__b = __b + (float) __xi2) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__d = __b - __d) >>>>>;
      if (<<cleanup_point std::abs (__d) < 1.08420217248550443400745280086994171142578125e-19>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = 1.08420217248550443400745280086994171142578125e-19) >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__c = __b - 1.0e+0 / __c) >>>>>;
      if (<<cleanup_point std::abs (__c) < 1.08420217248550443400745280086994171142578125e-19>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__c = 1.08420217248550443400745280086994171142578125e-19) >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__d = 1.0e+0 / __d) >>>>>;
            const float __del = __c * __d;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = __h * (float) __del) >>>>>;
      if (__d < 0.0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__isign = -NON_LVALUE_EXPR <__isign>) >>>>>;
        }
      if (<<cleanup_point std::abs ((float) __del - 1.0e+0) < 1.1920928955078125e-7>>) goto <D.91269>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91272>:;
    if (__i <= 15000) goto <D.91271>; else goto <D.91269>;
    <D.91269>:;
  }
  if (__i > 15000)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Argument x too large in __bessel_jn; try asymptotic expansion.") >>>>>;
    }
    float __Jnul = (float) __isign * 1.08420217248550443400745280086994171142578125e-19;
    float __Jpnul = __h * __Jnul;
    float __Jnul1 = __Jnul;
    float __Jpnu1 = __Jpnul;
    float __fact = __nu * (float) __xi;
  {
    int __l = (int) __nl;

        int __l = (int) __nl;
    goto <D.91276>;
    <D.91275>:;
    {
      const float __Jnutemp = __fact * __Jnul + __Jpnul;

            const float __Jnutemp = __fact * __Jnul + __Jpnul;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__fact = __fact - (float) __xi) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Jpnul = __fact * (float) __Jnutemp - __Jnul) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Jnul = (float) __Jnutemp) >>>>>;
    }
    <<cleanup_point (void)  --__l>>;
    <D.91276>:;
    if (__l > 0) goto <D.91275>; else goto <D.91273>;
    <D.91273>:;
  }
  if (__Jnul == 0.0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Jnul = 1.1920928955078125e-7) >>>>>;
    }
    float __f = __Jpnul / __Jnul;
    float __Nmu;
    float __Nnu1;
    float __Npmu;
    float __Jmu;
  {
    if (__x < 2.0e+0)
      {
        {
          const float __x2 = __x * 5.0e-1;
          const float __pimu;
          float __fact;
          float __d;
          float __e = (float) __mu * __d;
          float __fact2;
          float __gam1;
          float __gam2;
          float __gampl;
          float __gammi;
          float __ff;
          float __p;
          float __q;
          const float __pimu2 = (float) __pimu * 5.0e-1;
          float __fact3;
          float __r;
          float __c = 1.0e+0;
          float __sum = __r * __q + __ff;
          float __sum1 = __p;

                    const float __x2 = __x * 5.0e-1;
                    const float __pimu;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__pimu = std::__detail::__numeric_constants<float>::__pi () * (float) __mu) >>>>>;
                    float __fact;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact = std::abs ((float) __pimu) < 1.1920928955078125e-7 ? 1.0e+0 : (float) __pimu / std::sin ((float) __pimu)) >>>>>;
                    float __d;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = -std::log ((float) __x2)) >>>>>;
                    float __e = (float) __mu * __d;
                    float __fact2;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact2 = std::abs (__e) < 1.1920928955078125e-7 ? 1.0e+0 : std::sinh (__e) / __e) >>>>>;
                    float __gam1;
                    float __gam2;
                    float __gampl;
                    float __gammi;
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__detail::__gamma_temme<float> ((float) __mu, (float &) &__gam1, (float &) &__gam2, (float &) &__gampl, (float &) &__gammi) >>>>>;
                    float __ff;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ff = ((2.0e+0 / std::__detail::__numeric_constants<float>::__pi ()) * __fact) * (std::cosh (__e) * __gam1 + (__gam2 * __fact2) * __d)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__e = std::exp (__e)) >>>>>;
                    float __p;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__p = __e / (std::__detail::__numeric_constants<float>::__pi () * __gampl)) >>>>>;
                    float __q;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__q = 1.0e+0 / ((std::__detail::__numeric_constants<float>::__pi () * __e) * __gammi)) >>>>>;
                    const float __pimu2 = (float) __pimu * 5.0e-1;
                    float __fact3;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact3 = std::abs ((float) __pimu2) < 1.1920928955078125e-7 ? 1.0e+0 : std::sin ((float) __pimu2) / (float) __pimu2) >>>>>;
                    float __r;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__r = ((std::__detail::__numeric_constants<float>::__pi () * (float) __pimu2) * __fact3) * __fact3) >>>>>;
          <<cleanup_point           float __c = 1.0e+0;>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = -NON_LVALUE_EXPR <__x2> * (float) __x2) >>>>>;
                    float __sum = __r * __q + __ff;
                    float __sum1 = __p;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__i = 1) >>>>>;
            goto <D.91280>;
            <D.91279>:;
            {
              const float __del = (__r * __q + __ff) * __c;
              const float __del1 = __c * __p - (float) __i * (float) __del;

              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ff = (((float) __i * __ff + __p) + __q) / ((float) (__i * __i) - (float) __mu2)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__c = (__d / (float) __i) * __c) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__p = __p / ((float) __i - (float) __mu)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q = __q / ((float) __i + (float) __mu)) >>>>>;
                            const float __del = (__r * __q + __ff) * __c;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sum = __sum + (float) __del) >>>>>;
                            const float __del1 = __c * __p - (float) __i * (float) __del;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sum1 = __sum1 + (float) __del1) >>>>>;
              if (<<cleanup_point std::abs ((float) __del) < (std::abs (__sum) + 1.0e+0) * 1.1920928955078125e-7>>) goto <D.91277>;
            }
            <<cleanup_point (void)  ++__i>>;
            <D.91280>:;
            if (__i <= 15000) goto <D.91279>; else goto <D.91277>;
            <D.91277>:;
          }
          if (__i > 15000)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_runtime_error ((const char *) "Bessel y series failed to converge in __bessel_jn.") >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Nmu = -NON_LVALUE_EXPR <__sum>) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Nnu1 = -NON_LVALUE_EXPR <__sum1> * (float) __xi2) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Npmu = ((float) __mu * (float) __xi) * __Nmu - __Nnu1) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Jmu = __w / (__Npmu - __f * __Nmu)) >>>>>;
        }
      }
    else
      {
        {
          float __a = 2.5e-1 - (float) __mu2;
          float __q = 1.0e+0;
          float __p = -NON_LVALUE_EXPR <__xi> * 5.0e-1;
          float __br = __x * 2.0e+0;
          float __bi = 2.0e+0;
          float __fact = (__a * (float) __xi) / (__p * __p + __q * __q);
          float __cr = __q * __fact + __br;
          float __ci = __p * __fact + __bi;
          float __den = __br * __br + __bi * __bi;
          float __dr = __br / __den;
          float __di = -NON_LVALUE_EXPR <__bi> / __den;
          float __dlr = __cr * __dr - __ci * __di;
          float __dli = __cr * __di + __ci * __dr;
          float __temp = __p * __dlr - __q * __dli;
          int __i;
          const float __gam = (__p - __f) / __q;

                    float __a = 2.5e-1 - (float) __mu2;
          <<cleanup_point           float __q = 1.0e+0;>>;
                    float __p = -NON_LVALUE_EXPR <__xi> * 5.0e-1;
                    float __br = __x * 2.0e+0;
          <<cleanup_point           float __bi = 2.0e+0;>>;
                    float __fact = (__a * (float) __xi) / (__p * __p + __q * __q);
                    float __cr = __q * __fact + __br;
                    float __ci = __p * __fact + __bi;
                    float __den = __br * __br + __bi * __bi;
                    float __dr = __br / __den;
                    float __di = -NON_LVALUE_EXPR <__bi> / __den;
                    float __dlr = __cr * __dr - __ci * __di;
                    float __dli = __cr * __di + __ci * __dr;
                    float __temp = __p * __dlr - __q * __dli;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__q = __p * __dli + __q * __dlr) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__p = __temp) >>>>>;
                    int __i;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__i = 2) >>>>>;
          goto <D.91284>;
          <D.91283>:;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__a = (float) ((__i + -1) * 2) + __a) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__bi = __bi + 2.0e+0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__dr = __a * __dr + __br) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__di = __a * __di + __bi) >>>>>;
          if (<<cleanup_point std::abs (__dr) + std::abs (__di) < 1.08420217248550443400745280086994171142578125e-19>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__dr = 1.08420217248550443400745280086994171142578125e-19) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact = __a / (__cr * __cr + __ci * __ci)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__cr = __cr * __fact + __br) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ci = __bi - __ci * __fact) >>>>>;
          if (<<cleanup_point std::abs (__cr) + std::abs (__ci) < 1.08420217248550443400745280086994171142578125e-19>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__cr = 1.08420217248550443400745280086994171142578125e-19) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__den = __dr * __dr + __di * __di) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__dr = __dr / __den) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__di = -__di / NON_LVALUE_EXPR <__den>) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__dlr = __cr * __dr - __ci * __di) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__dli = __cr * __di + __ci * __dr) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__temp = __p * __dlr - __q * __dli) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__q = __p * __dli + __q * __dlr) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__p = __temp) >>>>>;
          if (<<cleanup_point std::abs (__dlr - 1.0e+0) + std::abs (__dli) < 1.1920928955078125e-7>>) goto <D.91281>;
          <<cleanup_point (void)  ++__i>>;
          <D.91284>:;
          if (__i <= 15000) goto <D.91283>; else goto <D.91281>;
          <D.91281>:;
          if (__i > 15000)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_runtime_error ((const char *) "Lentz\'s method failed in __bessel_jn.") >>>>>;
            }
                    const float __gam = (__p - __f) / __q;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Jmu = std::sqrt (__w / ((__p - __f) * (float) __gam + __q))) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Jmu = std::copysign (__Jmu, __Jnul)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Nmu = (float) __gam * __Jmu) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Npmu = (__q / (float) __gam + __p) * __Nmu) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Nnu1 = ((float) __mu * (float) __xi) * __Nmu - __Npmu) >>>>>;
        }
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = __Jmu / __Jnul) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Jnu = __fact * __Jnul1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Jpnu = __fact * __Jpnu1) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__i = 1) >>>>>;
    goto <D.91288>;
    <D.91287>:;
    {
      const float __Nnutemp = (((float) __i + (float) __mu) * (float) __xi2) * __Nnu1 - __Nmu;

            const float __Nnutemp = (((float) __i + (float) __mu) * (float) __xi2) * __Nnu1 - __Nmu;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Nmu = __Nnu1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Nnu1 = (float) __Nnutemp) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91288>:;
    if (__i <= (int) __nl) goto <D.91287>; else goto <D.91285>;
    <D.91285>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Nnu = __Nmu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Npnu = (__nu * (float) __xi) * __Nmu - __Nnu1) >>>>>;
  return;
}


;; Function void std::__detail::__cyl_bessel_jn_asymp(_Tp, _Tp, _Tp&, _Tp&) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __mu = (__nu * 4.0e+0) * __nu;
  const long double __8x = __x * 8.0e+0;
  long double __P = 0.0;
  long double __Q = 0.0;
  long double __k = 0.0;
  long double __term = 1.0e+0;
  int __epsP = 0;
  int __epsQ = 0;
  long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __chi;
  const long double __c;
  const long double __s;
  const long double __coef;

    const long double __mu = (__nu * 4.0e+0) * __nu;
    const long double __8x = __x * 8.0e+0;
  <<cleanup_point   long double __P = 0.0;>>;
  <<cleanup_point   long double __Q = 0.0;>>;
  <<cleanup_point   long double __k = 0.0;>>;
  <<cleanup_point   long double __term = 1.0e+0;>>;
  <<cleanup_point   int __epsP = 0;>>;
  <<cleanup_point   int __epsQ = 0;>>;
  <<cleanup_point   long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <D.91309>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term = (__k != 0.0 ? -((long double) __mu - (__k * 2.0e+0 - 1.0e+0) * (__k * 2.0e+0 - 1.0e+0)) / (__k * (long double) __8x) : 1.0e+0) * __term) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__epsP = std::abs (__term) < std::abs (__P) * __eps) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__P = __P + __term) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) __k++  >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term = (((long double) __mu - (__k * 2.0e+0 - 1.0e+0) * (__k * 2.0e+0 - 1.0e+0)) / (__k * (long double) __8x)) * __term) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__epsQ = std::abs (__term) < std::abs (__Q) * __eps) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__Q = __Q + __term) >>>>>;
  if ((__epsP != 0 && __epsQ != 0) && __nu * 5.0e-1 < __k) goto <D.91307>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) __k++  >>>>>;
  if (__k < 1.0e+3) goto <D.91309>; else goto <D.91307>;
  <D.91307>:;
    const long double __chi;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__chi = __x - (__nu + 5.0e-1) * std::__detail::__numeric_constants<long double>::__pi_2 ()) >>>>>;
    const long double __c;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__c = std::cos ((long double) __chi)) >>>>>;
    const long double __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__s = std::sin ((long double) __chi)) >>>>>;
    const long double __coef;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__coef = std::sqrt (2.0e+0 / (std::__detail::__numeric_constants<long double>::__pi () * __x))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Jnu = ((long double) __c * __P - (long double) __s * __Q) * (long double) __coef) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Nnu = ((long double) __s * __P + (long double) __c * __Q) * (long double) __coef) >>>>>;
  return;
}


;; Function void std::__detail::__bessel_jn(_Tp, _Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __fp_min = 1.83360386755484716562141239204848316595636497135856723728e-2466;
  const int __max_iter = 15000;
  const long double __x_min = 2.0e+0;
  const int __nl;
  const long double __mu = __nu - (long double) __nl;
  const long double __mu2 = (long double) __mu * (long double) __mu;
  const long double __xi = 1.0e+0 / __x;
  const long double __xi2 = (long double) __xi * 2.0e+0;
  long double __w;
  int __isign = 1;
  long double __h = __nu * (long double) __xi;
  long double __b = (long double) __xi2 * __nu;
  long double __d = 0.0;
  long double __c = __h;
  int __i;
  long double __Jnul = (long double) __isign * 1.83360386755484716562141239204848316595636497135856723728e-2466;
  long double __Jpnul = __h * __Jnul;
  long double __Jnul1 = __Jnul;
  long double __Jpnu1 = __Jpnul;
  long double __fact = __nu * (long double) __xi;
  long double __f = __Jpnul / __Jnul;
  long double __Nmu;
  long double __Nnu1;
  long double __Npmu;
  long double __Jmu;

  if (__x == 0.0)
    {
      if (__nu == 0.0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__Jnu = 1.0e+0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (*__Jpnu = 0.0) >>>>>;
        }
      else
        {
          if (__nu == 1.0e+0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Jnu = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Jpnu = 5.0e-1) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Jnu = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (*__Jpnu = 0.0) >>>>>;
            }
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*__Nnu =  -Inf) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (*__Npnu =  Inf) >>>>>;
      return;
    }
  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   const long double __fp_min = 1.83360386755484716562141239204848316595636497135856723728e-2466;>>;
  <<cleanup_point   const int __max_iter = 15000;>>;
  <<cleanup_point   const long double __x_min = 2.0e+0;>>;
    const int __nl;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__nl = __x < 2.0e+0 ? (int) (__nu + 5.0e-1) : (int) *std::max<int> ((const int &) &TARGET_EXPR <D.91322, 0>, (const int &) &TARGET_EXPR <D.91323, (int) ((__nu - __x) + 1.5e+0)>)) >>>>>;
    const long double __mu = __nu - (long double) __nl;
    const long double __mu2 = (long double) __mu * (long double) __mu;
    const long double __xi = 1.0e+0 / __x;
    const long double __xi2 = (long double) __xi * 2.0e+0;
    long double __w;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__w = (long double) __xi2 / std::__detail::__numeric_constants<long double>::__pi ()) >>>>>;
  <<cleanup_point   int __isign = 1;>>;
    long double __h = __nu * (long double) __xi;
  if (__h < 1.83360386755484716562141239204848316595636497135856723728e-2466)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = 1.83360386755484716562141239204848316595636497135856723728e-2466) >>>>>;
    }
    long double __b = (long double) __xi2 * __nu;
  <<cleanup_point   long double __d = 0.0;>>;
    long double __c = __h;
    int __i;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__i = 1) >>>>>;
    goto <D.91389>;
    <D.91388>:;
    {
      const long double __del = __c * __d;

      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__b = __b + (long double) __xi2) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__d = __b - __d) >>>>>;
      if (<<cleanup_point std::abs (__d) < 1.83360386755484716562141239204848316595636497135856723728e-2466>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = 1.83360386755484716562141239204848316595636497135856723728e-2466) >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__c = __b - 1.0e+0 / __c) >>>>>;
      if (<<cleanup_point std::abs (__c) < 1.83360386755484716562141239204848316595636497135856723728e-2466>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__c = 1.83360386755484716562141239204848316595636497135856723728e-2466) >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__d = 1.0e+0 / __d) >>>>>;
            const long double __del = __c * __d;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = __h * (long double) __del) >>>>>;
      if (__d < 0.0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__isign = -NON_LVALUE_EXPR <__isign>) >>>>>;
        }
      if (<<cleanup_point std::abs ((long double) __del - 1.0e+0) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91386>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91389>:;
    if (__i <= 15000) goto <D.91388>; else goto <D.91386>;
    <D.91386>:;
  }
  if (__i > 15000)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Argument x too large in __bessel_jn; try asymptotic expansion.") >>>>>;
    }
    long double __Jnul = (long double) __isign * 1.83360386755484716562141239204848316595636497135856723728e-2466;
    long double __Jpnul = __h * __Jnul;
    long double __Jnul1 = __Jnul;
    long double __Jpnu1 = __Jpnul;
    long double __fact = __nu * (long double) __xi;
  {
    int __l = (int) __nl;

        int __l = (int) __nl;
    goto <D.91393>;
    <D.91392>:;
    {
      const long double __Jnutemp = __fact * __Jnul + __Jpnul;

            const long double __Jnutemp = __fact * __Jnul + __Jpnul;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__fact = __fact - (long double) __xi) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Jpnul = __fact * (long double) __Jnutemp - __Jnul) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Jnul = (long double) __Jnutemp) >>>>>;
    }
    <<cleanup_point (void)  --__l>>;
    <D.91393>:;
    if (__l > 0) goto <D.91392>; else goto <D.91390>;
    <D.91390>:;
  }
  if (__Jnul == 0.0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Jnul = 1.08420217248550443400745280086994171142578125e-19) >>>>>;
    }
    long double __f = __Jpnul / __Jnul;
    long double __Nmu;
    long double __Nnu1;
    long double __Npmu;
    long double __Jmu;
  {
    if (__x < 2.0e+0)
      {
        {
          const long double __x2 = __x * 5.0e-1;
          const long double __pimu;
          long double __fact;
          long double __d;
          long double __e = (long double) __mu * __d;
          long double __fact2;
          long double __gam1;
          long double __gam2;
          long double __gampl;
          long double __gammi;
          long double __ff;
          long double __p;
          long double __q;
          const long double __pimu2 = (long double) __pimu * 5.0e-1;
          long double __fact3;
          long double __r;
          long double __c = 1.0e+0;
          long double __sum = __r * __q + __ff;
          long double __sum1 = __p;

                    const long double __x2 = __x * 5.0e-1;
                    const long double __pimu;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__pimu = std::__detail::__numeric_constants<long double>::__pi () * (long double) __mu) >>>>>;
                    long double __fact;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact = std::abs ((long double) __pimu) < 1.08420217248550443400745280086994171142578125e-19 ? 1.0e+0 : (long double) __pimu / std::sin ((long double) __pimu)) >>>>>;
                    long double __d;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = -std::log ((long double) __x2)) >>>>>;
                    long double __e = (long double) __mu * __d;
                    long double __fact2;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact2 = std::abs (__e) < 1.08420217248550443400745280086994171142578125e-19 ? 1.0e+0 : std::sinh (__e) / __e) >>>>>;
                    long double __gam1;
                    long double __gam2;
                    long double __gampl;
                    long double __gammi;
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__detail::__gamma_temme<long double> ((long double) __mu, (long double &) &__gam1, (long double &) &__gam2, (long double &) &__gampl, (long double &) &__gammi) >>>>>;
                    long double __ff;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ff = ((2.0e+0 / std::__detail::__numeric_constants<long double>::__pi ()) * __fact) * (std::cosh (__e) * __gam1 + (__gam2 * __fact2) * __d)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__e = std::exp (__e)) >>>>>;
                    long double __p;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__p = __e / (std::__detail::__numeric_constants<long double>::__pi () * __gampl)) >>>>>;
                    long double __q;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__q = 1.0e+0 / ((std::__detail::__numeric_constants<long double>::__pi () * __e) * __gammi)) >>>>>;
                    const long double __pimu2 = (long double) __pimu * 5.0e-1;
                    long double __fact3;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact3 = std::abs ((long double) __pimu2) < 1.08420217248550443400745280086994171142578125e-19 ? 1.0e+0 : std::sin ((long double) __pimu2) / (long double) __pimu2) >>>>>;
                    long double __r;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__r = ((std::__detail::__numeric_constants<long double>::__pi () * (long double) __pimu2) * __fact3) * __fact3) >>>>>;
          <<cleanup_point           long double __c = 1.0e+0;>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__d = -NON_LVALUE_EXPR <__x2> * (long double) __x2) >>>>>;
                    long double __sum = __r * __q + __ff;
                    long double __sum1 = __p;
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__i = 1) >>>>>;
            goto <D.91397>;
            <D.91396>:;
            {
              const long double __del = (__r * __q + __ff) * __c;
              const long double __del1 = __c * __p - (long double) __i * (long double) __del;

              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ff = (((long double) __i * __ff + __p) + __q) / ((long double) (__i * __i) - (long double) __mu2)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__c = (__d / (long double) __i) * __c) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__p = __p / ((long double) __i - (long double) __mu)) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__q = __q / ((long double) __i + (long double) __mu)) >>>>>;
                            const long double __del = (__r * __q + __ff) * __c;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sum = __sum + (long double) __del) >>>>>;
                            const long double __del1 = __c * __p - (long double) __i * (long double) __del;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sum1 = __sum1 + (long double) __del1) >>>>>;
              if (<<cleanup_point std::abs ((long double) __del) < (std::abs (__sum) + 1.0e+0) * 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91394>;
            }
            <<cleanup_point (void)  ++__i>>;
            <D.91397>:;
            if (__i <= 15000) goto <D.91396>; else goto <D.91394>;
            <D.91394>:;
          }
          if (__i > 15000)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_runtime_error ((const char *) "Bessel y series failed to converge in __bessel_jn.") >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Nmu = -NON_LVALUE_EXPR <__sum>) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Nnu1 = -NON_LVALUE_EXPR <__sum1> * (long double) __xi2) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Npmu = ((long double) __mu * (long double) __xi) * __Nmu - __Nnu1) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Jmu = __w / (__Npmu - __f * __Nmu)) >>>>>;
        }
      }
    else
      {
        {
          long double __a = 2.5e-1 - (long double) __mu2;
          long double __q = 1.0e+0;
          long double __p = -NON_LVALUE_EXPR <__xi> * 5.0e-1;
          long double __br = __x * 2.0e+0;
          long double __bi = 2.0e+0;
          long double __fact = (__a * (long double) __xi) / (__p * __p + __q * __q);
          long double __cr = __q * __fact + __br;
          long double __ci = __p * __fact + __bi;
          long double __den = __br * __br + __bi * __bi;
          long double __dr = __br / __den;
          long double __di = -NON_LVALUE_EXPR <__bi> / __den;
          long double __dlr = __cr * __dr - __ci * __di;
          long double __dli = __cr * __di + __ci * __dr;
          long double __temp = __p * __dlr - __q * __dli;
          int __i;
          const long double __gam = (__p - __f) / __q;

                    long double __a = 2.5e-1 - (long double) __mu2;
          <<cleanup_point           long double __q = 1.0e+0;>>;
                    long double __p = -NON_LVALUE_EXPR <__xi> * 5.0e-1;
                    long double __br = __x * 2.0e+0;
          <<cleanup_point           long double __bi = 2.0e+0;>>;
                    long double __fact = (__a * (long double) __xi) / (__p * __p + __q * __q);
                    long double __cr = __q * __fact + __br;
                    long double __ci = __p * __fact + __bi;
                    long double __den = __br * __br + __bi * __bi;
                    long double __dr = __br / __den;
                    long double __di = -NON_LVALUE_EXPR <__bi> / __den;
                    long double __dlr = __cr * __dr - __ci * __di;
                    long double __dli = __cr * __di + __ci * __dr;
                    long double __temp = __p * __dlr - __q * __dli;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__q = __p * __dli + __q * __dlr) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__p = __temp) >>>>>;
                    int __i;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__i = 2) >>>>>;
          goto <D.91401>;
          <D.91400>:;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__a = (long double) ((__i + -1) * 2) + __a) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__bi = __bi + 2.0e+0) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__dr = __a * __dr + __br) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__di = __a * __di + __bi) >>>>>;
          if (<<cleanup_point std::abs (__dr) + std::abs (__di) < 1.83360386755484716562141239204848316595636497135856723728e-2466>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__dr = 1.83360386755484716562141239204848316595636497135856723728e-2466) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__fact = __a / (__cr * __cr + __ci * __ci)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__cr = __cr * __fact + __br) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ci = __bi - __ci * __fact) >>>>>;
          if (<<cleanup_point std::abs (__cr) + std::abs (__ci) < 1.83360386755484716562141239204848316595636497135856723728e-2466>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__cr = 1.83360386755484716562141239204848316595636497135856723728e-2466) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__den = __dr * __dr + __di * __di) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__dr = __dr / __den) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__di = -__di / NON_LVALUE_EXPR <__den>) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__dlr = __cr * __dr - __ci * __di) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__dli = __cr * __di + __ci * __dr) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__temp = __p * __dlr - __q * __dli) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__q = __p * __dli + __q * __dlr) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__p = __temp) >>>>>;
          if (<<cleanup_point std::abs (__dlr - 1.0e+0) + std::abs (__dli) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91398>;
          <<cleanup_point (void)  ++__i>>;
          <D.91401>:;
          if (__i <= 15000) goto <D.91400>; else goto <D.91398>;
          <D.91398>:;
          if (__i > 15000)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_runtime_error ((const char *) "Lentz\'s method failed in __bessel_jn.") >>>>>;
            }
                    const long double __gam = (__p - __f) / __q;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Jmu = std::sqrt (__w / ((__p - __f) * (long double) __gam + __q))) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Jmu = std::copysign (__Jmu, __Jnul)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Nmu = (long double) __gam * __Jmu) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Npmu = (__q / (long double) __gam + __p) * __Nmu) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__Nnu1 = ((long double) __mu * (long double) __xi) * __Nmu - __Npmu) >>>>>;
        }
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = __Jmu / __Jnul) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Jnu = __fact * __Jnul1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Jpnu = __fact * __Jpnu1) >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__i = 1) >>>>>;
    goto <D.91405>;
    <D.91404>:;
    {
      const long double __Nnutemp = (((long double) __i + (long double) __mu) * (long double) __xi2) * __Nnu1 - __Nmu;

            const long double __Nnutemp = (((long double) __i + (long double) __mu) * (long double) __xi2) * __Nnu1 - __Nmu;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Nmu = __Nnu1) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__Nnu1 = (long double) __Nnutemp) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91405>:;
    if (__i <= (int) __nl) goto <D.91404>; else goto <D.91402>;
    <D.91402>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Nnu = __Nmu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__Npnu = (__nu * (long double) __xi) * __Nmu - __Nnu1) >>>>>;
  return;
}


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__pi() [with _Tp = float] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.1415927410125732421875e+0
   >>>;
__builtin_unreachable ();


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__pi() [with _Tp = long double] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 3.14159265358979323851280895940618620443274267017841339111e+0
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__expint_Ei(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


if (__x < 0.0)
  {
    <<cleanup_point return <retval> = -std::__detail::__expint_E1<float> (-NON_LVALUE_EXPR <__x>)>>;
  }
else
  {
    if (__x < 1.59423847198486328125e+1)
      {
        <<cleanup_point return <retval> = std::__detail::__expint_Ei_series<float> (__x)>>;
      }
    else
      {
        <<cleanup_point return <retval> = std::__detail::__expint_Ei_asymp<float> (__x)>>;
      }
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__expint_Ei(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


if (__x < 0.0)
  {
    <<cleanup_point return <retval> = -std::__detail::__expint_E1<long double> (-NON_LVALUE_EXPR <__x>)>>;
  }
else
  {
    if (__x < 4.36682723752765544929232977011679395218379795551300048828e+1)
      {
        <<cleanup_point return <retval> = std::__detail::__expint_Ei_series<long double> (__x)>>;
      }
    else
      {
        <<cleanup_point return <retval> = std::__detail::__expint_Ei_asymp<long double> (__x)>>;
      }
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__poly_hermite_recursion(unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  float __H_0 = 1.0e+0;
  float __H_1 = __x * 2.0e+0;
  float __H_n;
  float __H_nm1;
  float __H_nm2;
  unsigned int __i;

  <<cleanup_point   float __H_0 = 1.0e+0;>>;
  if (__n == 0)
    {
      return <retval> = __H_0;
    }
    float __H_1 = __x * 2.0e+0;
  if (__n == 1)
    {
      return <retval> = __H_1;
    }
    float __H_n;
    float __H_nm1;
    float __H_nm2;
    unsigned int __i;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__H_nm2 = __H_0);, (void) (__H_nm1 = __H_1);;, (void) (__i = 2); >>>>>;
  goto <D.91436>;
  <D.91435>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__H_n = (__x * __H_nm1 - (float) (__i + 4294967295) * __H_nm2) * 2.0e+0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__H_nm2 = __H_nm1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__H_nm1 = __H_n) >>>>>;
  <<cleanup_point (void)  ++__i>>;
  <D.91436>:;
  if (__i <= __n) goto <D.91435>; else goto <D.91433>;
  <D.91433>:;
  return <retval> = __H_n;
}


;; Function _Tp std::__detail::__poly_hermite_recursion(unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __H_0 = 1.0e+0;
  long double __H_1 = __x * 2.0e+0;
  long double __H_n;
  long double __H_nm1;
  long double __H_nm2;
  unsigned int __i;

  <<cleanup_point   long double __H_0 = 1.0e+0;>>;
  if (__n == 0)
    {
      return <retval> = __H_0;
    }
    long double __H_1 = __x * 2.0e+0;
  if (__n == 1)
    {
      return <retval> = __H_1;
    }
    long double __H_n;
    long double __H_nm1;
    long double __H_nm2;
    unsigned int __i;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__H_nm2 = __H_0);, (void) (__H_nm1 = __H_1);;, (void) (__i = 2); >>>>>;
  goto <D.91449>;
  <D.91448>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__H_n = (__x * __H_nm1 - (long double) (__i + 4294967295) * __H_nm2) * 2.0e+0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__H_nm2 = __H_nm1) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__H_nm1 = __H_n) >>>>>;
  <<cleanup_point (void)  ++__i>>;
  <D.91449>:;
  if (__i <= __n) goto <D.91448>; else goto <D.91446>;
  <D.91446>:;
  return <retval> = __H_n;
}


;; Function _Tp std::__detail::__riemann_zeta_product(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  static const float __prime[29] = {2.0e+0, 3.0e+0, 5.0e+0, 7.0e+0, 1.1e+1, 1.3e+1, 1.7e+1, 1.9e+1, 2.3e+1, 2.9e+1, 3.1e+1, 3.7e+1, 4.1e+1, 4.3e+1, 4.7e+1, 5.3e+1, 5.9e+1, 6.1e+1, 6.7e+1, 7.1e+1, 7.3e+1, 7.9e+1, 8.3e+1, 8.9e+1, 9.7e+1, 1.01e+2, 1.03e+2, 1.07e+2, 1.09e+2};
  static const unsigned int __num_primes = 29;
  float __zeta = 1.0e+0;

  <<cleanup_point   static const float __prime[29] = {2.0e+0, 3.0e+0, 5.0e+0, 7.0e+0, 1.1e+1, 1.3e+1, 1.7e+1, 1.9e+1, 2.3e+1, 2.9e+1, 3.1e+1, 3.7e+1, 4.1e+1, 4.3e+1, 4.7e+1, 5.3e+1, 5.9e+1, 6.1e+1, 6.7e+1, 7.1e+1, 7.3e+1, 7.9e+1, 8.3e+1, 8.9e+1, 9.7e+1, 1.01e+2, 1.03e+2, 1.07e+2, 1.09e+2};>>;
  <<cleanup_point   static const unsigned int __num_primes = 29;>>;
  <<cleanup_point   float __zeta = 1.0e+0;>>;
  {
    unsigned int __i = 0;

    <<cleanup_point     unsigned int __i = 0;>>;
    goto <D.91460>;
    <D.91459>:;
    {
      const float __fact;

            const float __fact;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__fact = 1.0e+0 - std::pow ((float) __prime[__i], -NON_LVALUE_EXPR <__s>)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__zeta = __zeta * (float) __fact) >>>>>;
      if (1.0e+0 - (float) __fact < 1.1920928955078125e-7) goto <D.91457>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91460>:;
    if (__i <= 28) goto <D.91459>; else goto <D.91457>;
    <D.91457>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__zeta = 1.0e+0 / __zeta) >>>>>;
  return <retval> = __zeta;
}


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__pi_2() [with _Tp = float] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.57079637050628662109375e+0
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__riemann_zeta_glob(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  float __zeta = 0.0;
  const float __eps = 1.1920928955078125e-7;
  const float __max_bincoeff = 8.649823760986328125e+1;
  float __num = 5.0e-1;
  const unsigned int __maxit = 10000;

  <<cleanup_point   float __zeta = 0.0;>>;
  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   const float __max_bincoeff = 8.649823760986328125e+1;>>;
  {
    if (__s < 0.0)
      {
        {
          {
            if (<<cleanup_point std::fmod (__s, 2.0e+0) == 0.0>>)
              {
                return <retval> = 0.0;
              }
            else
              {
                {
                  float __zeta;

                                    float __zeta;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__zeta = std::__detail::__riemann_zeta_glob<float> (1.0e+0 - __s)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__zeta = TARGET_EXPR <D.91468, ((std::pow (std::__detail::__numeric_constants<float>::__pi () * 2.0e+0, __s) * std::sin (std::__detail::__numeric_constants<float>::__pi_2 () * __s)) * std::exp (std::lgamma (1.0e+0 - __s))) / std::__detail::__numeric_constants<float>::__pi ()>;, __zeta * D.91468;) >>>>>;
                  return <retval> = __zeta;
                }
              }
          }
        }
      }
  }
  <<cleanup_point   float __num = 5.0e-1;>>;
  <<cleanup_point   const unsigned int __maxit = 10000;>>;
  {
    unsigned int __i = 0;

    <<cleanup_point     unsigned int __i = 0;>>;
    goto <D.91486>;
    <D.91485>:;
    {
      bool __punt = 0;
      float __sgn = 1.0e+0;
      float __term = 0.0;

      <<cleanup_point       bool __punt = 0;>>;
      <<cleanup_point       float __sgn = 1.0e+0;>>;
      <<cleanup_point       float __term = 0.0;>>;
      {
        unsigned int __j = 0;

        <<cleanup_point         unsigned int __j = 0;>>;
        goto <D.91484>;
        <D.91483>:;
        {
          float __bincoeff;

                    float __bincoeff;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__bincoeff = (std::lgamma ((float) (__i + 1)) - std::lgamma ((float) (__j + 1))) - std::lgamma ((float) ((__i - __j) + 1))) >>>>>;
          if (__bincoeff > 8.649823760986328125e+1)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__punt = 1) >>>>>;
              goto <D.91481>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__bincoeff = std::exp (__bincoeff)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__term = TARGET_EXPR <D.91477, (__sgn * __bincoeff) * std::pow ((float) (__j + 1), -NON_LVALUE_EXPR <__s>)>;, __term + D.91477;) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sgn = -__sgn) >>>>>;
        }
        <<cleanup_point (void)  ++__j>>;
        <D.91484>:;
        if (__j <= __i) goto <D.91483>; else goto <D.91481>;
        <D.91481>:;
      }
      if (__punt) goto <D.91479>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = __term * __num) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__zeta = __zeta + __term) >>>>>;
      if (<<cleanup_point std::abs (__term / __zeta) < 1.1920928955078125e-7>>) goto <D.91479>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__num = __num * 5.0e-1) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91486>:;
    if (__i <= 9999) goto <D.91485>; else goto <D.91479>;
    <D.91479>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__zeta = TARGET_EXPR <D.91478, 1.0e+0 - std::pow (2.0e+0, 1.0e+0 - __s)>;, __zeta / D.91478;) >>>>>;
  return <retval> = __zeta;
}


;; Function _Tp std::__detail::__riemann_zeta_sum(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const unsigned int max_iter = 10000;
  float __zeta = 0.0;

  if (__s < 1.0e+0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_domain_error ((const char *) "Bad argument in zeta sum.") >>>>>;
    }
  <<cleanup_point   const unsigned int max_iter = 10000;>>;
  <<cleanup_point   float __zeta = 0.0;>>;
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.91496>;
    <D.91495>:;
    {
      float __term;

            float __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = std::pow ((float) __k, -NON_LVALUE_EXPR <__s>)) >>>>>;
      if (__term < 1.1920928955078125e-7) goto <D.91493>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__zeta = __zeta + __term) >>>>>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.91496>:;
    if (__k <= 9999) goto <D.91495>; else goto <D.91493>;
    <D.91493>:;
  }
  return <retval> = __zeta;
}


;; Function _Tp std::__detail::__riemann_zeta_product(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  static const long double __prime[29] = {2.0e+0, 3.0e+0, 5.0e+0, 7.0e+0, 1.1e+1, 1.3e+1, 1.7e+1, 1.9e+1, 2.3e+1, 2.9e+1, 3.1e+1, 3.7e+1, 4.1e+1, 4.3e+1, 4.7e+1, 5.3e+1, 5.9e+1, 6.1e+1, 6.7e+1, 7.1e+1, 7.3e+1, 7.9e+1, 8.3e+1, 8.9e+1, 9.7e+1, 1.01e+2, 1.03e+2, 1.07e+2, 1.09e+2};
  static const unsigned int __num_primes = 29;
  long double __zeta = 1.0e+0;

  <<cleanup_point   static const long double __prime[29] = {2.0e+0, 3.0e+0, 5.0e+0, 7.0e+0, 1.1e+1, 1.3e+1, 1.7e+1, 1.9e+1, 2.3e+1, 2.9e+1, 3.1e+1, 3.7e+1, 4.1e+1, 4.3e+1, 4.7e+1, 5.3e+1, 5.9e+1, 6.1e+1, 6.7e+1, 7.1e+1, 7.3e+1, 7.9e+1, 8.3e+1, 8.9e+1, 9.7e+1, 1.01e+2, 1.03e+2, 1.07e+2, 1.09e+2};>>;
  <<cleanup_point   static const unsigned int __num_primes = 29;>>;
  <<cleanup_point   long double __zeta = 1.0e+0;>>;
  {
    unsigned int __i = 0;

    <<cleanup_point     unsigned int __i = 0;>>;
    goto <D.91507>;
    <D.91506>:;
    {
      const long double __fact;

            const long double __fact;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__fact = 1.0e+0 - std::pow ((long double) __prime[__i], -NON_LVALUE_EXPR <__s>)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__zeta = __zeta * (long double) __fact) >>>>>;
      if (1.0e+0 - (long double) __fact < 1.08420217248550443400745280086994171142578125e-19) goto <D.91504>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91507>:;
    if (__i <= 28) goto <D.91506>; else goto <D.91504>;
    <D.91504>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__zeta = 1.0e+0 / __zeta) >>>>>;
  return <retval> = __zeta;
}


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__pi_2() [with _Tp = long double] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.57079632679489661925640447970309310221637133508920669556e+0
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__riemann_zeta_glob(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __zeta = 0.0;
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __max_bincoeff = 1.135534967864663331393870748797780834138393402099609375e+4;
  long double __num = 5.0e-1;
  const unsigned int __maxit = 10000;

  <<cleanup_point   long double __zeta = 0.0;>>;
  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   const long double __max_bincoeff = 1.135534967864663331393870748797780834138393402099609375e+4;>>;
  {
    if (__s < 0.0)
      {
        {
          {
            if (<<cleanup_point std::fmod (__s, 2.0e+0) == 0.0>>)
              {
                return <retval> = 0.0;
              }
            else
              {
                {
                  long double __zeta;

                                    long double __zeta;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__zeta = std::__detail::__riemann_zeta_glob<long double> (1.0e+0 - __s)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__zeta = TARGET_EXPR <D.91515, ((std::pow (std::__detail::__numeric_constants<long double>::__pi () * 2.0e+0, __s) * std::sin (std::__detail::__numeric_constants<long double>::__pi_2 () * __s)) * std::exp (std::lgamma (1.0e+0 - __s))) / std::__detail::__numeric_constants<long double>::__pi ()>;, __zeta * D.91515;) >>>>>;
                  return <retval> = __zeta;
                }
              }
          }
        }
      }
  }
  <<cleanup_point   long double __num = 5.0e-1;>>;
  <<cleanup_point   const unsigned int __maxit = 10000;>>;
  {
    unsigned int __i = 0;

    <<cleanup_point     unsigned int __i = 0;>>;
    goto <D.91533>;
    <D.91532>:;
    {
      bool __punt = 0;
      long double __sgn = 1.0e+0;
      long double __term = 0.0;

      <<cleanup_point       bool __punt = 0;>>;
      <<cleanup_point       long double __sgn = 1.0e+0;>>;
      <<cleanup_point       long double __term = 0.0;>>;
      {
        unsigned int __j = 0;

        <<cleanup_point         unsigned int __j = 0;>>;
        goto <D.91531>;
        <D.91530>:;
        {
          long double __bincoeff;

                    long double __bincoeff;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__bincoeff = (std::lgamma ((long double) (__i + 1)) - std::lgamma ((long double) (__j + 1))) - std::lgamma ((long double) ((__i - __j) + 1))) >>>>>;
          if (__bincoeff > 1.135534967864663331393870748797780834138393402099609375e+4)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__punt = 1) >>>>>;
              goto <D.91528>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__bincoeff = std::exp (__bincoeff)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__term = TARGET_EXPR <D.91524, (__sgn * __bincoeff) * std::pow ((long double) (__j + 1), -NON_LVALUE_EXPR <__s>)>;, __term + D.91524;) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sgn = -__sgn) >>>>>;
        }
        <<cleanup_point (void)  ++__j>>;
        <D.91531>:;
        if (__j <= __i) goto <D.91530>; else goto <D.91528>;
        <D.91528>:;
      }
      if (__punt) goto <D.91526>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = __term * __num) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__zeta = __zeta + __term) >>>>>;
      if (<<cleanup_point std::abs (__term / __zeta) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91526>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__num = __num * 5.0e-1) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.91533>:;
    if (__i <= 9999) goto <D.91532>; else goto <D.91526>;
    <D.91526>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__zeta = TARGET_EXPR <D.91525, 1.0e+0 - std::pow (2.0e+0, 1.0e+0 - __s)>;, __zeta / D.91525;) >>>>>;
  return <retval> = __zeta;
}


;; Function _Tp std::__detail::__riemann_zeta_sum(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const unsigned int max_iter = 10000;
  long double __zeta = 0.0;

  if (__s < 1.0e+0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_domain_error ((const char *) "Bad argument in zeta sum.") >>>>>;
    }
  <<cleanup_point   const unsigned int max_iter = 10000;>>;
  <<cleanup_point   long double __zeta = 0.0;>>;
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.91543>;
    <D.91542>:;
    {
      long double __term;

            long double __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = std::pow ((long double) __k, -NON_LVALUE_EXPR <__s>)) >>>>>;
      if (__term < 1.08420217248550443400745280086994171142578125e-19) goto <D.91540>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__zeta = __zeta + __term) >>>>>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.91543>:;
    if (__k <= 9999) goto <D.91542>; else goto <D.91540>;
    <D.91540>:;
  }
  return <retval> = __zeta;
}


;; Function void std::__detail::__sph_bessel_jn(unsigned int, _Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __nu = (float) __n + 5.0e-1;
  float __J_nu;
  float __N_nu;
  float __Jp_nu;
  float __Np_nu;
  const float __factor;

    const float __nu = (float) __n + 5.0e-1;
    float __J_nu;
    float __N_nu;
    float __Jp_nu;
    float __Np_nu;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__bessel_jn<float> ((float) __nu, __x, (float &) &__J_nu, (float &) &__N_nu, (float &) &__Jp_nu, (float &) &__Np_nu) >>>>>;
    const float __factor;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__factor = std::__detail::__numeric_constants<float>::__sqrtpio2 () / std::sqrt (__x)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__j_n = (float) __factor * __J_nu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__n_n = (float) __factor * __N_nu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__jp_n = (float) __factor * __Jp_nu - *__j_n / (__x * 2.0e+0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__np_n = (float) __factor * __Np_nu - *__n_n / (__x * 2.0e+0)) >>>>>;
  return;
}


;; Function void std::__detail::__sph_bessel_jn(unsigned int, _Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __nu = (long double) __n + 5.0e-1;
  long double __J_nu;
  long double __N_nu;
  long double __Jp_nu;
  long double __Np_nu;
  const long double __factor;

    const long double __nu = (long double) __n + 5.0e-1;
    long double __J_nu;
    long double __N_nu;
    long double __Jp_nu;
    long double __Np_nu;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__detail::__bessel_jn<long double> ((long double) __nu, __x, (long double &) &__J_nu, (long double &) &__N_nu, (long double &) &__Jp_nu, (long double &) &__Np_nu) >>>>>;
    const long double __factor;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__factor = std::__detail::__numeric_constants<long double>::__sqrtpio2 () / std::sqrt (__x)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__j_n = (long double) __factor * __J_nu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__n_n = (long double) __factor * __N_nu) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__jp_n = (long double) __factor * __Jp_nu - *__j_n / (__x * 2.0e+0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (*__np_n = (long double) __factor * __Np_nu - *__n_n / (__x * 2.0e+0)) >>>>>;
  return;
}


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__lnpi() [with _Tp = float] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.1447298526763916015625e+0
   >>>;
__builtin_unreachable ();


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__lnpi() [with _Tp = long double] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.14472988584940017417739682725752459191426169127225875854e+0
   >>>;
__builtin_unreachable ();


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__sqrt3() [with _Tp = float] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.73205077648162841796875e+0
   >>>;
__builtin_unreachable ();


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__sqrt3() [with _Tp = long double] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.73205080756887729357372529559455642811371944844722747803e+0
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__conf_hyperg_luke(_Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __big = 1.46249425e+6;
  const int __nmax = 20000;
  const float __eps = 1.1920928955078125e-7;
  const float __x = -NON_LVALUE_EXPR <__xin>;
  const float __x3 = ((float) __x * (float) __x) * (float) __x;
  const float __t0 = __a / __c;
  const float __t1 = (__a + 1.0e+0) / (__c * 2.0e+0);
  const float __t2 = (__a + 2.0e+0) / ((__c + 1.0e+0) * 2.0e+0);
  float __F = 1.0e+0;
  float __prec;
  float __Bnm3 = 1.0e+0;
  float __Bnm2 = (float) __t1 * (float) __x + 1.0e+0;
  float __Bnm1 = ((float) __t2 * (float) __x) * (((float) __t1 / 3.0e+0) * (float) __x + 1.0e+0) + 1.0e+0;
  float __Anm3 = 1.0e+0;
  float __Anm2 = __Bnm2 - (float) __t0 * (float) __x;
  float __Anm1 = (__Bnm1 - (((float) __t2 * (float) __x + 1.0e+0) * (float) __t0) * (float) __x) + ((((float) __t0 * (float) __t1) * (__c / (__c + 1.0e+0))) * (float) __x) * (float) __x;
  int __n = 3;

  <<cleanup_point   const float __big = 1.46249425e+6;>>;
  <<cleanup_point   const int __nmax = 20000;>>;
  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
    const float __x = -NON_LVALUE_EXPR <__xin>;
    const float __x3 = ((float) __x * (float) __x) * (float) __x;
    const float __t0 = __a / __c;
    const float __t1 = (__a + 1.0e+0) / (__c * 2.0e+0);
    const float __t2 = (__a + 2.0e+0) / ((__c + 1.0e+0) * 2.0e+0);
  <<cleanup_point   float __F = 1.0e+0;>>;
    float __prec;
  <<cleanup_point   float __Bnm3 = 1.0e+0;>>;
    float __Bnm2 = (float) __t1 * (float) __x + 1.0e+0;
    float __Bnm1 = ((float) __t2 * (float) __x) * (((float) __t1 / 3.0e+0) * (float) __x + 1.0e+0) + 1.0e+0;
  <<cleanup_point   float __Anm3 = 1.0e+0;>>;
    float __Anm2 = __Bnm2 - (float) __t0 * (float) __x;
    float __Anm1 = (__Bnm1 - (((float) __t2 * (float) __x + 1.0e+0) * (float) __t0) * (float) __x) + ((((float) __t0 * (float) __t1) * (__c / (__c + 1.0e+0))) * (float) __x) * (float) __x;
  <<cleanup_point   int __n = 3;>>;
  <D.91611>:;
  {
    float __npam1 = (float) (__n + -1) + __a;
    float __npcm1 = (float) (__n + -1) + __c;
    float __npam2 = (float) (__n + -2) + __a;
    float __npcm2 = (float) (__n + -2) + __c;
    float __tnm1 = (float) (__n * 2 + -1);
    float __tnm3 = (float) (__n * 2 + -3);
    float __tnm5 = (float) (__n * 2 + -5);
    float __F1 = ((float) (__n + -2) - __a) / ((__tnm3 * 2.0e+0) * __npcm1);
    float __F2 = (((float) __n + __a) * __npam1) / ((((__tnm1 * 4.0e+0) * __tnm3) * __npcm2) * __npcm1);
    float __F3 = ((-NON_LVALUE_EXPR <__npam2> * __npam1) * ((float) (__n + -2) - __a)) / ((((((__tnm3 * 8.0e+0) * __tnm3) * __tnm5) * ((float) (__n + -3) + __c)) * __npcm2) * __npcm1);
    float __E = (-NON_LVALUE_EXPR <__npam1> * ((float) (__n + -1) - __c)) / (((__tnm3 * 2.0e+0) * __npcm2) * __npcm1);
    float __An = ((__F1 * (float) __x + 1.0e+0) * __Anm1 + ((__F2 * (float) __x + __E) * (float) __x) * __Anm2) + (__F3 * (float) __x3) * __Anm3;
    float __Bn = ((__F1 * (float) __x + 1.0e+0) * __Bnm1 + ((__F2 * (float) __x + __E) * (float) __x) * __Bnm2) + (__F3 * (float) __x3) * __Bnm3;
    float __r = __An / __Bn;

        float __npam1 = (float) (__n + -1) + __a;
        float __npcm1 = (float) (__n + -1) + __c;
        float __npam2 = (float) (__n + -2) + __a;
        float __npcm2 = (float) (__n + -2) + __c;
        float __tnm1 = (float) (__n * 2 + -1);
        float __tnm3 = (float) (__n * 2 + -3);
        float __tnm5 = (float) (__n * 2 + -5);
        float __F1 = ((float) (__n + -2) - __a) / ((__tnm3 * 2.0e+0) * __npcm1);
        float __F2 = (((float) __n + __a) * __npam1) / ((((__tnm1 * 4.0e+0) * __tnm3) * __npcm2) * __npcm1);
        float __F3 = ((-NON_LVALUE_EXPR <__npam2> * __npam1) * ((float) (__n + -2) - __a)) / ((((((__tnm3 * 8.0e+0) * __tnm3) * __tnm5) * ((float) (__n + -3) + __c)) * __npcm2) * __npcm1);
        float __E = (-NON_LVALUE_EXPR <__npam1> * ((float) (__n + -1) - __c)) / (((__tnm3 * 2.0e+0) * __npcm2) * __npcm1);
        float __An = ((__F1 * (float) __x + 1.0e+0) * __Anm1 + ((__F2 * (float) __x + __E) * (float) __x) * __Anm2) + (__F3 * (float) __x3) * __Anm3;
        float __Bn = ((__F1 * (float) __x + 1.0e+0) * __Bnm1 + ((__F2 * (float) __x + __E) * (float) __x) * __Bnm2) + (__F3 * (float) __x3) * __Bnm3;
        float __r = __An / __Bn;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__prec = std::abs ((__F - __r) / __F)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__F = __r) >>>>>;
    if (__prec < 1.1920928955078125e-7 || __n > 20000) goto <D.91609>;
    if (<<cleanup_point std::abs (__An) > 1.46249425e+6 || std::abs (__Bn) > 1.46249425e+6>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__An = __An / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bn = __Bn / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm1 = __Anm1 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm1 = __Bnm1 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm2 = __Anm2 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm2 = __Bnm2 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm3 = __Anm3 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm3 = __Bnm3 / 1.46249425e+6) >>>>>;
      }
    else
      {
        if (<<cleanup_point std::abs (__An) < 6.83763346387422643601894378662109375e-7 || std::abs (__Bn) < 6.83763346387422643601894378662109375e-7>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__An = __An * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bn = __Bn * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm1 = __Anm1 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm1 = __Bnm1 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm2 = __Anm2 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm2 = __Bnm2 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm3 = __Anm3 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm3 = __Bnm3 * 1.46249425e+6) >>>>>;
          }
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void)  ++__n >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm3 = __Bnm2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm2 = __Bnm1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm1 = __Bn) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm3 = __Anm2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm2 = __Anm1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm1 = __An) >>>>>;
  }
  goto <D.91611>;
  <D.91609>:;
  if (__n > 19999)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Iteration failed to converge in __conf_hyperg_luke.") >>>>>;
    }
  return <retval> = __F;
}


;; Function _Tp std::__detail::__conf_hyperg_series(_Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __eps = 1.1920928955078125e-7;
  float __term = 1.0e+0;
  float __Fac = 1.0e+0;
  const unsigned int __max_iter = 100000;
  unsigned int __i;

  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   float __term = 1.0e+0;>>;
  <<cleanup_point   float __Fac = 1.0e+0;>>;
  <<cleanup_point   const unsigned int __max_iter = 100000;>>;
    unsigned int __i;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__i = 0) >>>>>;
  goto <D.91624>;
  <D.91623>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term = ((((float) __i + __a) * __x) / (((float) __i + __c) * (float) (__i + 1))) * __term) >>>>>;
  if (<<cleanup_point std::abs (__term) < 1.1920928955078125e-7>>) goto <D.91621>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__Fac = __Fac + __term) >>>>>;
  <<cleanup_point (void)  ++__i>>;
  <D.91624>:;
  if (__i <= 99999) goto <D.91623>; else goto <D.91621>;
  <D.91621>:;
  if (__i == 100000)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Series failed to converge in __conf_hyperg_series.") >>>>>;
    }
  return <retval> = __Fac;
}


;; Function _Tp std::__detail::__conf_hyperg_luke(_Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __big = 1.35541358258717845955555831788480932099095835155308898171e+789;
  const int __nmax = 20000;
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __x = -NON_LVALUE_EXPR <__xin>;
  const long double __x3 = ((long double) __x * (long double) __x) * (long double) __x;
  const long double __t0 = __a / __c;
  const long double __t1 = (__a + 1.0e+0) / (__c * 2.0e+0);
  const long double __t2 = (__a + 2.0e+0) / ((__c + 1.0e+0) * 2.0e+0);
  long double __F = 1.0e+0;
  long double __prec;
  long double __Bnm3 = 1.0e+0;
  long double __Bnm2 = (long double) __t1 * (long double) __x + 1.0e+0;
  long double __Bnm1 = ((long double) __t2 * (long double) __x) * (((long double) __t1 / 3.0e+0) * (long double) __x + 1.0e+0) + 1.0e+0;
  long double __Anm3 = 1.0e+0;
  long double __Anm2 = __Bnm2 - (long double) __t0 * (long double) __x;
  long double __Anm1 = (__Bnm1 - (((long double) __t2 * (long double) __x + 1.0e+0) * (long double) __t0) * (long double) __x) + ((((long double) __t0 * (long double) __t1) * (__c / (__c + 1.0e+0))) * (long double) __x) * (long double) __x;
  int __n = 3;

  <<cleanup_point   const long double __big = 1.35541358258717845955555831788480932099095835155308898171e+789;>>;
  <<cleanup_point   const int __nmax = 20000;>>;
  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
    const long double __x = -NON_LVALUE_EXPR <__xin>;
    const long double __x3 = ((long double) __x * (long double) __x) * (long double) __x;
    const long double __t0 = __a / __c;
    const long double __t1 = (__a + 1.0e+0) / (__c * 2.0e+0);
    const long double __t2 = (__a + 2.0e+0) / ((__c + 1.0e+0) * 2.0e+0);
  <<cleanup_point   long double __F = 1.0e+0;>>;
    long double __prec;
  <<cleanup_point   long double __Bnm3 = 1.0e+0;>>;
    long double __Bnm2 = (long double) __t1 * (long double) __x + 1.0e+0;
    long double __Bnm1 = ((long double) __t2 * (long double) __x) * (((long double) __t1 / 3.0e+0) * (long double) __x + 1.0e+0) + 1.0e+0;
  <<cleanup_point   long double __Anm3 = 1.0e+0;>>;
    long double __Anm2 = __Bnm2 - (long double) __t0 * (long double) __x;
    long double __Anm1 = (__Bnm1 - (((long double) __t2 * (long double) __x + 1.0e+0) * (long double) __t0) * (long double) __x) + ((((long double) __t0 * (long double) __t1) * (__c / (__c + 1.0e+0))) * (long double) __x) * (long double) __x;
  <<cleanup_point   int __n = 3;>>;
  <D.91662>:;
  {
    long double __npam1 = (long double) (__n + -1) + __a;
    long double __npcm1 = (long double) (__n + -1) + __c;
    long double __npam2 = (long double) (__n + -2) + __a;
    long double __npcm2 = (long double) (__n + -2) + __c;
    long double __tnm1 = (long double) (__n * 2 + -1);
    long double __tnm3 = (long double) (__n * 2 + -3);
    long double __tnm5 = (long double) (__n * 2 + -5);
    long double __F1 = ((long double) (__n + -2) - __a) / ((__tnm3 * 2.0e+0) * __npcm1);
    long double __F2 = (((long double) __n + __a) * __npam1) / ((((__tnm1 * 4.0e+0) * __tnm3) * __npcm2) * __npcm1);
    long double __F3 = ((-NON_LVALUE_EXPR <__npam2> * __npam1) * ((long double) (__n + -2) - __a)) / ((((((__tnm3 * 8.0e+0) * __tnm3) * __tnm5) * ((long double) (__n + -3) + __c)) * __npcm2) * __npcm1);
    long double __E = (-NON_LVALUE_EXPR <__npam1> * ((long double) (__n + -1) - __c)) / (((__tnm3 * 2.0e+0) * __npcm2) * __npcm1);
    long double __An = ((__F1 * (long double) __x + 1.0e+0) * __Anm1 + ((__F2 * (long double) __x + __E) * (long double) __x) * __Anm2) + (__F3 * (long double) __x3) * __Anm3;
    long double __Bn = ((__F1 * (long double) __x + 1.0e+0) * __Bnm1 + ((__F2 * (long double) __x + __E) * (long double) __x) * __Bnm2) + (__F3 * (long double) __x3) * __Bnm3;
    long double __r = __An / __Bn;

        long double __npam1 = (long double) (__n + -1) + __a;
        long double __npcm1 = (long double) (__n + -1) + __c;
        long double __npam2 = (long double) (__n + -2) + __a;
        long double __npcm2 = (long double) (__n + -2) + __c;
        long double __tnm1 = (long double) (__n * 2 + -1);
        long double __tnm3 = (long double) (__n * 2 + -3);
        long double __tnm5 = (long double) (__n * 2 + -5);
        long double __F1 = ((long double) (__n + -2) - __a) / ((__tnm3 * 2.0e+0) * __npcm1);
        long double __F2 = (((long double) __n + __a) * __npam1) / ((((__tnm1 * 4.0e+0) * __tnm3) * __npcm2) * __npcm1);
        long double __F3 = ((-NON_LVALUE_EXPR <__npam2> * __npam1) * ((long double) (__n + -2) - __a)) / ((((((__tnm3 * 8.0e+0) * __tnm3) * __tnm5) * ((long double) (__n + -3) + __c)) * __npcm2) * __npcm1);
        long double __E = (-NON_LVALUE_EXPR <__npam1> * ((long double) (__n + -1) - __c)) / (((__tnm3 * 2.0e+0) * __npcm2) * __npcm1);
        long double __An = ((__F1 * (long double) __x + 1.0e+0) * __Anm1 + ((__F2 * (long double) __x + __E) * (long double) __x) * __Anm2) + (__F3 * (long double) __x3) * __Anm3;
        long double __Bn = ((__F1 * (long double) __x + 1.0e+0) * __Bnm1 + ((__F2 * (long double) __x + __E) * (long double) __x) * __Bnm2) + (__F3 * (long double) __x3) * __Bnm3;
        long double __r = __An / __Bn;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__prec = std::abs ((__F - __r) / __F)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__F = __r) >>>>>;
    if (__prec < 1.08420217248550443400745280086994171142578125e-19 || __n > 20000) goto <D.91660>;
    if (<<cleanup_point std::abs (__An) > 1.35541358258717845955555831788480932099095835155308898171e+789 || std::abs (__Bn) > 1.35541358258717845955555831788480932099095835155308898171e+789>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__An = __An / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bn = __Bn / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm1 = __Anm1 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm1 = __Bnm1 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm2 = __Anm2 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm2 = __Bnm2 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm3 = __Anm3 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm3 = __Bnm3 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
      }
    else
      {
        if (<<cleanup_point std::abs (__An) < 7.37782189028404018702737313063030788604488231957839135432e-790 || std::abs (__Bn) < 7.37782189028404018702737313063030788604488231957839135432e-790>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__An = __An * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bn = __Bn * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm1 = __Anm1 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm1 = __Bnm1 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm2 = __Anm2 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm2 = __Bnm2 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm3 = __Anm3 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm3 = __Bnm3 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
          }
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void)  ++__n >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm3 = __Bnm2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm2 = __Bnm1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm1 = __Bn) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm3 = __Anm2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm2 = __Anm1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm1 = __An) >>>>>;
  }
  goto <D.91662>;
  <D.91660>:;
  if (__n > 19999)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Iteration failed to converge in __conf_hyperg_luke.") >>>>>;
    }
  return <retval> = __F;
}


;; Function _Tp std::__detail::__conf_hyperg_series(_Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  long double __term = 1.0e+0;
  long double __Fac = 1.0e+0;
  const unsigned int __max_iter = 100000;
  unsigned int __i;

  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   long double __term = 1.0e+0;>>;
  <<cleanup_point   long double __Fac = 1.0e+0;>>;
  <<cleanup_point   const unsigned int __max_iter = 100000;>>;
    unsigned int __i;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__i = 0) >>>>>;
  goto <D.91675>;
  <D.91674>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term = ((((long double) __i + __a) * __x) / (((long double) __i + __c) * (long double) (__i + 1))) * __term) >>>>>;
  if (<<cleanup_point std::abs (__term) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91672>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__Fac = __Fac + __term) >>>>>;
  <<cleanup_point (void)  ++__i>>;
  <D.91675>:;
  if (__i <= 99999) goto <D.91674>; else goto <D.91672>;
  <D.91672>:;
  if (__i == 100000)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Series failed to converge in __conf_hyperg_series.") >>>>>;
    }
  return <retval> = __Fac;
}


;; Function _Tp std::__detail::__hyperg_series(_Tp, _Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __eps = 1.1920928955078125e-7;
  float __term = 1.0e+0;
  float __Fabc = 1.0e+0;
  const unsigned int __max_iter = 100000;
  unsigned int __i;

  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   float __term = 1.0e+0;>>;
  <<cleanup_point   float __Fabc = 1.0e+0;>>;
  <<cleanup_point   const unsigned int __max_iter = 100000;>>;
    unsigned int __i;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__i = 0) >>>>>;
  goto <D.91689>;
  <D.91688>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term = (((((float) __i + __a) * ((float) __i + __b)) * __x) / (((float) __i + __c) * (float) (__i + 1))) * __term) >>>>>;
  if (<<cleanup_point std::abs (__term) < 1.1920928955078125e-7>>) goto <D.91686>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__Fabc = __Fabc + __term) >>>>>;
  <<cleanup_point (void)  ++__i>>;
  <D.91689>:;
  if (__i <= 99999) goto <D.91688>; else goto <D.91686>;
  <D.91686>:;
  if (__i == 100000)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Series failed to converge in __hyperg_series.") >>>>>;
    }
  return <retval> = __Fabc;
}


;; Function _Tp std::__detail::__hyperg_luke(_Tp, _Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __big = 1.46249425e+6;
  const int __nmax = 20000;
  const float __eps = 1.1920928955078125e-7;
  const float __x = -NON_LVALUE_EXPR <__xin>;
  const float __x3 = ((float) __x * (float) __x) * (float) __x;
  const float __t0 = (__a * __b) / __c;
  const float __t1 = ((__a + 1.0e+0) * (__b + 1.0e+0)) / (__c * 2.0e+0);
  const float __t2 = ((__a + 2.0e+0) * (__b + 2.0e+0)) / ((__c + 1.0e+0) * 2.0e+0);
  float __F = 1.0e+0;
  float __Bnm3 = 1.0e+0;
  float __Bnm2 = (float) __t1 * (float) __x + 1.0e+0;
  float __Bnm1 = ((float) __t2 * (float) __x) * (((float) __t1 / 3.0e+0) * (float) __x + 1.0e+0) + 1.0e+0;
  float __Anm3 = 1.0e+0;
  float __Anm2 = __Bnm2 - (float) __t0 * (float) __x;
  float __Anm1 = (__Bnm1 - (((float) __t2 * (float) __x + 1.0e+0) * (float) __t0) * (float) __x) + ((((float) __t0 * (float) __t1) * (__c / (__c + 1.0e+0))) * (float) __x) * (float) __x;
  int __n = 3;

  <<cleanup_point   const float __big = 1.46249425e+6;>>;
  <<cleanup_point   const int __nmax = 20000;>>;
  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
    const float __x = -NON_LVALUE_EXPR <__xin>;
    const float __x3 = ((float) __x * (float) __x) * (float) __x;
    const float __t0 = (__a * __b) / __c;
    const float __t1 = ((__a + 1.0e+0) * (__b + 1.0e+0)) / (__c * 2.0e+0);
    const float __t2 = ((__a + 2.0e+0) * (__b + 2.0e+0)) / ((__c + 1.0e+0) * 2.0e+0);
  <<cleanup_point   float __F = 1.0e+0;>>;
  <<cleanup_point   float __Bnm3 = 1.0e+0;>>;
    float __Bnm2 = (float) __t1 * (float) __x + 1.0e+0;
    float __Bnm1 = ((float) __t2 * (float) __x) * (((float) __t1 / 3.0e+0) * (float) __x + 1.0e+0) + 1.0e+0;
  <<cleanup_point   float __Anm3 = 1.0e+0;>>;
    float __Anm2 = __Bnm2 - (float) __t0 * (float) __x;
    float __Anm1 = (__Bnm1 - (((float) __t2 * (float) __x + 1.0e+0) * (float) __t0) * (float) __x) + ((((float) __t0 * (float) __t1) * (__c / (__c + 1.0e+0))) * (float) __x) * (float) __x;
  <<cleanup_point   int __n = 3;>>;
  <D.91731>:;
  {
    const float __npam1 = (float) (__n + -1) + __a;
    const float __npbm1 = (float) (__n + -1) + __b;
    const float __npcm1 = (float) (__n + -1) + __c;
    const float __npam2 = (float) (__n + -2) + __a;
    const float __npbm2 = (float) (__n + -2) + __b;
    const float __npcm2 = (float) (__n + -2) + __c;
    const float __tnm1 = (float) (__n * 2 + -1);
    const float __tnm3 = (float) (__n * 2 + -3);
    const float __tnm5 = (float) (__n * 2 + -5);
    const float __n2 = (float) (__n * __n);
    const float __F1 = (((((float) __n2 * 3.0e+0 + ((__a + __b) - 6.0e+0) * (float) __n) + 2.0e+0) - __a * __b) - (__a + __b) * 2.0e+0) / (((float) __tnm3 * 2.0e+0) * (float) __npcm1);
    const float __F2 = ((-((((float) __n2 * 3.0e+0 - ((__a + __b) + 6.0e+0) * (float) __n) + 2.0e+0) - __a * __b) * (float) __npam1) * (float) __npbm1) / (((((float) __tnm1 * 4.0e+0) * (float) __tnm3) * (float) __npcm2) * (float) __npcm1);
    const float __F3 = ((((((float) __npam2 * (float) __npam1) * (float) __npbm2) * (float) __npbm1) * ((float) (__n + -2) - __a)) * ((float) (__n + -2) - __b)) / (((((((float) __tnm3 * 8.0e+0) * (float) __tnm3) * (float) __tnm5) * ((float) (__n + -3) + __c)) * (float) __npcm2) * (float) __npcm1);
    const float __E = ((-NON_LVALUE_EXPR <__npam1> * (float) __npbm1) * ((float) (__n + -1) - __c)) / ((((float) __tnm3 * 2.0e+0) * (float) __npcm2) * (float) __npcm1);
    float __An = (((float) __F1 * (float) __x + 1.0e+0) * __Anm1 + (((float) __F2 * (float) __x + (float) __E) * (float) __x) * __Anm2) + ((float) __F3 * (float) __x3) * __Anm3;
    float __Bn = (((float) __F1 * (float) __x + 1.0e+0) * __Bnm1 + (((float) __F2 * (float) __x + (float) __E) * (float) __x) * __Bnm2) + ((float) __F3 * (float) __x3) * __Bnm3;
    const float __r = __An / __Bn;
    const float __prec;

        const float __npam1 = (float) (__n + -1) + __a;
        const float __npbm1 = (float) (__n + -1) + __b;
        const float __npcm1 = (float) (__n + -1) + __c;
        const float __npam2 = (float) (__n + -2) + __a;
        const float __npbm2 = (float) (__n + -2) + __b;
        const float __npcm2 = (float) (__n + -2) + __c;
        const float __tnm1 = (float) (__n * 2 + -1);
        const float __tnm3 = (float) (__n * 2 + -3);
        const float __tnm5 = (float) (__n * 2 + -5);
        const float __n2 = (float) (__n * __n);
        const float __F1 = (((((float) __n2 * 3.0e+0 + ((__a + __b) - 6.0e+0) * (float) __n) + 2.0e+0) - __a * __b) - (__a + __b) * 2.0e+0) / (((float) __tnm3 * 2.0e+0) * (float) __npcm1);
        const float __F2 = ((-((((float) __n2 * 3.0e+0 - ((__a + __b) + 6.0e+0) * (float) __n) + 2.0e+0) - __a * __b) * (float) __npam1) * (float) __npbm1) / (((((float) __tnm1 * 4.0e+0) * (float) __tnm3) * (float) __npcm2) * (float) __npcm1);
        const float __F3 = ((((((float) __npam2 * (float) __npam1) * (float) __npbm2) * (float) __npbm1) * ((float) (__n + -2) - __a)) * ((float) (__n + -2) - __b)) / (((((((float) __tnm3 * 8.0e+0) * (float) __tnm3) * (float) __tnm5) * ((float) (__n + -3) + __c)) * (float) __npcm2) * (float) __npcm1);
        const float __E = ((-NON_LVALUE_EXPR <__npam1> * (float) __npbm1) * ((float) (__n + -1) - __c)) / ((((float) __tnm3 * 2.0e+0) * (float) __npcm2) * (float) __npcm1);
        float __An = (((float) __F1 * (float) __x + 1.0e+0) * __Anm1 + (((float) __F2 * (float) __x + (float) __E) * (float) __x) * __Anm2) + ((float) __F3 * (float) __x3) * __Anm3;
        float __Bn = (((float) __F1 * (float) __x + 1.0e+0) * __Bnm1 + (((float) __F2 * (float) __x + (float) __E) * (float) __x) * __Bnm2) + ((float) __F3 * (float) __x3) * __Bnm3;
        const float __r = __An / __Bn;
        const float __prec;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__prec = std::abs ((__F - (float) __r) / __F)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__F = (float) __r) >>>>>;
    if ((float) __prec < 1.1920928955078125e-7 || __n > 20000) goto <D.91729>;
    if (<<cleanup_point std::abs (__An) > 1.46249425e+6 || std::abs (__Bn) > 1.46249425e+6>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__An = __An / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bn = __Bn / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm1 = __Anm1 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm1 = __Bnm1 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm2 = __Anm2 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm2 = __Bnm2 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm3 = __Anm3 / 1.46249425e+6) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm3 = __Bnm3 / 1.46249425e+6) >>>>>;
      }
    else
      {
        if (<<cleanup_point std::abs (__An) < 6.83763346387422643601894378662109375e-7 || std::abs (__Bn) < 6.83763346387422643601894378662109375e-7>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__An = __An * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bn = __Bn * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm1 = __Anm1 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm1 = __Bnm1 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm2 = __Anm2 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm2 = __Bnm2 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm3 = __Anm3 * 1.46249425e+6) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm3 = __Bnm3 * 1.46249425e+6) >>>>>;
          }
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void)  ++__n >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm3 = __Bnm2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm2 = __Bnm1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm1 = __Bn) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm3 = __Anm2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm2 = __Anm1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm1 = __An) >>>>>;
  }
  goto <D.91731>;
  <D.91729>:;
  if (__n > 19999)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Iteration failed to converge in __hyperg_luke.") >>>>>;
    }
  return <retval> = __F;
}


;; Function _Tp std::__detail::__hyperg_reflect(_Tp, _Tp, _Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __d = (__c - __a) - __b;
  const int __intd;
  const float __eps = 1.1920928955078125e-7;
  const float __toler = 1.1920928955078125e-4;
  const float __log_max = 8.872283935546875e+1;
  const bool __d_integer;

    const float __d = (__c - __a) - __b;
    const int __intd;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__intd = (int) std::floor ((float) __d + 5.0e-1)) >>>>>;
  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   const float __toler = 1.1920928955078125e-4;>>;
  <<cleanup_point   const float __log_max = 8.872283935546875e+1;>>;
    const bool __d_integer;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__d_integer = std::abs ((float) __d - (float) __intd) < 1.1920928955078125e-4) >>>>>;
  {
    if ((bool) __d_integer)
      {
        {
          const float __ln_omx;
          const float __ad;
          float __F1;
          float __F2;
          float __d1;
          float __d2;
          const float __lng_c;
          bool __ok_d2 = 1;
          float __lng_ad2;
          float __lng_bd2;
          const float __sgn_2 = (int) __intd % 2 == 1 ? -1.0e+0 : 1.0e+0;
          const float __F = (float) __sgn_2 * __F2 + __F1;

                    const float __ln_omx;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ln_omx = std::log (1.0e+0 - __x)) >>>>>;
                    const float __ad;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ad = std::abs ((float) __d)) >>>>>;
                    float __F1;
                    float __F2;
                    float __d1;
                    float __d2;
          if ((float) __d >= 0.0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d1 = (float) __d) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d2 = 0.0) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d1 = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d2 = (float) __d) >>>>>;
            }
                    const float __lng_c;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__lng_c = std::__detail::__log_gamma<float> (__c)) >>>>>;
          {
            if ((float) __ad < 1.1920928955078125e-7)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__F1 = 0.0) >>>>>;
              }
            else
              {
                {
                  bool __ok_d1 = 1;
                  float __lng_ad;
                  float __lng_ad1;
                  float __lng_bd1;

                  <<cleanup_point                   bool __ok_d1 = 1;>>;
                                    float __lng_ad;
                                    float __lng_ad1;
                                    float __lng_bd1;
                  <<< Unknown tree: try_block
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__lng_ad = std::__detail::__log_gamma<float> ((float) __ad)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__lng_ad1 = std::__detail::__log_gamma<float> (__a + __d1)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__lng_bd1 = std::__detail::__log_gamma<float> (__b + __d1)) >>>>>;
                    <<< Unknown tree: handler
                      
                      try
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__ok_d1 = 0) >>>>>;
                        }
                      finally
                        {
                          __cxa_end_catch ();
                        } >>> >>>;
                  {
                    if (__ok_d1)
                      {
                        {
                          float __sum1 = 1.0e+0;
                          float __term = 1.0e+0;
                          float __ln_pre1 = (((__lng_ad + (float) __lng_c) + __d2 * (float) __ln_omx) - __lng_ad1) - __lng_bd1;

                          <<cleanup_point                           float __sum1 = 1.0e+0;>>;
                          <<cleanup_point                           float __term = 1.0e+0;>>;
                                                    float __ln_pre1 = (((__lng_ad + (float) __lng_c) + __d2 * (float) __ln_omx) - __lng_ad1) - __lng_bd1;
                          {
                            int __i = 1;

                            <<cleanup_point                             int __i = 1;>>;
                            goto <D.91813>;
                            <D.91812>:;
                            {
                              const int __j = __i + -1;

                                                            const int __j = __i + -1;
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__term = ((((((__a + __d2) + (float) __j) * ((__b + __d2) + (float) __j)) / ((__d2 + 1.0e+0) + (float) __j)) / (float) __i) * (1.0e+0 - __x)) * __term) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__sum1 = __sum1 + __term) >>>>>;
                            }
                            <<cleanup_point (void)  ++__i>>;
                            <D.91813>:;
                            if ((float) __i < (float) __ad) goto <D.91812>; else goto <D.91810>;
                            <D.91810>:;
                          }
                          if (__ln_pre1 > 8.872283935546875e+1)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                std::__throw_runtime_error ((const char *) "Overflow of gamma functions in __hyperg_luke.") >>>>>;
                            }
                          else
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__F1 = std::exp (__ln_pre1) * __sum1) >>>>>;
                            }
                        }
                      }
                    else
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
                          (void) (__F1 = 0.0) >>>>>;
                      }
                  }
                }
              }
          }
          <<cleanup_point           bool __ok_d2 = 1;>>;
                    float __lng_ad2;
                    float __lng_bd2;
          <<< Unknown tree: try_block
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__lng_ad2 = std::__detail::__log_gamma<float> (__a + __d2)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__lng_bd2 = std::__detail::__log_gamma<float> (__b + __d2)) >>>>>;
            <<< Unknown tree: handler
              
              try
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ok_d2 = 0) >>>>>;
                }
              finally
                {
                  __cxa_end_catch ();
                } >>> >>>;
          {
            if (__ok_d2)
              {
                {
                  const int __maxiter = 2000;
                  const float __psi_1;
                  const float __psi_1pd;
                  const float __psi_apd1;
                  const float __psi_bpd1;
                  float __psi_term = ((((float) __psi_1 + (float) __psi_1pd) - (float) __psi_apd1) - (float) __psi_bpd1) - (float) __ln_omx;
                  float __fact = 1.0e+0;
                  float __sum2 = __psi_term;
                  float __ln_pre2 = ((__d1 * (float) __ln_omx + (float) __lng_c) - __lng_ad2) - __lng_bd2;
                  int __j;

                  <<cleanup_point                   const int __maxiter = 2000;>>;
                                    const float __psi_1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__psi_1 = -std::__detail::__numeric_constants<float>::__gamma_e ()) >>>>>;
                                    const float __psi_1pd;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__psi_1pd = std::__detail::__psi<float> ((float) __ad + 1.0e+0)) >>>>>;
                                    const float __psi_apd1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__psi_apd1 = std::__detail::__psi<float> (__a + __d1)) >>>>>;
                                    const float __psi_bpd1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__psi_bpd1 = std::__detail::__psi<float> (__b + __d1)) >>>>>;
                                    float __psi_term = ((((float) __psi_1 + (float) __psi_1pd) - (float) __psi_apd1) - (float) __psi_bpd1) - (float) __ln_omx;
                  <<cleanup_point                   float __fact = 1.0e+0;>>;
                                    float __sum2 = __psi_term;
                                    float __ln_pre2 = ((__d1 * (float) __ln_omx + (float) __lng_c) - __lng_ad2) - __lng_bd2;
                                    int __j;
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__j = 1) >>>>>;
                    goto <D.91817>;
                    <D.91816>:;
                    {
                      const float __term1 = 1.0e+0 / (float) __j + 1.0e+0 / ((float) __j + (float) __ad);
                      const float __term2 = 1.0e+0 / ((__a + __d1) + (float) (__j + -1)) + 1.0e+0 / ((__b + __d1) + (float) (__j + -1));
                      const float __delta = __fact * __psi_term;

                                            const float __term1 = 1.0e+0 / (float) __j + 1.0e+0 / ((float) __j + (float) __ad);
                                            const float __term2 = 1.0e+0 / ((__a + __d1) + (float) (__j + -1)) + 1.0e+0 / ((__b + __d1) + (float) (__j + -1));
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__psi_term = ((float) __term1 - (float) __term2) + __psi_term) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__fact = (((((__a + __d1) + (float) (__j + -1)) * ((__b + __d1) + (float) (__j + -1))) / (((float) __j + (float) __ad) * (float) __j)) * (1.0e+0 - __x)) * __fact) >>>>>;
                                            const float __delta = __fact * __psi_term;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__sum2 = __sum2 + (float) __delta) >>>>>;
                      if (<<cleanup_point std::abs ((float) __delta) < std::abs (__sum2) * 1.1920928955078125e-7>>) goto <D.91814>;
                    }
                    <<cleanup_point (void)  ++__j>>;
                    <D.91817>:;
                    if (__j <= 1999) goto <D.91816>; else goto <D.91814>;
                    <D.91814>:;
                  }
                  if (__j == 2000)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        std::__throw_runtime_error ((const char *) "Sum F2 failed to converge in __hyperg_reflect") >>>>>;
                    }
                  if (__sum2 == 0.0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__F2 = 0.0) >>>>>;
                    }
                  else
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__F2 = std::exp (__ln_pre2) * __sum2) >>>>>;
                    }
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__F2 = 0.0) >>>>>;
              }
          }
                    const float __sgn_2 = (int) __intd % 2 == 1 ? -1.0e+0 : 1.0e+0;
                    const float __F = (float) __sgn_2 * __F2 + __F1;
          return <retval> = (float) __F;
        }
      }
    else
      {
        {
          bool __ok1 = 1;
          float __sgn_g1ca = 0.0;
          float __ln_g1ca = 0.0;
          float __sgn_g1cb = 0.0;
          float __ln_g1cb = 0.0;
          bool __ok2 = 1;
          float __sgn_g2a = 0.0;
          float __ln_g2a = 0.0;
          float __sgn_g2b = 0.0;
          float __ln_g2b = 0.0;
          const float __sgn_gc;
          const float __ln_gc;
          const float __sgn_gd;
          const float __ln_gd;
          const float __sgn_gmd;
          const float __ln_gmd;
          const float __sgn1 = (((float) __sgn_gc * (float) __sgn_gd) * __sgn_g1ca) * __sgn_g1cb;
          const float __sgn2 = (((float) __sgn_gc * (float) __sgn_gmd) * __sgn_g2a) * __sgn_g2b;
          float __pre1;
          float __pre2;
          const float __F1;
          const float __F2;
          const float __F = __pre1 * (float) __F1 + __pre2 * (float) __F2;

          <<cleanup_point           bool __ok1 = 1;>>;
          <<cleanup_point           float __sgn_g1ca = 0.0;>>;
          <<cleanup_point           float __ln_g1ca = 0.0;>>;
          <<cleanup_point           float __sgn_g1cb = 0.0;>>;
          <<cleanup_point           float __ln_g1cb = 0.0;>>;
          <<< Unknown tree: try_block
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__sgn_g1ca = std::__detail::__log_gamma_sign<float> (__c - __a)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ln_g1ca = std::__detail::__log_gamma<float> (__c - __a)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__sgn_g1cb = std::__detail::__log_gamma_sign<float> (__c - __b)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ln_g1cb = std::__detail::__log_gamma<float> (__c - __b)) >>>>>;
            <<< Unknown tree: handler
              
              try
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ok1 = 0) >>>>>;
                }
              finally
                {
                  __cxa_end_catch ();
                } >>> >>>;
          <<cleanup_point           bool __ok2 = 1;>>;
          <<cleanup_point           float __sgn_g2a = 0.0;>>;
          <<cleanup_point           float __ln_g2a = 0.0;>>;
          <<cleanup_point           float __sgn_g2b = 0.0;>>;
          <<cleanup_point           float __ln_g2b = 0.0;>>;
          <<< Unknown tree: try_block
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__sgn_g2a = std::__detail::__log_gamma_sign<float> (__a)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ln_g2a = std::__detail::__log_gamma<float> (__a)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__sgn_g2b = std::__detail::__log_gamma_sign<float> (__b)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ln_g2b = std::__detail::__log_gamma<float> (__b)) >>>>>;
            <<< Unknown tree: handler
              
              try
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ok2 = 0) >>>>>;
                }
              finally
                {
                  __cxa_end_catch ();
                } >>> >>>;
                    const float __sgn_gc;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sgn_gc = std::__detail::__log_gamma_sign<float> (__c)) >>>>>;
                    const float __ln_gc;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ln_gc = std::__detail::__log_gamma<float> (__c)) >>>>>;
                    const float __sgn_gd;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sgn_gd = std::__detail::__log_gamma_sign<float> ((float) __d)) >>>>>;
                    const float __ln_gd;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ln_gd = std::__detail::__log_gamma<float> ((float) __d)) >>>>>;
                    const float __sgn_gmd;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sgn_gmd = std::__detail::__log_gamma_sign<float> (-NON_LVALUE_EXPR <__d>)) >>>>>;
                    const float __ln_gmd;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ln_gmd = std::__detail::__log_gamma<float> (-NON_LVALUE_EXPR <__d>)) >>>>>;
                    const float __sgn1 = (((float) __sgn_gc * (float) __sgn_gd) * __sgn_g1ca) * __sgn_g1cb;
                    const float __sgn2 = (((float) __sgn_gc * (float) __sgn_gmd) * __sgn_g2a) * __sgn_g2b;
                    float __pre1;
                    float __pre2;
          {
            if (__ok1 && __ok2)
              {
                {
                  float __ln_pre1 = (((float) __ln_gc + (float) __ln_gd) - __ln_g1ca) - __ln_g1cb;
                  float __ln_pre2;

                                    float __ln_pre1 = (((float) __ln_gc + (float) __ln_gd) - __ln_g1ca) - __ln_g1cb;
                                    float __ln_pre2;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ln_pre2 = ((((float) __ln_gc + (float) __ln_gmd) - __ln_g2a) - __ln_g2b) + std::log (1.0e+0 - __x) * (float) __d) >>>>>;
                  if (__ln_pre1 < 8.872283935546875e+1 && __ln_pre2 < 8.872283935546875e+1)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pre1 = std::exp (__ln_pre1)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pre2 = std::exp (__ln_pre2)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pre1 = __pre1 * (float) __sgn1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pre2 = __pre2 * (float) __sgn2) >>>>>;
                    }
                  else
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        std::__throw_runtime_error ((const char *) "Overflow of gamma functions in __hyperg_reflect") >>>>>;
                    }
                }
              }
            else
              {
                {
                  {
                    if (!__ok2 && __ok1)
                      {
                        {
                          float __ln_pre1 = (((float) __ln_gc + (float) __ln_gd) - __ln_g1ca) - __ln_g1cb;

                                                    float __ln_pre1 = (((float) __ln_gc + (float) __ln_gd) - __ln_g1ca) - __ln_g1cb;
                          if (__ln_pre1 < 8.872283935546875e+1)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__pre1 = std::exp (__ln_pre1)) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__pre1 = __pre1 * (float) __sgn1) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__pre2 = 0.0) >>>>>;
                            }
                          else
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                std::__throw_runtime_error ((const char *) "Overflow of gamma functions in __hyperg_reflect") >>>>>;
                            }
                        }
                      }
                    else
                      {
                        {
                          {
                            if (!__ok1 && __ok2)
                              {
                                {
                                  float __ln_pre2;

                                                                    float __ln_pre2;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (__ln_pre2 = ((((float) __ln_gc + (float) __ln_gmd) - __ln_g2a) - __ln_g2b) + std::log (1.0e+0 - __x) * (float) __d) >>>>>;
                                  if (__ln_pre2 < 8.872283935546875e+1)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
                                        (void) (__pre1 = 0.0) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
                                        (void) (__pre2 = std::exp (__ln_pre2)) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
                                        (void) (__pre2 = __pre2 * (float) __sgn2) >>>>>;
                                    }
                                  else
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
                                        std::__throw_runtime_error ((const char *) "Overflow of gamma functions in __hyperg_reflect") >>>>>;
                                    }
                                }
                              }
                            else
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
                                  (void) (__pre1 = 0.0) >>>>>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
                                  (void) (__pre2 = 0.0) >>>>>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
                                  std::__throw_runtime_error ((const char *) "Underflow of gamma functions in __hyperg_reflect") >>>>>;
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
                    const float __F1;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__F1 = std::__detail::__hyperg_series<float> (__a, __b, 1.0e+0 - (float) __d, 1.0e+0 - __x)) >>>>>;
                    const float __F2;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__F2 = std::__detail::__hyperg_series<float> (__c - __a, __c - __b, (float) __d + 1.0e+0, 1.0e+0 - __x)) >>>>>;
                    const float __F = __pre1 * (float) __F1 + __pre2 * (float) __F2;
          return <retval> = (float) __F;
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__hyperg_series(_Tp, _Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  long double __term = 1.0e+0;
  long double __Fabc = 1.0e+0;
  const unsigned int __max_iter = 100000;
  unsigned int __i;

  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   long double __term = 1.0e+0;>>;
  <<cleanup_point   long double __Fabc = 1.0e+0;>>;
  <<cleanup_point   const unsigned int __max_iter = 100000;>>;
    unsigned int __i;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__i = 0) >>>>>;
  goto <D.91831>;
  <D.91830>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term = (((((long double) __i + __a) * ((long double) __i + __b)) * __x) / (((long double) __i + __c) * (long double) (__i + 1))) * __term) >>>>>;
  if (<<cleanup_point std::abs (__term) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91828>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__Fabc = __Fabc + __term) >>>>>;
  <<cleanup_point (void)  ++__i>>;
  <D.91831>:;
  if (__i <= 99999) goto <D.91830>; else goto <D.91828>;
  <D.91828>:;
  if (__i == 100000)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Series failed to converge in __hyperg_series.") >>>>>;
    }
  return <retval> = __Fabc;
}


;; Function _Tp std::__detail::__hyperg_luke(_Tp, _Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __big = 1.35541358258717845955555831788480932099095835155308898171e+789;
  const int __nmax = 20000;
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __x = -NON_LVALUE_EXPR <__xin>;
  const long double __x3 = ((long double) __x * (long double) __x) * (long double) __x;
  const long double __t0 = (__a * __b) / __c;
  const long double __t1 = ((__a + 1.0e+0) * (__b + 1.0e+0)) / (__c * 2.0e+0);
  const long double __t2 = ((__a + 2.0e+0) * (__b + 2.0e+0)) / ((__c + 1.0e+0) * 2.0e+0);
  long double __F = 1.0e+0;
  long double __Bnm3 = 1.0e+0;
  long double __Bnm2 = (long double) __t1 * (long double) __x + 1.0e+0;
  long double __Bnm1 = ((long double) __t2 * (long double) __x) * (((long double) __t1 / 3.0e+0) * (long double) __x + 1.0e+0) + 1.0e+0;
  long double __Anm3 = 1.0e+0;
  long double __Anm2 = __Bnm2 - (long double) __t0 * (long double) __x;
  long double __Anm1 = (__Bnm1 - (((long double) __t2 * (long double) __x + 1.0e+0) * (long double) __t0) * (long double) __x) + ((((long double) __t0 * (long double) __t1) * (__c / (__c + 1.0e+0))) * (long double) __x) * (long double) __x;
  int __n = 3;

  <<cleanup_point   const long double __big = 1.35541358258717845955555831788480932099095835155308898171e+789;>>;
  <<cleanup_point   const int __nmax = 20000;>>;
  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
    const long double __x = -NON_LVALUE_EXPR <__xin>;
    const long double __x3 = ((long double) __x * (long double) __x) * (long double) __x;
    const long double __t0 = (__a * __b) / __c;
    const long double __t1 = ((__a + 1.0e+0) * (__b + 1.0e+0)) / (__c * 2.0e+0);
    const long double __t2 = ((__a + 2.0e+0) * (__b + 2.0e+0)) / ((__c + 1.0e+0) * 2.0e+0);
  <<cleanup_point   long double __F = 1.0e+0;>>;
  <<cleanup_point   long double __Bnm3 = 1.0e+0;>>;
    long double __Bnm2 = (long double) __t1 * (long double) __x + 1.0e+0;
    long double __Bnm1 = ((long double) __t2 * (long double) __x) * (((long double) __t1 / 3.0e+0) * (long double) __x + 1.0e+0) + 1.0e+0;
  <<cleanup_point   long double __Anm3 = 1.0e+0;>>;
    long double __Anm2 = __Bnm2 - (long double) __t0 * (long double) __x;
    long double __Anm1 = (__Bnm1 - (((long double) __t2 * (long double) __x + 1.0e+0) * (long double) __t0) * (long double) __x) + ((((long double) __t0 * (long double) __t1) * (__c / (__c + 1.0e+0))) * (long double) __x) * (long double) __x;
  <<cleanup_point   int __n = 3;>>;
  <D.91873>:;
  {
    const long double __npam1 = (long double) (__n + -1) + __a;
    const long double __npbm1 = (long double) (__n + -1) + __b;
    const long double __npcm1 = (long double) (__n + -1) + __c;
    const long double __npam2 = (long double) (__n + -2) + __a;
    const long double __npbm2 = (long double) (__n + -2) + __b;
    const long double __npcm2 = (long double) (__n + -2) + __c;
    const long double __tnm1 = (long double) (__n * 2 + -1);
    const long double __tnm3 = (long double) (__n * 2 + -3);
    const long double __tnm5 = (long double) (__n * 2 + -5);
    const long double __n2 = (long double) (__n * __n);
    const long double __F1 = (((((long double) __n2 * 3.0e+0 + ((__a + __b) - 6.0e+0) * (long double) __n) + 2.0e+0) - __a * __b) - (__a + __b) * 2.0e+0) / (((long double) __tnm3 * 2.0e+0) * (long double) __npcm1);
    const long double __F2 = ((-((((long double) __n2 * 3.0e+0 - ((__a + __b) + 6.0e+0) * (long double) __n) + 2.0e+0) - __a * __b) * (long double) __npam1) * (long double) __npbm1) / (((((long double) __tnm1 * 4.0e+0) * (long double) __tnm3) * (long double) __npcm2) * (long double) __npcm1);
    const long double __F3 = ((((((long double) __npam2 * (long double) __npam1) * (long double) __npbm2) * (long double) __npbm1) * ((long double) (__n + -2) - __a)) * ((long double) (__n + -2) - __b)) / (((((((long double) __tnm3 * 8.0e+0) * (long double) __tnm3) * (long double) __tnm5) * ((long double) (__n + -3) + __c)) * (long double) __npcm2) * (long double) __npcm1);
    const long double __E = ((-NON_LVALUE_EXPR <__npam1> * (long double) __npbm1) * ((long double) (__n + -1) - __c)) / ((((long double) __tnm3 * 2.0e+0) * (long double) __npcm2) * (long double) __npcm1);
    long double __An = (((long double) __F1 * (long double) __x + 1.0e+0) * __Anm1 + (((long double) __F2 * (long double) __x + (long double) __E) * (long double) __x) * __Anm2) + ((long double) __F3 * (long double) __x3) * __Anm3;
    long double __Bn = (((long double) __F1 * (long double) __x + 1.0e+0) * __Bnm1 + (((long double) __F2 * (long double) __x + (long double) __E) * (long double) __x) * __Bnm2) + ((long double) __F3 * (long double) __x3) * __Bnm3;
    const long double __r = __An / __Bn;
    const long double __prec;

        const long double __npam1 = (long double) (__n + -1) + __a;
        const long double __npbm1 = (long double) (__n + -1) + __b;
        const long double __npcm1 = (long double) (__n + -1) + __c;
        const long double __npam2 = (long double) (__n + -2) + __a;
        const long double __npbm2 = (long double) (__n + -2) + __b;
        const long double __npcm2 = (long double) (__n + -2) + __c;
        const long double __tnm1 = (long double) (__n * 2 + -1);
        const long double __tnm3 = (long double) (__n * 2 + -3);
        const long double __tnm5 = (long double) (__n * 2 + -5);
        const long double __n2 = (long double) (__n * __n);
        const long double __F1 = (((((long double) __n2 * 3.0e+0 + ((__a + __b) - 6.0e+0) * (long double) __n) + 2.0e+0) - __a * __b) - (__a + __b) * 2.0e+0) / (((long double) __tnm3 * 2.0e+0) * (long double) __npcm1);
        const long double __F2 = ((-((((long double) __n2 * 3.0e+0 - ((__a + __b) + 6.0e+0) * (long double) __n) + 2.0e+0) - __a * __b) * (long double) __npam1) * (long double) __npbm1) / (((((long double) __tnm1 * 4.0e+0) * (long double) __tnm3) * (long double) __npcm2) * (long double) __npcm1);
        const long double __F3 = ((((((long double) __npam2 * (long double) __npam1) * (long double) __npbm2) * (long double) __npbm1) * ((long double) (__n + -2) - __a)) * ((long double) (__n + -2) - __b)) / (((((((long double) __tnm3 * 8.0e+0) * (long double) __tnm3) * (long double) __tnm5) * ((long double) (__n + -3) + __c)) * (long double) __npcm2) * (long double) __npcm1);
        const long double __E = ((-NON_LVALUE_EXPR <__npam1> * (long double) __npbm1) * ((long double) (__n + -1) - __c)) / ((((long double) __tnm3 * 2.0e+0) * (long double) __npcm2) * (long double) __npcm1);
        long double __An = (((long double) __F1 * (long double) __x + 1.0e+0) * __Anm1 + (((long double) __F2 * (long double) __x + (long double) __E) * (long double) __x) * __Anm2) + ((long double) __F3 * (long double) __x3) * __Anm3;
        long double __Bn = (((long double) __F1 * (long double) __x + 1.0e+0) * __Bnm1 + (((long double) __F2 * (long double) __x + (long double) __E) * (long double) __x) * __Bnm2) + ((long double) __F3 * (long double) __x3) * __Bnm3;
        const long double __r = __An / __Bn;
        const long double __prec;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__prec = std::abs ((__F - (long double) __r) / __F)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__F = (long double) __r) >>>>>;
    if ((long double) __prec < 1.08420217248550443400745280086994171142578125e-19 || __n > 20000) goto <D.91871>;
    if (<<cleanup_point std::abs (__An) > 1.35541358258717845955555831788480932099095835155308898171e+789 || std::abs (__Bn) > 1.35541358258717845955555831788480932099095835155308898171e+789>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__An = __An / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bn = __Bn / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm1 = __Anm1 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm1 = __Bnm1 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm2 = __Anm2 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm2 = __Bnm2 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Anm3 = __Anm3 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__Bnm3 = __Bnm3 / 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
      }
    else
      {
        if (<<cleanup_point std::abs (__An) < 7.37782189028404018702737313063030788604488231957839135432e-790 || std::abs (__Bn) < 7.37782189028404018702737313063030788604488231957839135432e-790>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__An = __An * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bn = __Bn * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm1 = __Anm1 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm1 = __Bnm1 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm2 = __Anm2 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm2 = __Bnm2 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Anm3 = __Anm3 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__Bnm3 = __Bnm3 * 1.35541358258717845955555831788480932099095835155308898171e+789) >>>>>;
          }
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void)  ++__n >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm3 = __Bnm2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm2 = __Bnm1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Bnm1 = __Bn) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm3 = __Anm2) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm2 = __Anm1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__Anm1 = __An) >>>>>;
  }
  goto <D.91873>;
  <D.91871>:;
  if (__n > 19999)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_runtime_error ((const char *) "Iteration failed to converge in __hyperg_luke.") >>>>>;
    }
  return <retval> = __F;
}


;; Function _Tp std::__detail::__hyperg_reflect(_Tp, _Tp, _Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __d = (__c - __a) - __b;
  const int __intd;
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __toler = 1.08420217248550443400745280086994171142578125e-16;
  const long double __log_max = 1.1356523406294143949679664729046635329723358154296875e+4;
  const bool __d_integer;

    const long double __d = (__c - __a) - __b;
    const int __intd;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__intd = (int) std::floor ((long double) __d + 5.0e-1)) >>>>>;
  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   const long double __toler = 1.08420217248550443400745280086994171142578125e-16;>>;
  <<cleanup_point   const long double __log_max = 1.1356523406294143949679664729046635329723358154296875e+4;>>;
    const bool __d_integer;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__d_integer = std::abs ((long double) __d - (long double) __intd) < 1.08420217248550443400745280086994171142578125e-16) >>>>>;
  {
    if ((bool) __d_integer)
      {
        {
          const long double __ln_omx;
          const long double __ad;
          long double __F1;
          long double __F2;
          long double __d1;
          long double __d2;
          const long double __lng_c;
          bool __ok_d2 = 1;
          long double __lng_ad2;
          long double __lng_bd2;
          const long double __sgn_2 = (int) __intd % 2 == 1 ? -1.0e+0 : 1.0e+0;
          const long double __F = (long double) __sgn_2 * __F2 + __F1;

                    const long double __ln_omx;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ln_omx = std::log (1.0e+0 - __x)) >>>>>;
                    const long double __ad;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ad = std::abs ((long double) __d)) >>>>>;
                    long double __F1;
                    long double __F2;
                    long double __d1;
                    long double __d2;
          if ((long double) __d >= 0.0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d1 = (long double) __d) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d2 = 0.0) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d1 = 0.0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__d2 = (long double) __d) >>>>>;
            }
                    const long double __lng_c;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__lng_c = std::__detail::__log_gamma<long double> (__c)) >>>>>;
          {
            if ((long double) __ad < 1.08420217248550443400745280086994171142578125e-19)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__F1 = 0.0) >>>>>;
              }
            else
              {
                {
                  bool __ok_d1 = 1;
                  long double __lng_ad;
                  long double __lng_ad1;
                  long double __lng_bd1;

                  <<cleanup_point                   bool __ok_d1 = 1;>>;
                                    long double __lng_ad;
                                    long double __lng_ad1;
                                    long double __lng_bd1;
                  <<< Unknown tree: try_block
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__lng_ad = std::__detail::__log_gamma<long double> ((long double) __ad)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__lng_ad1 = std::__detail::__log_gamma<long double> (__a + __d1)) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__lng_bd1 = std::__detail::__log_gamma<long double> (__b + __d1)) >>>>>;
                    <<< Unknown tree: handler
                      
                      try
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
                          <<cleanup_point <<< Unknown tree: expr_stmt
                            (void) (__ok_d1 = 0) >>>>>;
                        }
                      finally
                        {
                          __cxa_end_catch ();
                        } >>> >>>;
                  {
                    if (__ok_d1)
                      {
                        {
                          long double __sum1 = 1.0e+0;
                          long double __term = 1.0e+0;
                          long double __ln_pre1 = (((__lng_ad + (long double) __lng_c) + __d2 * (long double) __ln_omx) - __lng_ad1) - __lng_bd1;

                          <<cleanup_point                           long double __sum1 = 1.0e+0;>>;
                          <<cleanup_point                           long double __term = 1.0e+0;>>;
                                                    long double __ln_pre1 = (((__lng_ad + (long double) __lng_c) + __d2 * (long double) __ln_omx) - __lng_ad1) - __lng_bd1;
                          {
                            int __i = 1;

                            <<cleanup_point                             int __i = 1;>>;
                            goto <D.91955>;
                            <D.91954>:;
                            {
                              const int __j = __i + -1;

                                                            const int __j = __i + -1;
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__term = ((((((__a + __d2) + (long double) __j) * ((__b + __d2) + (long double) __j)) / ((__d2 + 1.0e+0) + (long double) __j)) / (long double) __i) * (1.0e+0 - __x)) * __term) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__sum1 = __sum1 + __term) >>>>>;
                            }
                            <<cleanup_point (void)  ++__i>>;
                            <D.91955>:;
                            if ((long double) __i < (long double) __ad) goto <D.91954>; else goto <D.91952>;
                            <D.91952>:;
                          }
                          if (__ln_pre1 > 1.1356523406294143949679664729046635329723358154296875e+4)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                std::__throw_runtime_error ((const char *) "Overflow of gamma functions in __hyperg_luke.") >>>>>;
                            }
                          else
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__F1 = std::exp (__ln_pre1) * __sum1) >>>>>;
                            }
                        }
                      }
                    else
                      {
                        <<cleanup_point <<< Unknown tree: expr_stmt
                          (void) (__F1 = 0.0) >>>>>;
                      }
                  }
                }
              }
          }
          <<cleanup_point           bool __ok_d2 = 1;>>;
                    long double __lng_ad2;
                    long double __lng_bd2;
          <<< Unknown tree: try_block
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__lng_ad2 = std::__detail::__log_gamma<long double> (__a + __d2)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__lng_bd2 = std::__detail::__log_gamma<long double> (__b + __d2)) >>>>>;
            <<< Unknown tree: handler
              
              try
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ok_d2 = 0) >>>>>;
                }
              finally
                {
                  __cxa_end_catch ();
                } >>> >>>;
          {
            if (__ok_d2)
              {
                {
                  const int __maxiter = 2000;
                  const long double __psi_1;
                  const long double __psi_1pd;
                  const long double __psi_apd1;
                  const long double __psi_bpd1;
                  long double __psi_term = ((((long double) __psi_1 + (long double) __psi_1pd) - (long double) __psi_apd1) - (long double) __psi_bpd1) - (long double) __ln_omx;
                  long double __fact = 1.0e+0;
                  long double __sum2 = __psi_term;
                  long double __ln_pre2 = ((__d1 * (long double) __ln_omx + (long double) __lng_c) - __lng_ad2) - __lng_bd2;
                  int __j;

                  <<cleanup_point                   const int __maxiter = 2000;>>;
                                    const long double __psi_1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__psi_1 = -std::__detail::__numeric_constants<long double>::__gamma_e ()) >>>>>;
                                    const long double __psi_1pd;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__psi_1pd = std::__detail::__psi<long double> ((long double) __ad + 1.0e+0)) >>>>>;
                                    const long double __psi_apd1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__psi_apd1 = std::__detail::__psi<long double> (__a + __d1)) >>>>>;
                                    const long double __psi_bpd1;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__psi_bpd1 = std::__detail::__psi<long double> (__b + __d1)) >>>>>;
                                    long double __psi_term = ((((long double) __psi_1 + (long double) __psi_1pd) - (long double) __psi_apd1) - (long double) __psi_bpd1) - (long double) __ln_omx;
                  <<cleanup_point                   long double __fact = 1.0e+0;>>;
                                    long double __sum2 = __psi_term;
                                    long double __ln_pre2 = ((__d1 * (long double) __ln_omx + (long double) __lng_c) - __lng_ad2) - __lng_bd2;
                                    int __j;
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__j = 1) >>>>>;
                    goto <D.91959>;
                    <D.91958>:;
                    {
                      const long double __term1 = 1.0e+0 / (long double) __j + 1.0e+0 / ((long double) __j + (long double) __ad);
                      const long double __term2 = 1.0e+0 / ((__a + __d1) + (long double) (__j + -1)) + 1.0e+0 / ((__b + __d1) + (long double) (__j + -1));
                      const long double __delta = __fact * __psi_term;

                                            const long double __term1 = 1.0e+0 / (long double) __j + 1.0e+0 / ((long double) __j + (long double) __ad);
                                            const long double __term2 = 1.0e+0 / ((__a + __d1) + (long double) (__j + -1)) + 1.0e+0 / ((__b + __d1) + (long double) (__j + -1));
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__psi_term = ((long double) __term1 - (long double) __term2) + __psi_term) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__fact = (((((__a + __d1) + (long double) (__j + -1)) * ((__b + __d1) + (long double) (__j + -1))) / (((long double) __j + (long double) __ad) * (long double) __j)) * (1.0e+0 - __x)) * __fact) >>>>>;
                                            const long double __delta = __fact * __psi_term;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__sum2 = __sum2 + (long double) __delta) >>>>>;
                      if (<<cleanup_point std::abs ((long double) __delta) < std::abs (__sum2) * 1.08420217248550443400745280086994171142578125e-19>>) goto <D.91956>;
                    }
                    <<cleanup_point (void)  ++__j>>;
                    <D.91959>:;
                    if (__j <= 1999) goto <D.91958>; else goto <D.91956>;
                    <D.91956>:;
                  }
                  if (__j == 2000)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        std::__throw_runtime_error ((const char *) "Sum F2 failed to converge in __hyperg_reflect") >>>>>;
                    }
                  if (__sum2 == 0.0)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__F2 = 0.0) >>>>>;
                    }
                  else
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__F2 = std::exp (__ln_pre2) * __sum2) >>>>>;
                    }
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__F2 = 0.0) >>>>>;
              }
          }
                    const long double __sgn_2 = (int) __intd % 2 == 1 ? -1.0e+0 : 1.0e+0;
                    const long double __F = (long double) __sgn_2 * __F2 + __F1;
          return <retval> = (long double) __F;
        }
      }
    else
      {
        {
          bool __ok1 = 1;
          long double __sgn_g1ca = 0.0;
          long double __ln_g1ca = 0.0;
          long double __sgn_g1cb = 0.0;
          long double __ln_g1cb = 0.0;
          bool __ok2 = 1;
          long double __sgn_g2a = 0.0;
          long double __ln_g2a = 0.0;
          long double __sgn_g2b = 0.0;
          long double __ln_g2b = 0.0;
          const long double __sgn_gc;
          const long double __ln_gc;
          const long double __sgn_gd;
          const long double __ln_gd;
          const long double __sgn_gmd;
          const long double __ln_gmd;
          const long double __sgn1 = (((long double) __sgn_gc * (long double) __sgn_gd) * __sgn_g1ca) * __sgn_g1cb;
          const long double __sgn2 = (((long double) __sgn_gc * (long double) __sgn_gmd) * __sgn_g2a) * __sgn_g2b;
          long double __pre1;
          long double __pre2;
          const long double __F1;
          const long double __F2;
          const long double __F = __pre1 * (long double) __F1 + __pre2 * (long double) __F2;

          <<cleanup_point           bool __ok1 = 1;>>;
          <<cleanup_point           long double __sgn_g1ca = 0.0;>>;
          <<cleanup_point           long double __ln_g1ca = 0.0;>>;
          <<cleanup_point           long double __sgn_g1cb = 0.0;>>;
          <<cleanup_point           long double __ln_g1cb = 0.0;>>;
          <<< Unknown tree: try_block
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__sgn_g1ca = std::__detail::__log_gamma_sign<long double> (__c - __a)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ln_g1ca = std::__detail::__log_gamma<long double> (__c - __a)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__sgn_g1cb = std::__detail::__log_gamma_sign<long double> (__c - __b)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ln_g1cb = std::__detail::__log_gamma<long double> (__c - __b)) >>>>>;
            <<< Unknown tree: handler
              
              try
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ok1 = 0) >>>>>;
                }
              finally
                {
                  __cxa_end_catch ();
                } >>> >>>;
          <<cleanup_point           bool __ok2 = 1;>>;
          <<cleanup_point           long double __sgn_g2a = 0.0;>>;
          <<cleanup_point           long double __ln_g2a = 0.0;>>;
          <<cleanup_point           long double __sgn_g2b = 0.0;>>;
          <<cleanup_point           long double __ln_g2b = 0.0;>>;
          <<< Unknown tree: try_block
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__sgn_g2a = std::__detail::__log_gamma_sign<long double> (__a)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ln_g2a = std::__detail::__log_gamma<long double> (__a)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__sgn_g2b = std::__detail::__log_gamma_sign<long double> (__b)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
              (void) (__ln_g2b = std::__detail::__log_gamma<long double> (__b)) >>>>>;
            <<< Unknown tree: handler
              
              try
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ok2 = 0) >>>>>;
                }
              finally
                {
                  __cxa_end_catch ();
                } >>> >>>;
                    const long double __sgn_gc;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sgn_gc = std::__detail::__log_gamma_sign<long double> (__c)) >>>>>;
                    const long double __ln_gc;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ln_gc = std::__detail::__log_gamma<long double> (__c)) >>>>>;
                    const long double __sgn_gd;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sgn_gd = std::__detail::__log_gamma_sign<long double> ((long double) __d)) >>>>>;
                    const long double __ln_gd;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ln_gd = std::__detail::__log_gamma<long double> ((long double) __d)) >>>>>;
                    const long double __sgn_gmd;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sgn_gmd = std::__detail::__log_gamma_sign<long double> (-NON_LVALUE_EXPR <__d>)) >>>>>;
                    const long double __ln_gmd;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__ln_gmd = std::__detail::__log_gamma<long double> (-NON_LVALUE_EXPR <__d>)) >>>>>;
                    const long double __sgn1 = (((long double) __sgn_gc * (long double) __sgn_gd) * __sgn_g1ca) * __sgn_g1cb;
                    const long double __sgn2 = (((long double) __sgn_gc * (long double) __sgn_gmd) * __sgn_g2a) * __sgn_g2b;
                    long double __pre1;
                    long double __pre2;
          {
            if (__ok1 && __ok2)
              {
                {
                  long double __ln_pre1 = (((long double) __ln_gc + (long double) __ln_gd) - __ln_g1ca) - __ln_g1cb;
                  long double __ln_pre2;

                                    long double __ln_pre1 = (((long double) __ln_gc + (long double) __ln_gd) - __ln_g1ca) - __ln_g1cb;
                                    long double __ln_pre2;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ln_pre2 = ((((long double) __ln_gc + (long double) __ln_gmd) - __ln_g2a) - __ln_g2b) + std::log (1.0e+0 - __x) * (long double) __d) >>>>>;
                  if (__ln_pre1 < 1.1356523406294143949679664729046635329723358154296875e+4 && __ln_pre2 < 1.1356523406294143949679664729046635329723358154296875e+4)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pre1 = std::exp (__ln_pre1)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pre2 = std::exp (__ln_pre2)) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pre1 = __pre1 * (long double) __sgn1) >>>>>;
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        (void) (__pre2 = __pre2 * (long double) __sgn2) >>>>>;
                    }
                  else
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
                        std::__throw_runtime_error ((const char *) "Overflow of gamma functions in __hyperg_reflect") >>>>>;
                    }
                }
              }
            else
              {
                {
                  {
                    if (!__ok2 && __ok1)
                      {
                        {
                          long double __ln_pre1 = (((long double) __ln_gc + (long double) __ln_gd) - __ln_g1ca) - __ln_g1cb;

                                                    long double __ln_pre1 = (((long double) __ln_gc + (long double) __ln_gd) - __ln_g1ca) - __ln_g1cb;
                          if (__ln_pre1 < 1.1356523406294143949679664729046635329723358154296875e+4)
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__pre1 = std::exp (__ln_pre1)) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__pre1 = __pre1 * (long double) __sgn1) >>>>>;
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                (void) (__pre2 = 0.0) >>>>>;
                            }
                          else
                            {
                              <<cleanup_point <<< Unknown tree: expr_stmt
                                std::__throw_runtime_error ((const char *) "Overflow of gamma functions in __hyperg_reflect") >>>>>;
                            }
                        }
                      }
                    else
                      {
                        {
                          {
                            if (!__ok1 && __ok2)
                              {
                                {
                                  long double __ln_pre2;

                                                                    long double __ln_pre2;
                                  <<cleanup_point <<< Unknown tree: expr_stmt
                                    (void) (__ln_pre2 = ((((long double) __ln_gc + (long double) __ln_gmd) - __ln_g2a) - __ln_g2b) + std::log (1.0e+0 - __x) * (long double) __d) >>>>>;
                                  if (__ln_pre2 < 1.1356523406294143949679664729046635329723358154296875e+4)
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
                                        (void) (__pre1 = 0.0) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
                                        (void) (__pre2 = std::exp (__ln_pre2)) >>>>>;
                                      <<cleanup_point <<< Unknown tree: expr_stmt
                                        (void) (__pre2 = __pre2 * (long double) __sgn2) >>>>>;
                                    }
                                  else
                                    {
                                      <<cleanup_point <<< Unknown tree: expr_stmt
                                        std::__throw_runtime_error ((const char *) "Overflow of gamma functions in __hyperg_reflect") >>>>>;
                                    }
                                }
                              }
                            else
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
                                  (void) (__pre1 = 0.0) >>>>>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
                                  (void) (__pre2 = 0.0) >>>>>;
                                <<cleanup_point <<< Unknown tree: expr_stmt
                                  std::__throw_runtime_error ((const char *) "Underflow of gamma functions in __hyperg_reflect") >>>>>;
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
                    const long double __F1;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__F1 = std::__detail::__hyperg_series<long double> (__a, __b, 1.0e+0 - (long double) __d, 1.0e+0 - __x)) >>>>>;
                    const long double __F2;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__F2 = std::__detail::__hyperg_series<long double> (__c - __a, __c - __b, (long double) __d + 1.0e+0, 1.0e+0 - __x)) >>>>>;
                    const long double __F = __pre1 * (long double) __F1 + __pre2 * (long double) __F2;
          return <retval> = (long double) __F;
        }
      }
  }
  __builtin_unreachable ();
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<unsigned int>::__new_allocator ((struct __new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<unsigned int>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_impl_data::_Vector_impl_data() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    *(struct _Vector_impl_data *) this = {CLOBBER(bob)} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct _Vector_impl_data *) this)->_M_start = 0B) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct _Vector_impl_data *) this)->_M_finish = 0B) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct _Vector_impl_data *) this)->_M_end_of_storage = 0B) >>>>>;
  }
   >>>;


;; Function std::__new_allocator<_Tp>::~__new_allocator() [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(pointer, std::size_t) [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>; pointer = unsigned int*; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  typedef struct _Tr _Tr;

  if (__p != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::allocator_traits<std::allocator<unsigned int> >::deallocate ((struct allocator_type &) &((struct _Vector_base *) this)->_M_impl, __p, __n) >>>>>;
    }
}


;; Function std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>; _Tp_alloc_type = std::allocator<unsigned int>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct _Tp_alloc_type &) &((struct _Vector_base *) this)->_M_impl
   >>>;
__builtin_unreachable ();


;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator, allocator<_T2>&) [with _ForwardIterator = unsigned int*; _Tp = unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::_Destroy<unsigned int*> (__first, __last) >>>>>;


;; Function std::linear_congruential_engine<_UIntType, __a, __c, __m>::linear_congruential_engine(result_type) [with _UIntType = long unsigned int; _UIntType __a = 16807; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct linear_congruential_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::seed ((struct linear_congruential_engine *) this, __s) >>>>>;
}


;; Function void std::shuffle_order_engine<_RandomNumberEngine, __k>::_M_initialize() [with _RandomNumberEngine = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; long unsigned int __k = 256] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.91990>;
    <D.91989>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct shuffle_order_engine *) this)->_M_v[__i] = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::operator() (&((struct shuffle_order_engine *) this)->_M_b)) >>>>>;
    <<cleanup_point (void)  ++__i>>;
    <D.91990>:;
    if (__i <= 255) goto <D.91989>; else goto <D.91987>;
    <D.91987>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct shuffle_order_engine *) this)->_M_y = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::operator() (&((struct shuffle_order_engine *) this)->_M_b)) >>>>>;
}


;; Function std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::subtract_with_carry_engine(result_type) [with _UIntType = long unsigned int; long unsigned int __w = 48; long unsigned int __s = 5; long unsigned int __r = 12; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct subtract_with_carry_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::seed ((struct subtract_with_carry_engine *) this, __sd) >>>>>;
}


;; Function std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::subtract_with_carry_engine(result_type) [with _UIntType = long unsigned int; long unsigned int __w = 24; long unsigned int __s = 10; long unsigned int __r = 24; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct subtract_with_carry_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::seed ((struct subtract_with_carry_engine *) this, __sd) >>>>>;
}


;; Function std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::mersenne_twister_engine(result_type) [with _UIntType = long unsigned int; long unsigned int __w = 64; long unsigned int __n = 312; long unsigned int __m = 156; long unsigned int __r = 31; _UIntType __a = 13043109905998158313; long unsigned int __u = 29; _UIntType __d = 6148914691236517205; long unsigned int __s = 17; _UIntType __b = 8202884508482404352; long unsigned int __t = 37; _UIntType __c = 18444473444759240704; long unsigned int __l = 43; _UIntType __f = 6364136223846793005; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct mersenne_twister_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::seed ((struct mersenne_twister_engine *) this, __sd) >>>>>;
}


;; Function std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::mersenne_twister_engine(result_type) [with _UIntType = long unsigned int; long unsigned int __w = 32; long unsigned int __n = 624; long unsigned int __m = 397; long unsigned int __r = 31; _UIntType __a = 2567483615; long unsigned int __u = 11; _UIntType __d = 4294967295; long unsigned int __s = 7; _UIntType __b = 2636928640; long unsigned int __t = 15; _UIntType __c = 4022730752; long unsigned int __l = 18; _UIntType __f = 1812433253; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct mersenne_twister_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::seed ((struct mersenne_twister_engine *) this, __sd) >>>>>;
}


;; Function std::linear_congruential_engine<_UIntType, __a, __c, __m>::linear_congruential_engine(result_type) [with _UIntType = long unsigned int; _UIntType __a = 48271; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct linear_congruential_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>::seed ((struct linear_congruential_engine *) this, __s) >>>>>;
}


;; Function std::uniform_int_distribution<_IntType>::uniform_int_distribution(_IntType, _IntType) [with _IntType = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct uniform_int_distribution *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::uniform_int_distribution<int>::param_type::param_type (&((struct uniform_int_distribution *) this)->_M_param, __a, __b) >>>>>;
}


;; Function void std::linear_congruential_engine<_UIntType, __a, __c, __m>::seed(result_type) [with _UIntType = long unsigned int; _UIntType __a = 16807; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__mod<long unsigned int, 2147483647> (0) == 0 && std::__detail::__mod<long unsigned int, 2147483647> (__s) == 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct linear_congruential_engine *) this)->_M_x = 1) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct linear_congruential_engine *) this)->_M_x = std::__detail::__mod<long unsigned int, 2147483647> (__s)) >>>>>;
  }


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function std::basic_ostream<char, _Traits>& std::operator<<(basic_ostream<char, _Traits>&, const char*) [with _Traits = char_traits<char>] (null)
;; enabled by -tree-original


if (__s == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::basic_ios<char>::setstate ((struct basic_ios *) __out + (sizetype) *(long int *) (((struct basic_ostream *) __out)->_vptr.basic_ostream + 18446744073709551592), 1) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::__ostream_insert<char, std::char_traits<char> > (__out, __s, (streamsize) std::char_traits<char>::length (__s)) >>>>>;
  }
return <retval> = __out;


;; Function std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(__ostream_type& (*)(__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; __ostream_type = std::basic_ostream<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __pf ((struct __ostream_type &) this)>>;


;; Function std::basic_ostream<_CharT, _Traits>& std::endl(basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::flush<char, std::char_traits<char> > (std::basic_ostream<char>::put ((struct basic_ostream *) __os, (int) std::basic_ios<char>::widen ((struct basic_ios *) __os + (sizetype) *(long int *) (((struct basic_ostream *) __os)->_vptr.basic_ostream + 18446744073709551592), 10)))>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 1; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm1EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>::linear_congruential_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm1EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm1EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.92047, 0>;, std::random_device::random_device (&rd);;, D.92047 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm1EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm1EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm1EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.92050, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.92050 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm1EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.92063>;
    <D.92062>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647> > (&val, (struct linear_congruential_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.92063>:;
    if (j <= 9) goto <D.92062>; else goto <D.92060>;
    <D.92060>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<2, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = char; pointer = char*; element_type = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char *) __r>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char>::__new_allocator ((struct __new_allocator *) this, (const struct __new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator_traits<std::allocator<char> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; const_pointer = const char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::__ptr_traits_ptr_to<const char*, const char, false>::pointer_to ((const element_type &) &((const struct basic_string *) this)->D.28283._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>*) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Guard *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct _Guard *) this)->_M_guarded = __s) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag)::_Guard::~_Guard() [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct _Guard *) this)->_M_guarded != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
              std::__cxx11::basic_string<char>::_M_dispose (NON_LVALUE_EXPR <((struct _Guard *) this)->_M_guarded>) >>>>>;
          }
      }
    finally
      {
        *(struct _Guard *) this = {CLOBBER(eob)};
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag)
;; enabled by -tree-original


{
  size_type __dnew;
  typedef extern struct _Guard _Guard;
  struct _Guard __guard;

    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__dnew = (size_type) std::distance<char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_init_local_buf ((struct basic_string *) this) >>>>>;
    }
    struct _Guard __guard;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::_Guard (&__guard, (struct basic_string *) this) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__guard._M_guarded = 0B) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
    }
  finally
    {
      std::__cxx11::basic_string<char>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)::_Guard::~_Guard (&__guard);
    }
}


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = wchar_t; pointer = wchar_t*; element_type = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (wchar_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<wchar_t>::__new_allocator ((struct __new_allocator *) this, (const struct __new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<wchar_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char*> (__first, __last, <<< Unknown tree: empty_class_expr >>>)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(pointer) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.30133._M_allocated_capacity = __capacity) >>>>>;


;; Function constexpr void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_init_local_buf() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _Iterator, _Iterator) [with _Iterator = const char*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


goto <D.92231>;
<D.92230>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__p>, (const char_type &) &TARGET_EXPR <D.92227, (char_type) *__k1>) >>>>>;
<<cleanup_point (void)  ++__k1;, (void)  ++__p;>>;
<D.92231>:;
if (__k1 != __k2) goto <D.92230>; else goto <D.92228>;
<D.92228>:;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.92234, 0>) >>>>>;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<wchar_t>::_M_local_data ((const struct basic_string *) this)>>)
  {
    if (((const struct basic_string *) this)->_M_string_length > 3)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          __builtin_unreachable () >>>>>;
      }
    return <retval> = 1;
  }
return <retval> = 0;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator_traits<std::allocator<wchar_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_S_copy (__p, __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const wchar_t*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.92261, {.D.12640={}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const wchar_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const wchar_t*> (__first, __last, <<< Unknown tree: empty_class_expr >>>)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<wchar_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = char16_t; pointer = char16_t*; element_type = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char16_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char16_t>::__new_allocator ((struct __new_allocator *) this, (const struct __new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char16_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char16_t*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.92308, {.D.12640={}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char16_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char16_t*> (__first, __last, <<< Unknown tree: empty_class_expr >>>)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(size_type&, size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*__capacity = std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = std::__cxx11::basic_string<char16_t>::_S_allocate ((struct _Char_alloc_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(pointer) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.32102._M_allocated_capacity = __capacity) >>>>>;


;; Function constexpr void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_init_local_buf() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*] (null)
;; enabled by -tree-original


return <retval> = (char16_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char16_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.92330, 0>) >>>>>;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char16_t>::_M_local_data ((const struct basic_string *) this)>>)
  {
    if (((const struct basic_string *) this)->_M_string_length > 7)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          __builtin_unreachable () >>>>>;
      }
    return <retval> = 1;
  }
return <retval> = 0;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator_traits<std::allocator<char16_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = char32_t; pointer = char32_t*; element_type = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char32_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__new_allocator<char32_t>::__new_allocator ((struct __new_allocator *) this, (const struct __new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__new_allocator<char32_t>::~__new_allocator ((struct __new_allocator *) this);
      }
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char32_t*; typename iterator_traits< <template-parameter-1-1> >::iterator_category = random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.92372, {.D.12640={}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char32_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char32_t*> (__first, __last, <<< Unknown tree: empty_class_expr >>>)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(size_type&, size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (*__capacity = std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = std::__cxx11::basic_string<char32_t>::_S_allocate ((struct _Char_alloc_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(pointer) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.33611._M_allocated_capacity = __capacity) >>>>>;


;; Function constexpr void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_init_local_buf() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*] (null)
;; enabled by -tree-original


return <retval> = (char32_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char32_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.92394, 0>) >>>>>;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char32_t>::_M_local_data ((const struct basic_string *) this)>>)
  {
    if (((const struct basic_string *) this)->_M_string_length > 3)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          __builtin_unreachable () >>>>>;
      }
    return <retval> = 1;
  }
return <retval> = 0;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::allocator_traits<std::allocator<char32_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(size_type, size_type, const _CharT*, size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_replace ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_check ((struct basic_string *) this, __pos, (const char *) "basic_string::replace"), std::__cxx11::basic_string<char>::_M_limit ((struct basic_string *) this, __pos, __n1), __s, __n2)>>;


;; Function _Tp std::__detail::__poly_laguerre_large_n(unsigned int, _Tpa, _Tp) [with _Tpa = unsigned int; _Tp = float] (null)
;; enabled by -tree-original


{
  const float __a = -(float) __n;
  const float __b = (float) __alpha1 + 1.0e+0;
  const float __eta = (float) __b * 2.0e+0 - (float) __a * 4.0e+0;
  const float __cos2th = __x / (float) __eta;
  const float __sin2th = 1.0e+0 - (float) __cos2th;
  const float __th;
  const float __pre_h;
  const float __lg_b;
  const float __lnfact;
  float __pre_term1;
  float __pre_term2;
  float __lnpre = ((((float) __lg_b - (float) __lnfact) + __x * 5.0e-1) + __pre_term1) - __pre_term2;
  float __ser_term1;
  float __ser_term2;
  float __ser = __ser_term1 + __ser_term2;

    const float __a = -(float) __n;
    const float __b = (float) __alpha1 + 1.0e+0;
    const float __eta = (float) __b * 2.0e+0 - (float) __a * 4.0e+0;
    const float __cos2th = __x / (float) __eta;
    const float __sin2th = 1.0e+0 - (float) __cos2th;
    const float __th;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__th = std::acos (std::sqrt ((float) __cos2th))) >>>>>;
    const float __pre_h;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__pre_h = ((((std::__detail::__numeric_constants<float>::__pi_2 () * std::__detail::__numeric_constants<float>::__pi_2 ()) * (float) __eta) * (float) __eta) * (float) __cos2th) * (float) __sin2th) >>>>>;
    const float __lg_b;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__lg_b = std::lgamma ((float) __n + (float) __b)) >>>>>;
    const float __lnfact;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__lnfact = std::lgamma ((float) (__n + 1))) >>>>>;
    float __pre_term1;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__pre_term1 = ((1.0e+0 - (float) __b) * 5.0e-1) * std::log ((__x * 2.5e-1) * (float) __eta)) >>>>>;
    float __pre_term2;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__pre_term2 = std::log ((float) __pre_h) * 2.5e-1) >>>>>;
    float __lnpre = ((((float) __lg_b - (float) __lnfact) + __x * 5.0e-1) + __pre_term1) - __pre_term2;
    float __ser_term1;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__ser_term1 = std::sin (std::__detail::__numeric_constants<float>::__pi () * (float) __a)) >>>>>;
    float __ser_term2;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__ser_term2 = std::sin (((float) __eta * 2.5e-1) * ((float) __th * 2.0e+0 - std::sin ((float) __th * 2.0e+0)) + std::__detail::__numeric_constants<float>::__pi_4 ())) >>>>>;
    float __ser = __ser_term1 + __ser_term2;
  <<cleanup_point return <retval> = std::exp (__lnpre) * __ser>>;
}


;; Function _Tp std::__detail::__poly_laguerre_recursion(unsigned int, _Tpa, _Tp) [with _Tpa = unsigned int; _Tp = float] (null)
;; enabled by -tree-original


{
  float __l_0 = 1.0e+0;
  float __l_1 = (1.0e+0 - NON_LVALUE_EXPR <__x>) + (float) __alpha1;
  float __l_n2 = __l_0;
  float __l_n1 = __l_1;
  float __l_n = 0.0;

  <<cleanup_point   float __l_0 = 1.0e+0;>>;
  if (__n == 0)
    {
      return <retval> = __l_0;
    }
    float __l_1 = (1.0e+0 - NON_LVALUE_EXPR <__x>) + (float) __alpha1;
  if (__n == 1)
    {
      return <retval> = __l_1;
    }
    float __l_n2 = __l_0;
    float __l_n1 = __l_1;
  <<cleanup_point   float __l_n = 0.0;>>;
  {
    unsigned int __nn = 2;

    <<cleanup_point     unsigned int __nn = 2;>>;
    goto <D.92435>;
    <D.92434>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__l_n = ((((float) (__nn * 2 + 4294967295) + (float) __alpha1) - __x) * __l_n1) / (float) __nn - (((float) (__nn + 4294967295) + (float) __alpha1) * __l_n2) / (float) __nn) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__l_n2 = __l_n1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__l_n1 = __l_n) >>>>>;
    <<cleanup_point (void)  ++__nn>>;
    <D.92435>:;
    if (__nn <= __n) goto <D.92434>; else goto <D.92432>;
    <D.92432>:;
  }
  return <retval> = __l_n;
}


;; Function _Tp std::__detail::__poly_laguerre_hyperg(unsigned int, _Tpa, _Tp) [with _Tpa = unsigned int; _Tp = float] (null)
;; enabled by -tree-original


{
  const float __b = (float) __alpha1 + 1.0e+0;
  const float __mx = -NON_LVALUE_EXPR <__x>;
  const float __tc_sgn = __x < 0.0 ? 1.0e+0 : (__n & 1) != 0 ? -1.0e+0 : 1.0e+0;
  float __tc = 1.0e+0;
  const float __ax;
  float __term = __tc * (float) __tc_sgn;
  float __sum = __term;

    const float __b = (float) __alpha1 + 1.0e+0;
    const float __mx = -NON_LVALUE_EXPR <__x>;
    const float __tc_sgn = __x < 0.0 ? 1.0e+0 : (__n & 1) != 0 ? -1.0e+0 : 1.0e+0;
  <<cleanup_point   float __tc = 1.0e+0;>>;
    const float __ax;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__ax = std::abs (__x)) >>>>>;
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.92452>;
    <D.92451>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__tc = ((float) __ax / (float) __k) * __tc) >>>>>;
    <<cleanup_point (void)  ++__k>>;
    <D.92452>:;
    if (__k <= __n) goto <D.92451>; else goto <D.92449>;
    <D.92449>:;
  }
    float __term = __tc * (float) __tc_sgn;
    float __sum = __term;
  {
    int __k = (int) __n + -1;

        int __k = (int) __n + -1;
    goto <D.92456>;
    <D.92455>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__term = (((((float) __k + (float) __b) / (float) ((int) __n - __k)) * (float) (__k + 1)) / (float) __mx) * __term) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__sum = __sum + __term) >>>>>;
    <<cleanup_point (void)  --__k>>;
    <D.92456>:;
    if (__k >= 0) goto <D.92455>; else goto <D.92453>;
    <D.92453>:;
  }
  return <retval> = __sum;
}


;; Function _Tp std::__detail::__poly_laguerre_large_n(unsigned int, _Tpa, _Tp) [with _Tpa = unsigned int; _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __a = -(long double) __n;
  const long double __b = (long double) __alpha1 + 1.0e+0;
  const long double __eta = (long double) __b * 2.0e+0 - (long double) __a * 4.0e+0;
  const long double __cos2th = __x / (long double) __eta;
  const long double __sin2th = 1.0e+0 - (long double) __cos2th;
  const long double __th;
  const long double __pre_h;
  const long double __lg_b;
  const long double __lnfact;
  long double __pre_term1;
  long double __pre_term2;
  long double __lnpre = ((((long double) __lg_b - (long double) __lnfact) + __x * 5.0e-1) + __pre_term1) - __pre_term2;
  long double __ser_term1;
  long double __ser_term2;
  long double __ser = __ser_term1 + __ser_term2;

    const long double __a = -(long double) __n;
    const long double __b = (long double) __alpha1 + 1.0e+0;
    const long double __eta = (long double) __b * 2.0e+0 - (long double) __a * 4.0e+0;
    const long double __cos2th = __x / (long double) __eta;
    const long double __sin2th = 1.0e+0 - (long double) __cos2th;
    const long double __th;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__th = std::acos (std::sqrt ((long double) __cos2th))) >>>>>;
    const long double __pre_h;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__pre_h = ((((std::__detail::__numeric_constants<long double>::__pi_2 () * std::__detail::__numeric_constants<long double>::__pi_2 ()) * (long double) __eta) * (long double) __eta) * (long double) __cos2th) * (long double) __sin2th) >>>>>;
    const long double __lg_b;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__lg_b = std::lgamma ((long double) __n + (long double) __b)) >>>>>;
    const long double __lnfact;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__lnfact = std::lgamma ((long double) (__n + 1))) >>>>>;
    long double __pre_term1;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__pre_term1 = ((1.0e+0 - (long double) __b) * 5.0e-1) * std::log ((__x * 2.5e-1) * (long double) __eta)) >>>>>;
    long double __pre_term2;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__pre_term2 = std::log ((long double) __pre_h) * 2.5e-1) >>>>>;
    long double __lnpre = ((((long double) __lg_b - (long double) __lnfact) + __x * 5.0e-1) + __pre_term1) - __pre_term2;
    long double __ser_term1;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__ser_term1 = std::sin (std::__detail::__numeric_constants<long double>::__pi () * (long double) __a)) >>>>>;
    long double __ser_term2;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__ser_term2 = std::sin (((long double) __eta * 2.5e-1) * ((long double) __th * 2.0e+0 - std::sin ((long double) __th * 2.0e+0)) + std::__detail::__numeric_constants<long double>::__pi_4 ())) >>>>>;
    long double __ser = __ser_term1 + __ser_term2;
  <<cleanup_point return <retval> = std::exp (__lnpre) * __ser>>;
}


;; Function _Tp std::__detail::__poly_laguerre_recursion(unsigned int, _Tpa, _Tp) [with _Tpa = unsigned int; _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __l_0 = 1.0e+0;
  long double __l_1 = (1.0e+0 - NON_LVALUE_EXPR <__x>) + (long double) __alpha1;
  long double __l_n2 = __l_0;
  long double __l_n1 = __l_1;
  long double __l_n = 0.0;

  <<cleanup_point   long double __l_0 = 1.0e+0;>>;
  if (__n == 0)
    {
      return <retval> = __l_0;
    }
    long double __l_1 = (1.0e+0 - NON_LVALUE_EXPR <__x>) + (long double) __alpha1;
  if (__n == 1)
    {
      return <retval> = __l_1;
    }
    long double __l_n2 = __l_0;
    long double __l_n1 = __l_1;
  <<cleanup_point   long double __l_n = 0.0;>>;
  {
    unsigned int __nn = 2;

    <<cleanup_point     unsigned int __nn = 2;>>;
    goto <D.92489>;
    <D.92488>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__l_n = ((((long double) (__nn * 2 + 4294967295) + (long double) __alpha1) - __x) * __l_n1) / (long double) __nn - (((long double) (__nn + 4294967295) + (long double) __alpha1) * __l_n2) / (long double) __nn) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__l_n2 = __l_n1) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__l_n1 = __l_n) >>>>>;
    <<cleanup_point (void)  ++__nn>>;
    <D.92489>:;
    if (__nn <= __n) goto <D.92488>; else goto <D.92486>;
    <D.92486>:;
  }
  return <retval> = __l_n;
}


;; Function _Tp std::__detail::__poly_laguerre_hyperg(unsigned int, _Tpa, _Tp) [with _Tpa = unsigned int; _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __b = (long double) __alpha1 + 1.0e+0;
  const long double __mx = -NON_LVALUE_EXPR <__x>;
  const long double __tc_sgn = __x < 0.0 ? 1.0e+0 : (__n & 1) != 0 ? -1.0e+0 : 1.0e+0;
  long double __tc = 1.0e+0;
  const long double __ax;
  long double __term = __tc * (long double) __tc_sgn;
  long double __sum = __term;

    const long double __b = (long double) __alpha1 + 1.0e+0;
    const long double __mx = -NON_LVALUE_EXPR <__x>;
    const long double __tc_sgn = __x < 0.0 ? 1.0e+0 : (__n & 1) != 0 ? -1.0e+0 : 1.0e+0;
  <<cleanup_point   long double __tc = 1.0e+0;>>;
    const long double __ax;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__ax = std::abs (__x)) >>>>>;
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.92506>;
    <D.92505>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__tc = ((long double) __ax / (long double) __k) * __tc) >>>>>;
    <<cleanup_point (void)  ++__k>>;
    <D.92506>:;
    if (__k <= __n) goto <D.92505>; else goto <D.92503>;
    <D.92503>:;
  }
    long double __term = __tc * (long double) __tc_sgn;
    long double __sum = __term;
  {
    int __k = (int) __n + -1;

        int __k = (int) __n + -1;
    goto <D.92510>;
    <D.92509>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__term = (((((long double) __k + (long double) __b) / (long double) ((int) __n - __k)) * (long double) (__k + 1)) / (long double) __mx) * __term) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__sum = __sum + __term) >>>>>;
    <<cleanup_point (void)  --__k>>;
    <D.92510>:;
    if (__k >= 0) goto <D.92509>; else goto <D.92507>;
    <D.92507>:;
  }
  return <retval> = __sum;
}


;; Function constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = float] (null)
;; enabled by -tree-original


if ((float) *__a < (float) *__b)
  {
    return <retval> = __b;
  }
return <retval> = __a;


;; Function constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = long double] (null)
;; enabled by -tree-original


if ((long double) *__a < (long double) *__b)
  {
    return <retval> = __b;
  }
return <retval> = __a;


;; Function _Tp std::__detail::__ellint_rc(_Tp, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __min = 1.17549435082228750796873653722224567781866555677208752151e-38;
  const float __lolim = 5.87747175411143753984368268611122838909332778386043760754e-38;

  <<cleanup_point   const float __min = 1.17549435082228750796873653722224567781866555677208752151e-38;>>;
  <<cleanup_point   const float __lolim = 5.87747175411143753984368268611122838909332778386043760754e-38;>>;
  {
    if ((__x < 0.0 || __y < 0.0) || __x + __y < 5.87747175411143753984368268611122838909332778386043760754e-38)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Argument less than zero in __ellint_rc.") >>>>>;
      }
    else
      {
        {
          const float __c0 = 2.5e-1;
          const float __c1 = 1.4285714924335479736328125e-1;
          const float __c2 = 4.090909063816070556640625e-1;
          const float __c3 = 3.00000011920928955078125e-1;
          const float __c4 = 3.75e-1;
          float __xn = __x;
          float __yn = __y;
          const float __eps = 1.1920928955078125e-7;
          const float __errtol = 3.97983230650424957275390625e-2;
          float __mu;
          float __sn;
          const unsigned int __max_iter = 100;
          float __s = (__sn * __sn) * (((__sn * 4.090909063816070556640625e-1 + 3.75e-1) * __sn + 1.4285714924335479736328125e-1) * __sn + 3.00000011920928955078125e-1);

          <<cleanup_point           const float __c0 = 2.5e-1;>>;
          <<cleanup_point           const float __c1 = 1.4285714924335479736328125e-1;>>;
          <<cleanup_point           const float __c2 = 4.090909063816070556640625e-1;>>;
          <<cleanup_point           const float __c3 = 3.00000011920928955078125e-1;>>;
          <<cleanup_point           const float __c4 = 3.75e-1;>>;
                    float __xn = __x;
                    float __yn = __y;
          <<cleanup_point           const float __eps = 1.1920928955078125e-7;>>;
          <<cleanup_point           const float __errtol = 3.97983230650424957275390625e-2;>>;
                    float __mu;
                    float __sn;
          <<cleanup_point           const unsigned int __max_iter = 100;>>;
          {
            unsigned int __iter = 0;

            <<cleanup_point             unsigned int __iter = 0;>>;
            goto <D.92546>;
            <D.92545>:;
            {
              const float __lambda;

              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__mu = (__yn * 2.0e+0 + __xn) / 3.0e+0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sn = (__yn + __mu) / __mu - 2.0e+0) >>>>>;
              if (<<cleanup_point std::abs (__sn) < 3.97983230650424957275390625e-2>>) goto <D.92543>;
                            const float __lambda;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__lambda = (std::sqrt (__xn) * 2.0e+0) * std::sqrt (__yn) + __yn) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__xn = (__xn + (float) __lambda) * 2.5e-1) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__yn = (__yn + (float) __lambda) * 2.5e-1) >>>>>;
            }
            <<cleanup_point (void)  ++__iter>>;
            <D.92546>:;
            if (__iter <= 99) goto <D.92545>; else goto <D.92543>;
            <D.92543>:;
          }
                    float __s = (__sn * __sn) * (((__sn * 4.090909063816070556640625e-1 + 3.75e-1) * __sn + 1.4285714924335479736328125e-1) * __sn + 3.00000011920928955078125e-1);
          <<cleanup_point return <retval> = (__s + 1.0e+0) / std::sqrt (__mu)>>;
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__ellint_rc(_Tp, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __min = 3.36210314311209350626267781732175260259807934484647124011e-4932;
  const long double __lolim = 1.68105157155604675313133890866087630129903967242323562006e-4931;

  <<cleanup_point   const long double __min = 3.36210314311209350626267781732175260259807934484647124011e-4932;>>;
  <<cleanup_point   const long double __lolim = 1.68105157155604675313133890866087630129903967242323562006e-4931;>>;
  {
    if ((__x < 0.0 || __y < 0.0) || __x + __y < 1.68105157155604675313133890866087630129903967242323562006e-4931)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          std::__throw_domain_error ((const char *) "Argument less than zero in __ellint_rc.") >>>>>;
      }
    else
      {
        {
          const long double __c0 = 2.5e-1;
          const long double __c1 = 1.42857142857142857140921067549133027796415262855589389801e-1;
          const long double __c2 = 4.09090909090909090906626813244351126286346698179841041565e-1;
          const long double __c3 = 3.00000000000000000010842021724855044340074528008699417114e-1;
          const long double __c4 = 3.75e-1;
          long double __xn = __x;
          long double __yn = __y;
          const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
          const long double __errtol = 3.91740226183386514359566695788437973302364980554557405412e-4;
          long double __mu;
          long double __sn;
          const unsigned int __max_iter = 100;
          long double __s = (__sn * __sn) * (((__sn * 4.09090909090909090906626813244351126286346698179841041565e-1 + 3.75e-1) * __sn + 1.42857142857142857140921067549133027796415262855589389801e-1) * __sn + 3.00000000000000000010842021724855044340074528008699417114e-1);

          <<cleanup_point           const long double __c0 = 2.5e-1;>>;
          <<cleanup_point           const long double __c1 = 1.42857142857142857140921067549133027796415262855589389801e-1;>>;
          <<cleanup_point           const long double __c2 = 4.09090909090909090906626813244351126286346698179841041565e-1;>>;
          <<cleanup_point           const long double __c3 = 3.00000000000000000010842021724855044340074528008699417114e-1;>>;
          <<cleanup_point           const long double __c4 = 3.75e-1;>>;
                    long double __xn = __x;
                    long double __yn = __y;
          <<cleanup_point           const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
          <<cleanup_point           const long double __errtol = 3.91740226183386514359566695788437973302364980554557405412e-4;>>;
                    long double __mu;
                    long double __sn;
          <<cleanup_point           const unsigned int __max_iter = 100;>>;
          {
            unsigned int __iter = 0;

            <<cleanup_point             unsigned int __iter = 0;>>;
            goto <D.92570>;
            <D.92569>:;
            {
              const long double __lambda;

              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__mu = (__yn * 2.0e+0 + __xn) / 3.0e+0) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__sn = (__yn + __mu) / __mu - 2.0e+0) >>>>>;
              if (<<cleanup_point std::abs (__sn) < 3.91740226183386514359566695788437973302364980554557405412e-4>>) goto <D.92567>;
                            const long double __lambda;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__lambda = (std::sqrt (__xn) * 2.0e+0) * std::sqrt (__yn) + __yn) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__xn = (__xn + (long double) __lambda) * 2.5e-1) >>>>>;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__yn = (__yn + (long double) __lambda) * 2.5e-1) >>>>>;
            }
            <<cleanup_point (void)  ++__iter>>;
            <D.92570>:;
            if (__iter <= 99) goto <D.92569>; else goto <D.92567>;
            <D.92567>:;
          }
                    long double __s = (__sn * __sn) * (((__sn * 4.09090909090909090906626813244351126286346698179841041565e-1 + 3.75e-1) * __sn + 1.42857142857142857140921067549133027796415262855589389801e-1) * __sn + 3.00000000000000000010842021724855044340074528008699417114e-1);
          <<cleanup_point return <retval> = (__s + 1.0e+0) / std::sqrt (__mu)>>;
        }
      }
  }
  __builtin_unreachable ();
}


;; Function void std::__detail::__gamma_temme(_Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = float] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__gampl = 1.0e+0 / std::tgamma (__mu + 1.0e+0)) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__gammi = 1.0e+0 / std::tgamma (1.0e+0 - __mu)) >>>>>;
if (<<cleanup_point std::abs (__mu) < 1.1920928955078125e-7>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__gam1 = -std::__detail::__numeric_constants<float>::__gamma_e ()) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__gam1 = (*__gammi - *__gampl) / (__mu * 2.0e+0)) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__gam2 = (*__gammi + *__gampl) * 5.0e-1) >>>>>;
return;


;; Function void std::__detail::__gamma_temme(_Tp, _Tp&, _Tp&, _Tp&, _Tp&) [with _Tp = long double] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__gampl = 1.0e+0 / std::tgamma (__mu + 1.0e+0)) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__gammi = 1.0e+0 / std::tgamma (1.0e+0 - __mu)) >>>>>;
if (<<cleanup_point std::abs (__mu) < 1.08420217248550443400745280086994171142578125e-19>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__gam1 = -std::__detail::__numeric_constants<long double>::__gamma_e ()) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (*__gam1 = (*__gammi - *__gampl) / (__mu * 2.0e+0)) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__gam2 = (*__gammi + *__gampl) * 5.0e-1) >>>>>;
return;


;; Function constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = int] (null)
;; enabled by -tree-original


if (*__a < *__b)
  {
    return <retval> = __b;
  }
return <retval> = __a;


;; Function _Tp std::__detail::__expint_E1(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


if (__x < 0.0)
  {
    <<cleanup_point return <retval> = -std::__detail::__expint_Ei<float> (-NON_LVALUE_EXPR <__x>)>>;
  }
else
  {
    if (__x < 1.0e+0)
      {
        <<cleanup_point return <retval> = std::__detail::__expint_E1_series<float> (__x)>>;
      }
    else
      {
        if (__x < 1.0e+2)
          {
            <<cleanup_point return <retval> = std::__detail::__expint_En_cont_frac<float> (1, __x)>>;
          }
        else
          {
            <<cleanup_point return <retval> = std::__detail::__expint_E1_asymp<float> (__x)>>;
          }
      }
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__expint_Ei_series(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  float __term = 1.0e+0;
  float __sum = 0.0;
  const unsigned int __max_iter = 1000;

  <<cleanup_point   float __term = 1.0e+0;>>;
  <<cleanup_point   float __sum = 0.0;>>;
  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.92607>;
    <D.92606>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__term = (__x / (float) __i) * __term) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__sum = __term / (float) __i + __sum) >>>>>;
    if (__sum * 1.1920928955078125e-7 > __term) goto <D.92604>;
    <<cleanup_point (void)  ++__i>>;
    <D.92607>:;
    if (__i <= 999) goto <D.92606>; else goto <D.92604>;
    <D.92604>:;
  }
  <<cleanup_point return <retval> = (std::__detail::__numeric_constants<float>::__gamma_e () + __sum) + std::log (__x)>>;
}


;; Function _Tp std::__detail::__expint_Ei_asymp(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  float __term = 1.0e+0;
  float __sum = 1.0e+0;
  const unsigned int __max_iter = 1000;

  <<cleanup_point   float __term = 1.0e+0;>>;
  <<cleanup_point   float __sum = 1.0e+0;>>;
  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.92618>;
    <D.92617>:;
    {
      float __prev = __term;

            float __prev = __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = ((float) __i / __x) * __term) >>>>>;
      if (__term < 1.1920928955078125e-7) goto <D.92615>;
      if (__term >= __prev) goto <D.92615>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__sum = __sum + __term) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.92618>:;
    if (__i <= 999) goto <D.92617>; else goto <D.92615>;
    <D.92615>:;
  }
  <<cleanup_point return <retval> = (std::exp (__x) * __sum) / __x>>;
}


;; Function _Tp std::__detail::__expint_E1(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


if (__x < 0.0)
  {
    <<cleanup_point return <retval> = -std::__detail::__expint_Ei<long double> (-NON_LVALUE_EXPR <__x>)>>;
  }
else
  {
    if (__x < 1.0e+0)
      {
        <<cleanup_point return <retval> = std::__detail::__expint_E1_series<long double> (__x)>>;
      }
    else
      {
        if (__x < 1.0e+2)
          {
            <<cleanup_point return <retval> = std::__detail::__expint_En_cont_frac<long double> (1, __x)>>;
          }
        else
          {
            <<cleanup_point return <retval> = std::__detail::__expint_E1_asymp<long double> (__x)>>;
          }
      }
  }
__builtin_unreachable ();


;; Function _Tp std::__detail::__expint_Ei_series(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __term = 1.0e+0;
  long double __sum = 0.0;
  const unsigned int __max_iter = 1000;

  <<cleanup_point   long double __term = 1.0e+0;>>;
  <<cleanup_point   long double __sum = 0.0;>>;
  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.92637>;
    <D.92636>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__term = (__x / (long double) __i) * __term) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__sum = __term / (long double) __i + __sum) >>>>>;
    if (__sum * 1.08420217248550443400745280086994171142578125e-19 > __term) goto <D.92634>;
    <<cleanup_point (void)  ++__i>>;
    <D.92637>:;
    if (__i <= 999) goto <D.92636>; else goto <D.92634>;
    <D.92634>:;
  }
  <<cleanup_point return <retval> = (std::__detail::__numeric_constants<long double>::__gamma_e () + __sum) + std::log (__x)>>;
}


;; Function _Tp std::__detail::__expint_Ei_asymp(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __term = 1.0e+0;
  long double __sum = 1.0e+0;
  const unsigned int __max_iter = 1000;

  <<cleanup_point   long double __term = 1.0e+0;>>;
  <<cleanup_point   long double __sum = 1.0e+0;>>;
  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.92648>;
    <D.92647>:;
    {
      long double __prev = __term;

            long double __prev = __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = ((long double) __i / __x) * __term) >>>>>;
      if (__term < 1.08420217248550443400745280086994171142578125e-19) goto <D.92645>;
      if (__term >= __prev) goto <D.92645>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__sum = __sum + __term) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.92648>:;
    if (__i <= 999) goto <D.92647>; else goto <D.92645>;
    <D.92645>:;
  }
  <<cleanup_point return <retval> = (std::exp (__x) * __sum) / __x>>;
}


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__sqrtpio2() [with _Tp = float] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.25331413745880126953125e+0
   >>>;
__builtin_unreachable ();


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__sqrtpio2() [with _Tp = long double] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1.25331413731550025123569896967623549244308378547430038452e+0
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__log_gamma(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__x > 5.0e-1)
      {
        <<cleanup_point return <retval> = std::__detail::__log_gamma_lanczos<float> (__x)>>;
      }
    else
      {
        {
          const float __sin_fact;

                    const float __sin_fact;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sin_fact = std::abs (std::sin (std::__detail::__numeric_constants<float>::__pi () * __x))) >>>>>;
          if ((float) __sin_fact == 0.0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_domain_error ((const char *) "Argument is nonpositive integer in __log_gamma") >>>>>;
            }
          <<cleanup_point return <retval> = (std::__detail::__numeric_constants<float>::__lnpi () - std::log ((float) __sin_fact)) - std::__detail::__log_gamma_lanczos<float> (1.0e+0 - __x)>>;
        }
      }
  }
  __builtin_unreachable ();
}


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__gamma_e() [with _Tp = float] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.77215671539306640625e-1
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__psi(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const int __n = (int) ((long double) __x + 5.0e-1);
  const float __eps = 4.76837158203125e-7;

    const int __n = (int) ((long double) __x + 5.0e-1);
  <<cleanup_point   const float __eps = 4.76837158203125e-7;>>;
  {
    if (<<cleanup_point __n <= 0 && std::abs (__x - (float) __n) < 4.76837158203125e-7>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (__x < 0.0)
              {
                {
                  const float __pi;

                                    const float __pi;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__pi = std::__detail::__numeric_constants<float>::__pi ()) >>>>>;
                  <<cleanup_point return <retval> = std::__detail::__psi<float> (1.0e+0 - __x) - (std::cos ((float) __pi * __x) * (float) __pi) / std::sin ((float) __pi * __x)>>;
                }
              }
            else
              {
                if (__x > 1.0e+2)
                  {
                    <<cleanup_point return <retval> = std::__detail::__psi_asymp<float> (__x)>>;
                  }
                else
                  {
                    <<cleanup_point return <retval> = std::__detail::__psi_series<float> (__x)>>;
                  }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__log_gamma_sign(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  {
    if (__x > 0.0)
      {
        return <retval> = 1.0e+0;
      }
    else
      {
        {
          const float __sin_fact;

                    const float __sin_fact;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sin_fact = std::sin (std::__detail::__numeric_constants<float>::__pi () * __x)) >>>>>;
          if ((float) __sin_fact > 0.0)
            {
              return <retval> = 1.0e+0;
            }
          else
            {
              if ((float) __sin_fact < 0.0)
                {
                  return <retval> = -1.0e+0;
                }
              else
                {
                  return <retval> = 0.0;
                }
            }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__log_gamma(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__x > 5.0e-1)
      {
        <<cleanup_point return <retval> = std::__detail::__log_gamma_lanczos<long double> (__x)>>;
      }
    else
      {
        {
          const long double __sin_fact;

                    const long double __sin_fact;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sin_fact = std::abs (std::sin (std::__detail::__numeric_constants<long double>::__pi () * __x))) >>>>>;
          if ((long double) __sin_fact == 0.0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                std::__throw_domain_error ((const char *) "Argument is nonpositive integer in __log_gamma") >>>>>;
            }
          <<cleanup_point return <retval> = (std::__detail::__numeric_constants<long double>::__lnpi () - std::log ((long double) __sin_fact)) - std::__detail::__log_gamma_lanczos<long double> (1.0e+0 - __x)>>;
        }
      }
  }
  __builtin_unreachable ();
}


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__gamma_e() [with _Tp = long double] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 5.77215664901532860616307357704002356513228733092546463013e-1
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__psi(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const int __n = (int) (__x + 5.0e-1);
  const long double __eps = 4.336808689942017736029811203479766845703125e-19;

    const int __n = (int) (__x + 5.0e-1);
  <<cleanup_point   const long double __eps = 4.336808689942017736029811203479766845703125e-19;>>;
  {
    if (<<cleanup_point __n <= 0 && std::abs (__x - (long double) __n) < 4.336808689942017736029811203479766845703125e-19>>)
      {
        <<cleanup_point return <retval> =  Nan>>;
      }
    else
      {
        {
          {
            if (__x < 0.0)
              {
                {
                  const long double __pi;

                                    const long double __pi;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__pi = std::__detail::__numeric_constants<long double>::__pi ()) >>>>>;
                  <<cleanup_point return <retval> = std::__detail::__psi<long double> (1.0e+0 - __x) - (std::cos ((long double) __pi * __x) * (long double) __pi) / std::sin ((long double) __pi * __x)>>;
                }
              }
            else
              {
                if (__x > 1.0e+2)
                  {
                    <<cleanup_point return <retval> = std::__detail::__psi_asymp<long double> (__x)>>;
                  }
                else
                  {
                    <<cleanup_point return <retval> = std::__detail::__psi_series<long double> (__x)>>;
                  }
              }
          }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__log_gamma_sign(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  {
    if (__x > 0.0)
      {
        return <retval> = 1.0e+0;
      }
    else
      {
        {
          const long double __sin_fact;

                    const long double __sin_fact;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__sin_fact = std::sin (std::__detail::__numeric_constants<long double>::__pi () * __x)) >>>>>;
          if ((long double) __sin_fact > 0.0)
            {
              return <retval> = 1.0e+0;
            }
          else
            {
              if ((long double) __sin_fact < 0.0)
                {
                  return <retval> = -1.0e+0;
                }
              else
                {
                  return <retval> = 0.0;
                }
            }
        }
      }
  }
  __builtin_unreachable ();
}


;; Function std::__new_allocator<_Tp>::__new_allocator() [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = unsigned int; allocator_type = std::allocator<unsigned int>; pointer = unsigned int*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<unsigned int>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(__type_identity<_Tp>) [with _Tp = unsigned int; long unsigned int <anonymous> = 4; true_type = true_type] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.92794, {}>>>;


;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = unsigned int*] (null)
;; enabled by -tree-original


{
  typedef _Value_type _Value_type;

  <<cleanup_point <<< Unknown tree: expr_stmt
    std::_Destroy_aux<true>::__destroy<unsigned int*> (__first, __last) >>>>>;
}


;; Function std::linear_congruential_engine<_UIntType, __a, __c, __m>::result_type std::linear_congruential_engine<_UIntType, __a, __c, __m>::operator()() [with _UIntType = long unsigned int; _UIntType __a = 16807; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct linear_congruential_engine *) this)->_M_x = std::__detail::__mod<long unsigned int, 2147483647, 16807, 0> (((struct linear_congruential_engine *) this)->_M_x)) >>>>>;
return <retval> = ((struct linear_congruential_engine *) this)->_M_x;


;; Function void std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::seed(result_type) [with _UIntType = long unsigned int; long unsigned int __w = 48; long unsigned int __s = 5; long unsigned int __r = 12; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  struct linear_congruential_engine __lcg;
  const size_t __n = 2;

    struct linear_congruential_engine __lcg;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<unsigned int, 40014, 0, 2147483563>::linear_congruential_engine (&__lcg, __value != 0 ? (result_type) (__value % 2147483563) : 19780503) >>>>>;
  <<cleanup_point   const size_t __n = 2;>>;
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.92862>;
    <D.92861>:;
    {
      long unsigned int __sum = 0;
      long unsigned int __factor = 1;

      <<cleanup_point       long unsigned int __sum = 0;>>;
      <<cleanup_point       long unsigned int __factor = 1;>>;
      {
        size_t __j = 0;

        <<cleanup_point         size_t __j = 0;>>;
        goto <D.92860>;
        <D.92859>:;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__sum = TARGET_EXPR <D.92847, (long unsigned int) std::__detail::__mod<unsigned int, 0> (std::linear_congruential_engine<unsigned int, 40014, 0, 2147483563>::operator() (&__lcg)) * __factor>;, __sum + D.92847;) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__factor = __factor * 4294967296) >>>>>;
        <<cleanup_point (void)  ++__j>>;
        <D.92860>:;
        if (__j <= 1) goto <D.92859>; else goto <D.92857>;
        <D.92857>:;
      }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct subtract_with_carry_engine *) this)->_M_x[__i] = std::__detail::__mod<long unsigned int, 281474976710656> (__sum)) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.92862>:;
    if (__i <= 11) goto <D.92861>; else goto <D.92855>;
    <D.92855>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct subtract_with_carry_engine *) this)->_M_carry = ((struct subtract_with_carry_engine *) this)->_M_x[11] == 0 ? 1 : 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct subtract_with_carry_engine *) this)->_M_p = 0) >>>>>;
}


;; Function void std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::seed(result_type) [with _UIntType = long unsigned int; long unsigned int __w = 24; long unsigned int __s = 10; long unsigned int __r = 24; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  struct linear_congruential_engine __lcg;
  const size_t __n = 1;

    struct linear_congruential_engine __lcg;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<unsigned int, 40014, 0, 2147483563>::linear_congruential_engine (&__lcg, __value != 0 ? (result_type) (__value % 2147483563) : 19780503) >>>>>;
  <<cleanup_point   const size_t __n = 1;>>;
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.92886>;
    <D.92885>:;
    {
      long unsigned int __sum = 0;
      long unsigned int __factor = 1;

      <<cleanup_point       long unsigned int __sum = 0;>>;
      <<cleanup_point       long unsigned int __factor = 1;>>;
      {
        size_t __j = 0;

        <<cleanup_point         size_t __j = 0;>>;
        goto <D.92884>;
        <D.92883>:;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__sum = TARGET_EXPR <D.92871, (long unsigned int) std::__detail::__mod<unsigned int, 0> (std::linear_congruential_engine<unsigned int, 40014, 0, 2147483563>::operator() (&__lcg)) * __factor>;, __sum + D.92871;) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__factor = __factor * 4294967296) >>>>>;
        <<cleanup_point (void)  ++__j>>;
        <D.92884>:;
        if (__j == 0) goto <D.92883>; else goto <D.92881>;
        <D.92881>:;
      }
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct subtract_with_carry_engine *) this)->_M_x[__i] = std::__detail::__mod<long unsigned int, 16777216> (__sum)) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.92886>:;
    if (__i <= 23) goto <D.92885>; else goto <D.92879>;
    <D.92879>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct subtract_with_carry_engine *) this)->_M_carry = ((struct subtract_with_carry_engine *) this)->_M_x[23] == 0 ? 1 : 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct subtract_with_carry_engine *) this)->_M_p = 0) >>>>>;
}


;; Function void std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::seed(result_type) [with _UIntType = long unsigned int; long unsigned int __w = 64; long unsigned int __n = 312; long unsigned int __m = 156; long unsigned int __r = 31; _UIntType __a = 13043109905998158313; long unsigned int __u = 29; _UIntType __d = 6148914691236517205; long unsigned int __s = 17; _UIntType __b = 8202884508482404352; long unsigned int __t = 37; _UIntType __c = 18444473444759240704; long unsigned int __l = 43; _UIntType __f = 6364136223846793005; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct mersenne_twister_engine *) this)->_M_x[0] = std::__detail::__mod<long unsigned int, 0> (__sd)) >>>>>;
  {
    size_t __i = 1;

    <<cleanup_point     size_t __i = 1;>>;
    goto <D.92899>;
    <D.92898>:;
    {
      long unsigned int __x = ((struct mersenne_twister_engine *) this)->_M_x[__i + 18446744073709551615];

            long unsigned int __x = ((struct mersenne_twister_engine *) this)->_M_x[__i + 18446744073709551615];
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__x = __x >> 62 ^ __x) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__x = __x * 6364136223846793005) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__x = TARGET_EXPR <D.92895, std::__detail::__mod<long unsigned int, 312> (__i)>;, __x + D.92895;) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct mersenne_twister_engine *) this)->_M_x[__i] = std::__detail::__mod<long unsigned int, 0> (__x)) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.92899>:;
    if (__i <= 311) goto <D.92898>; else goto <D.92896>;
    <D.92896>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct mersenne_twister_engine *) this)->_M_p = 312) >>>>>;
}


;; Function void std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::seed(result_type) [with _UIntType = long unsigned int; long unsigned int __w = 32; long unsigned int __n = 624; long unsigned int __m = 397; long unsigned int __r = 31; _UIntType __a = 2567483615; long unsigned int __u = 11; _UIntType __d = 4294967295; long unsigned int __s = 7; _UIntType __b = 2636928640; long unsigned int __t = 15; _UIntType __c = 4022730752; long unsigned int __l = 18; _UIntType __f = 1812433253; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct mersenne_twister_engine *) this)->_M_x[0] = std::__detail::__mod<long unsigned int, 4294967296> (__sd)) >>>>>;
  {
    size_t __i = 1;

    <<cleanup_point     size_t __i = 1;>>;
    goto <D.92912>;
    <D.92911>:;
    {
      long unsigned int __x = ((struct mersenne_twister_engine *) this)->_M_x[__i + 18446744073709551615];

            long unsigned int __x = ((struct mersenne_twister_engine *) this)->_M_x[__i + 18446744073709551615];
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__x = __x >> 30 ^ __x) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__x = __x * 1812433253) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__x = TARGET_EXPR <D.92908, std::__detail::__mod<long unsigned int, 624> (__i)>;, __x + D.92908;) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct mersenne_twister_engine *) this)->_M_x[__i] = std::__detail::__mod<long unsigned int, 4294967296> (__x)) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.92912>:;
    if (__i <= 623) goto <D.92911>; else goto <D.92909>;
    <D.92909>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct mersenne_twister_engine *) this)->_M_p = 624) >>>>>;
}


;; Function void std::linear_congruential_engine<_UIntType, __a, __c, __m>::seed(result_type) [with _UIntType = long unsigned int; _UIntType __a = 48271; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__mod<long unsigned int, 2147483647> (0) == 0 && std::__detail::__mod<long unsigned int, 2147483647> (__s) == 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct linear_congruential_engine *) this)->_M_x = 1) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct linear_congruential_engine *) this)->_M_x = std::__detail::__mod<long unsigned int, 2147483647> (__s)) >>>>>;
  }


;; Function std::uniform_int_distribution<_IntType>::param_type::param_type(_IntType, _IntType) [with _IntType = int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct param_type *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct param_type *) this)->_M_a = __a) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct param_type *) this)->_M_b = __b) >>>>>;
  if (0)
    {
      if (__builtin_expect (((struct param_type *) this)->_M_a > ((struct param_type *) this)->_M_b, 0) != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__glibcxx_assert_fail () >>>>>;
        }
    }
}


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 2147483647; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 2147483647, 1, 0, true, true>::__calc (__x)>>;


;; Function static constexpr std::linear_congruential_engine<_UIntType, __a, __c, __m>::result_type std::linear_congruential_engine<_UIntType, __a, __c, __m>::min() [with _UIntType = long unsigned int; _UIntType __a = 16807; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr std::linear_congruential_engine<_UIntType, __a, __c, __m>::result_type std::linear_congruential_engine<_UIntType, __a, __c, __m>::max() [with _UIntType = long unsigned int; _UIntType __a = 16807; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 2147483646;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 1;
  const __uctype __urngmax = 2147483646;
  const __uctype __urngrange = 2147483645;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 1;>>;
  <<cleanup_point   const __uctype __urngmax = 2147483646;>>;
  <<cleanup_point   const __uctype __urngrange = 2147483645;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange <= 2147483644)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              {
                {
                  const __uctype __scaling = 2147483645 / (long unsigned int) __uerange;
                  const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;

                                    const __uctype __scaling = 2147483645 / (long unsigned int) __uerange;
                                    const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;
                  <D.93046>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = (__uctype) std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::operator() ((struct linear_congruential_engine *) __urng) + 18446744073709551615) >>>>>;
                  if (__ret >= (long unsigned int) __past) goto <D.93046>; else goto <D.93044>;
                  <D.93044>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = __ret / (__uctype) __scaling) >>>>>;
                }
              }
            }
          }
        }
      }
    else
      {
        {
          {
            if (__urange > 2147483645)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.93049>:;
                  {
                    const __uctype __uerngrange = 2147483646;

                    <<cleanup_point                     const __uctype __uerngrange = 2147483646;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = (long unsigned int) std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.93043, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.93043
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 2147483646) >>>>) * 2147483646) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = ((__uctype) std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::operator() ((struct linear_congruential_engine *) __urng) + __tmp) + 18446744073709551615) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.93049>; else goto <D.93047>;
                  <D.93047>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::operator() ((struct linear_congruential_engine *) __urng) + 18446744073709551615) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function void std::basic_ios<_CharT, _Traits>::setstate(std::ios_base::iostate) [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::ios_base::iostate] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::clear ((struct basic_ios *) this, std::operator| (std::basic_ios<char>::rdstate ((struct basic_ios *) this), __state)) >>>>>;


;; Function std::basic_ios<_CharT, _Traits>::char_type std::basic_ios<_CharT, _Traits>::widen(char) const [with _CharT = char; _Traits = std::char_traits<char>; char_type = char] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::ctype<char>::widen ((const struct ctype *) std::__check_facet<std::ctype<char> > ((const struct __ctype_type *) ((const struct basic_ios *) this)->_M_ctype), (int) __c)>>;


;; Function std::basic_ostream<_CharT, _Traits>& std::flush(basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::basic_ostream<char>::flush ((struct basic_ostream *) __os)>>;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 2; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm2EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::mersenne_twister_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm2EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm2EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.93079, 0>;, std::random_device::random_device (&rd);;, D.93079 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm2EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm2EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm2EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.93082, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.93082 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm2EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.93095>;
    <D.93094>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> > (&val, (struct mersenne_twister_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.93095>:;
    if (j <= 9) goto <D.93094>; else goto <D.93092>;
    <D.93092>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<3, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char *) __r>>
   >>>;
__builtin_unreachable ();


;; Function std::__new_allocator<_Tp>::__new_allocator(const std::__new_allocator<_Tp>&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = char; allocator_type = std::allocator<char>; pointer = char*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<char>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = const char; pointer = const char*; element_type = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) __r>>
   >>>;
__builtin_unreachable ();


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = char*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<char*> (__first, __last, <<< Unknown tree: empty_class_expr >>>)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__cxx11::basic_string<char>::_S_copy (__p, (const char *) __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (wchar_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function std::__new_allocator<_Tp>::__new_allocator(const std::__new_allocator<_Tp>&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = const char*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::__ptr_traits_ptr_to<const wchar_t*, const wchar_t, false>::pointer_to ((const element_type &) &((const struct basic_string *) this)->D.30133._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; allocator_type = std::__cxx11::basic_string<wchar_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = wchar_t; allocator_type = std::allocator<wchar_t>; pointer = wchar_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<wchar_t>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::char_traits<char>::copy (__d, __s, __n) >>>>>;
  }


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = const wchar_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::char_traits<wchar_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char16_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function std::__new_allocator<_Tp>::__new_allocator(const std::__new_allocator<_Tp>&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = const char16_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char16_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;
__builtin_unreachable ();


;; Function static std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_allocate(_Char_alloc_type&, size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; pointer = char16_t*; _Char_alloc_type = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  char16_t * __p;

    char16_t * __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::allocator_traits<std::allocator<char16_t> >::allocate ((struct allocator_type &) __a, __n)) >>>>>;
  return <retval> = __p;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; allocator_type = std::__cxx11::basic_string<char16_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char16_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::char_traits<char16_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::__ptr_traits_ptr_to<const char16_t*, const char16_t, false>::pointer_to ((const element_type &) &((const struct basic_string *) this)->D.32102._M_local_buf)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = char16_t; allocator_type = std::allocator<char16_t>; pointer = char16_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<char16_t>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char32_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function std::__new_allocator<_Tp>::__new_allocator(const std::__new_allocator<_Tp>&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = const char32_t*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char32_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;
__builtin_unreachable ();


;; Function static std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_allocate(_Char_alloc_type&, size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; pointer = char32_t*; _Char_alloc_type = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  char32_t * __p;

    char32_t * __p;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__p = std::allocator_traits<std::allocator<char32_t> >::allocate ((struct allocator_type &) __a, __n)) >>>>>;
  return <retval> = __p;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; allocator_type = std::__cxx11::basic_string<char32_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::char_traits<char32_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::char_traits<char32_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::__ptr_traits_ptr_to<const char32_t*, const char32_t, false>::pointer_to ((const element_type &) &((const struct basic_string *) this)->D.33611._M_local_buf)>>;


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(allocator_type&, pointer, size_type) [with _Tp = char32_t; allocator_type = std::allocator<char32_t>; pointer = char32_t*; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__new_allocator<char32_t>::deallocate ((struct __new_allocator *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check(size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) < __pos>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)) >>>>>;
  }
return <retval> = __pos;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_limit(size_type, size_type) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff;

        const bool __testoff;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__testoff = std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos > __off) >>>>>;
    <<cleanup_point return <retval> = (bool) __testoff ? __off : std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos>>;
  }
   >>>;
__builtin_unreachable ();


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__pi_4() [with _Tp = float] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 7.85398185253143310546875e-1
   >>>;
__builtin_unreachable ();


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__pi_4() [with _Tp = long double] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 7.85398163397448309628202239851546551108185667544603347778e-1
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__expint_E1_series(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __eps = 1.1920928955078125e-7;
  float __term = 1.0e+0;
  float __esum = 0.0;
  float __osum = 0.0;
  const unsigned int __max_iter = 1000;

  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   float __term = 1.0e+0;>>;
  <<cleanup_point   float __esum = 0.0;>>;
  <<cleanup_point   float __osum = 0.0;>>;
  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.93335>;
    <D.93334>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__term = (-NON_LVALUE_EXPR <__x> / (float) __i) * __term) >>>>>;
    if (<<cleanup_point std::abs (__term) < 1.1920928955078125e-7>>) goto <D.93332>;
    if (__term >= 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__esum = __term / (float) __i + __esum) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__osum = __term / (float) __i + __osum) >>>>>;
      }
    <<cleanup_point (void)  ++__i>>;
    <D.93335>:;
    if (__i <= 999) goto <D.93334>; else goto <D.93332>;
    <D.93332>:;
  }
  <<cleanup_point return <retval> = ((-NON_LVALUE_EXPR <__esum> - __osum) - std::__detail::__numeric_constants<float>::__gamma_e ()) - std::log (__x)>>;
}


;; Function _Tp std::__detail::__expint_En_cont_frac(unsigned int, _Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const unsigned int __max_iter = 1000;
  const float __eps = 1.1920928955078125e-7;
  const float __fp_min = 1.17549435082228750796873653722224567781866555677208752151e-38;
  const int __nm1 = (int) (__n + 4294967295);
  float __b = (float) __n + __x;
  float __c = 8.5070591730234615865843651857942052864e+37;
  float __d = 1.0e+0 / __b;
  float __h = __d;

  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  <<cleanup_point   const float __eps = 1.1920928955078125e-7;>>;
  <<cleanup_point   const float __fp_min = 1.17549435082228750796873653722224567781866555677208752151e-38;>>;
    const int __nm1 = (int) (__n + 4294967295);
    float __b = (float) __n + __x;
  <<cleanup_point   float __c = 8.5070591730234615865843651857942052864e+37;>>;
    float __d = 1.0e+0 / __b;
    float __h = __d;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.93354>;
    <D.93353>:;
    {
      float __a = -(float) (((unsigned int) __nm1 + __i) * __i);
      const float __del = __c * __d;

            float __a = -(float) (((unsigned int) __nm1 + __i) * __i);
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__b = __b + 2.0e+0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__d = 1.0e+0 / (__a * __d + __b)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__c = __a / __c + __b) >>>>>;
            const float __del = __c * __d;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = __h * (float) __del) >>>>>;
      {
        if (<<cleanup_point std::abs ((float) __del - 1.0e+0) < 1.1920928955078125e-7>>)
          {
            {
              const float __ans;

                            const float __ans;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ans = std::exp (-NON_LVALUE_EXPR <__x>) * __h) >>>>>;
              return <retval> = (float) __ans;
            }
          }
      }
    }
    <<cleanup_point (void)  ++__i>>;
    <D.93354>:;
    if (__i <= 1000) goto <D.93353>; else goto <D.93351>;
    <D.93351>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__throw_runtime_error ((const char *) "Continued fraction failed in __expint_En_cont_frac.") >>>>>;
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__expint_E1_asymp(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  float __term = 1.0e+0;
  float __esum = 1.0e+0;
  float __osum = 0.0;
  const unsigned int __max_iter = 1000;

  <<cleanup_point   float __term = 1.0e+0;>>;
  <<cleanup_point   float __esum = 1.0e+0;>>;
  <<cleanup_point   float __osum = 0.0;>>;
  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.93366>;
    <D.93365>:;
    {
      float __prev = __term;

            float __prev = __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = ((float) -NON_LVALUE_EXPR <__i> / __x) * __term) >>>>>;
      if (<<cleanup_point std::abs (__term) > std::abs (__prev)>>) goto <D.93363>;
      if (__term >= 0.0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__esum = __esum + __term) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__osum = __osum + __term) >>>>>;
        }
    }
    <<cleanup_point (void)  ++__i>>;
    <D.93366>:;
    if (__i <= 999) goto <D.93365>; else goto <D.93363>;
    <D.93363>:;
  }
  <<cleanup_point return <retval> = (std::exp (-NON_LVALUE_EXPR <__x>) * (__esum + __osum)) / __x>>;
}


;; Function _Tp std::__detail::__expint_E1_series(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  long double __term = 1.0e+0;
  long double __esum = 0.0;
  long double __osum = 0.0;
  const unsigned int __max_iter = 1000;

  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   long double __term = 1.0e+0;>>;
  <<cleanup_point   long double __esum = 0.0;>>;
  <<cleanup_point   long double __osum = 0.0;>>;
  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.93378>;
    <D.93377>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__term = (-NON_LVALUE_EXPR <__x> / (long double) __i) * __term) >>>>>;
    if (<<cleanup_point std::abs (__term) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.93375>;
    if (__term >= 0.0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__esum = __term / (long double) __i + __esum) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__osum = __term / (long double) __i + __osum) >>>>>;
      }
    <<cleanup_point (void)  ++__i>>;
    <D.93378>:;
    if (__i <= 999) goto <D.93377>; else goto <D.93375>;
    <D.93375>:;
  }
  <<cleanup_point return <retval> = ((-NON_LVALUE_EXPR <__esum> - __osum) - std::__detail::__numeric_constants<long double>::__gamma_e ()) - std::log (__x)>>;
}


;; Function _Tp std::__detail::__expint_En_cont_frac(unsigned int, _Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const unsigned int __max_iter = 1000;
  const long double __eps = 1.08420217248550443400745280086994171142578125e-19;
  const long double __fp_min = 3.36210314311209350626267781732175260259807934484647124011e-4932;
  const int __nm1 = (int) (__n + 4294967295);
  long double __b = (long double) __n + __x;
  long double __c = 2.97432873839307941271439831657001782690861171774127559368e+4931;
  long double __d = 1.0e+0 / __b;
  long double __h = __d;

  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  <<cleanup_point   const long double __eps = 1.08420217248550443400745280086994171142578125e-19;>>;
  <<cleanup_point   const long double __fp_min = 3.36210314311209350626267781732175260259807934484647124011e-4932;>>;
    const int __nm1 = (int) (__n + 4294967295);
    long double __b = (long double) __n + __x;
  <<cleanup_point   long double __c = 2.97432873839307941271439831657001782690861171774127559368e+4931;>>;
    long double __d = 1.0e+0 / __b;
    long double __h = __d;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.93397>;
    <D.93396>:;
    {
      long double __a = -(long double) (((unsigned int) __nm1 + __i) * __i);
      const long double __del = __c * __d;

            long double __a = -(long double) (((unsigned int) __nm1 + __i) * __i);
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__b = __b + 2.0e+0) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__d = 1.0e+0 / (__a * __d + __b)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__c = __a / __c + __b) >>>>>;
            const long double __del = __c * __d;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__h = __h * (long double) __del) >>>>>;
      {
        if (<<cleanup_point std::abs ((long double) __del - 1.0e+0) < 1.08420217248550443400745280086994171142578125e-19>>)
          {
            {
              const long double __ans;

                            const long double __ans;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ans = std::exp (-NON_LVALUE_EXPR <__x>) * __h) >>>>>;
              return <retval> = (long double) __ans;
            }
          }
      }
    }
    <<cleanup_point (void)  ++__i>>;
    <D.93397>:;
    if (__i <= 1000) goto <D.93396>; else goto <D.93394>;
    <D.93394>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::__throw_runtime_error ((const char *) "Continued fraction failed in __expint_En_cont_frac.") >>>>>;
  __builtin_unreachable ();
}


;; Function _Tp std::__detail::__expint_E1_asymp(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __term = 1.0e+0;
  long double __esum = 1.0e+0;
  long double __osum = 0.0;
  const unsigned int __max_iter = 1000;

  <<cleanup_point   long double __term = 1.0e+0;>>;
  <<cleanup_point   long double __esum = 1.0e+0;>>;
  <<cleanup_point   long double __osum = 0.0;>>;
  <<cleanup_point   const unsigned int __max_iter = 1000;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.93409>;
    <D.93408>:;
    {
      long double __prev = __term;

            long double __prev = __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = ((long double) -NON_LVALUE_EXPR <__i> / __x) * __term) >>>>>;
      if (<<cleanup_point std::abs (__term) > std::abs (__prev)>>) goto <D.93406>;
      if (__term >= 0.0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__esum = __esum + __term) >>>>>;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__osum = __osum + __term) >>>>>;
        }
    }
    <<cleanup_point (void)  ++__i>>;
    <D.93409>:;
    if (__i <= 999) goto <D.93408>; else goto <D.93406>;
    <D.93406>:;
  }
  <<cleanup_point return <retval> = (std::exp (-NON_LVALUE_EXPR <__x>) * (__esum + __osum)) / __x>>;
}


;; Function _Tp std::__detail::__log_gamma_lanczos(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  const float __xm1 = __x - 1.0e+0;
  static const float __lanczos_cheb_7[9] = {1.0e+0, 6.765203857421875e+2, -1.25913916015625e+3, 7.7132342529296875e+2, -1.766150360107421875e+2, 1.2507343292236328125e+1, -1.3857109844684600830078125e-1, 9.984369171434082090854644775390625e-6, 1.5056326674312003888189792633056640625e-7};
  static const float __LOGROOT2PI = 9.1893851757049560546875e-1;
  float __sum = (float) __lanczos_cheb_7[0];
  const float __term1;
  const float __term2;
  const float __result = ((float) __term2 - 7.0e+0) + (float) __term1;

    const float __xm1 = __x - 1.0e+0;
  <<cleanup_point   static const float __lanczos_cheb_7[9] = {1.0e+0, 6.765203857421875e+2, -1.25913916015625e+3, 7.7132342529296875e+2, -1.766150360107421875e+2, 1.2507343292236328125e+1, -1.3857109844684600830078125e-1, 9.984369171434082090854644775390625e-6, 1.5056326674312003888189792633056640625e-7};>>;
  <<cleanup_point   static const float __LOGROOT2PI = 9.1893851757049560546875e-1;>>;
    float __sum = (float) __lanczos_cheb_7[0];
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.93423>;
    <D.93422>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__sum = (float) __lanczos_cheb_7[__k] / ((float) __k + (float) __xm1) + __sum) >>>>>;
    <<cleanup_point (void)  ++__k>>;
    <D.93423>:;
    if (__k <= 8) goto <D.93422>; else goto <D.93420>;
    <D.93420>:;
  }
    const float __term1;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term1 = ((float) __xm1 + 5.0e-1) * std::log (((float) __xm1 + 7.5e+0) / std::__detail::__numeric_constants<float>::__euler ())) >>>>>;
    const float __term2;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term2 = std::log (__sum) + 9.1893851757049560546875e-1) >>>>>;
    const float __result = ((float) __term2 - 7.0e+0) + (float) __term1;
  return <retval> = (float) __result;
}


;; Function _Tp std::__detail::__psi_asymp(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  float __sum;
  const float __xx = __x * __x;
  float __xp = (float) __xx;
  const unsigned int __max_iter = 100;

    float __sum;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__sum = std::log (__x) - 5.0e-1 / __x) >>>>>;
    const float __xx = __x * __x;
    float __xp = (float) __xx;
  <<cleanup_point   const unsigned int __max_iter = 100;>>;
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.93437>;
    <D.93436>:;
    {
      const float __term;

            const float __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = std::__detail::__bernoulli<float> ((int) (__k * 2)) / ((float) (__k * 2) * __xp)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__sum = __sum - (float) __term) >>>>>;
      if (<<cleanup_point std::abs ((float) __term / __sum) < 1.1920928955078125e-7>>) goto <D.93434>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__xp = __xp * (float) __xx) >>>>>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.93437>:;
    if (__k <= 99) goto <D.93436>; else goto <D.93434>;
    <D.93434>:;
  }
  return <retval> = __sum;
}


;; Function _Tp std::__detail::__psi_series(_Tp) [with _Tp = float] (null)
;; enabled by -tree-original


{
  float __sum;
  const unsigned int __max_iter = 100000;

    float __sum;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__sum = -std::__detail::__numeric_constants<float>::__gamma_e () - 1.0e+0 / __x) >>>>>;
  <<cleanup_point   const unsigned int __max_iter = 100000;>>;
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.93447>;
    <D.93446>:;
    {
      const float __term = __x / ((float) __k * ((float) __k + __x));

            const float __term = __x / ((float) __k * ((float) __k + __x));
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__sum = __sum + (float) __term) >>>>>;
      if (<<cleanup_point std::abs ((float) __term / __sum) < 1.1920928955078125e-7>>) goto <D.93444>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.93447>:;
    if (__k <= 99999) goto <D.93446>; else goto <D.93444>;
    <D.93444>:;
  }
  return <retval> = __sum;
}


;; Function _Tp std::__detail::__log_gamma_lanczos(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  const long double __xm1 = __x - 1.0e+0;
  static const long double __lanczos_cheb_7[9] = {9.99999999999809932257639061292664450775191653519868850708e-1, 6.76520368121885098566803407038605655543506145477294921875e+2, -1.2591392167224028704186622462657396681606769561767578125e+3, 7.713234287776530788693918339049560017883777618408203125e+2, -1.76615029162140599064412249674660415621474385261535644531e+2, 1.25073432786869048142369686971164810529444366693496704102e+1, -1.38571095265720116895737795692511440392991062253713607788e-1, 9.98436957801957085945931016275904819334829909394102287479e-6, 1.5056327351493115583976754886534388027871655957312668761e-7};
  static const long double __LOGROOT2PI = 9.18938533204672741803043650721249946400348562747240066528e-1;
  long double __sum = (long double) __lanczos_cheb_7[0];
  const long double __term1;
  const long double __term2;
  const long double __result = ((long double) __term2 - 7.0e+0) + (long double) __term1;

    const long double __xm1 = __x - 1.0e+0;
  <<cleanup_point   static const long double __lanczos_cheb_7[9] = {9.99999999999809932257639061292664450775191653519868850708e-1, 6.76520368121885098566803407038605655543506145477294921875e+2, -1.2591392167224028704186622462657396681606769561767578125e+3, 7.713234287776530788693918339049560017883777618408203125e+2, -1.76615029162140599064412249674660415621474385261535644531e+2, 1.25073432786869048142369686971164810529444366693496704102e+1, -1.38571095265720116895737795692511440392991062253713607788e-1, 9.98436957801957085945931016275904819334829909394102287479e-6, 1.5056327351493115583976754886534388027871655957312668761e-7};>>;
  <<cleanup_point   static const long double __LOGROOT2PI = 9.18938533204672741803043650721249946400348562747240066528e-1;>>;
    long double __sum = (long double) __lanczos_cheb_7[0];
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.93461>;
    <D.93460>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__sum = (long double) __lanczos_cheb_7[__k] / ((long double) __k + (long double) __xm1) + __sum) >>>>>;
    <<cleanup_point (void)  ++__k>>;
    <D.93461>:;
    if (__k <= 8) goto <D.93460>; else goto <D.93458>;
    <D.93458>:;
  }
    const long double __term1;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term1 = ((long double) __xm1 + 5.0e-1) * std::log (((long double) __xm1 + 7.5e+0) / std::__detail::__numeric_constants<long double>::__euler ())) >>>>>;
    const long double __term2;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__term2 = std::log (__sum) + 9.18938533204672741803043650721249946400348562747240066528e-1) >>>>>;
    const long double __result = ((long double) __term2 - 7.0e+0) + (long double) __term1;
  return <retval> = (long double) __result;
}


;; Function _Tp std::__detail::__psi_asymp(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __sum;
  const long double __xx = __x * __x;
  long double __xp = (long double) __xx;
  const unsigned int __max_iter = 100;

    long double __sum;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__sum = std::log (__x) - 5.0e-1 / __x) >>>>>;
    const long double __xx = __x * __x;
    long double __xp = (long double) __xx;
  <<cleanup_point   const unsigned int __max_iter = 100;>>;
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.93475>;
    <D.93474>:;
    {
      const long double __term;

            const long double __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = std::__detail::__bernoulli<long double> ((int) (__k * 2)) / ((long double) (__k * 2) * __xp)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__sum = __sum - (long double) __term) >>>>>;
      if (<<cleanup_point std::abs ((long double) __term / __sum) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.93472>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__xp = __xp * (long double) __xx) >>>>>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.93475>:;
    if (__k <= 99) goto <D.93474>; else goto <D.93472>;
    <D.93472>:;
  }
  return <retval> = __sum;
}


;; Function _Tp std::__detail::__psi_series(_Tp) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  long double __sum;
  const unsigned int __max_iter = 100000;

    long double __sum;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__sum = -std::__detail::__numeric_constants<long double>::__gamma_e () - 1.0e+0 / __x) >>>>>;
  <<cleanup_point   const unsigned int __max_iter = 100000;>>;
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.93485>;
    <D.93484>:;
    {
      const long double __term = __x / ((long double) __k * ((long double) __k + __x));

            const long double __term = __x / ((long double) __k * ((long double) __k + __x));
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__sum = __sum + (long double) __term) >>>>>;
      if (<<cleanup_point std::abs ((long double) __term / __sum) < 1.08420217248550443400745280086994171142578125e-19>>) goto <D.93482>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.93485>:;
    if (__k <= 99999) goto <D.93484>; else goto <D.93482>;
    <D.93482>:;
  }
  return <retval> = __sum;
}


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = unsigned int; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, __n * 4, 4) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __n * 4) >>>>>;


;; Function static void std::_Destroy_aux<true>::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = unsigned int*] (null)
;; enabled by -tree-original





;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 2147483647; _Tp __a = 16807; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 2147483647, 16807, 0, true, true>::__calc (__x)>>;


;; Function std::linear_congruential_engine<_UIntType, __a, __c, __m>::linear_congruential_engine(result_type) [with _UIntType = unsigned int; _UIntType __a = 40014; _UIntType __c = 0; _UIntType __m = 2147483563; result_type = unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct linear_congruential_engine *) this = {CLOBBER(bob)} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<unsigned int, 40014, 0, 2147483563>::seed ((struct linear_congruential_engine *) this, __s) >>>>>;
}


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = unsigned int; _Tp __m = 0; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<unsigned int, 0, 1, 0, true, false>::__calc (__x)>>;


;; Function std::linear_congruential_engine<_UIntType, __a, __c, __m>::result_type std::linear_congruential_engine<_UIntType, __a, __c, __m>::operator()() [with _UIntType = unsigned int; _UIntType __a = 40014; _UIntType __c = 0; _UIntType __m = 2147483563; result_type = unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct linear_congruential_engine *) this)->_M_x = std::__detail::__mod<unsigned int, 2147483563, 40014, 0> (((struct linear_congruential_engine *) this)->_M_x)) >>>>>;
return <retval> = ((struct linear_congruential_engine *) this)->_M_x;


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 281474976710656; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 281474976710656, 1, 0, true, true>::__calc (__x)>>;


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 16777216; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 16777216, 1, 0, true, true>::__calc (__x)>>;


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 0; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 0, 1, 0, true, false>::__calc (__x)>>;


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 312; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 312, 1, 0, true, true>::__calc (__x)>>;


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 4294967296; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 4294967296, 1, 0, true, true>::__calc (__x)>>;


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 624; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 624, 1, 0, true, true>::__calc (__x)>>;


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 2147483647; _Tp __a = 1; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  long unsigned int __res = NON_LVALUE_EXPR <__x>;

    long unsigned int __res = NON_LVALUE_EXPR <__x>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res % 2147483647) >>>>>;
  return <retval> = __res;
}


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::param_type::b() const [with _IntType = int; std::uniform_int_distribution<_IntType>::result_type = int] (null)
;; enabled by -tree-original


return <retval> = (int) ((const struct param_type *) this)->_M_b;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::param_type::a() const [with _IntType = int; std::uniform_int_distribution<_IntType>::result_type = int] (null)
;; enabled by -tree-original


return <retval> = (int) ((const struct param_type *) this)->_M_a;


;; Function std::ios_base::iostate std::basic_ios<_CharT, _Traits>::rdstate() const [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::ios_base::iostate] (null)
;; enabled by -tree-original


return <retval> = (iostate) ((const struct basic_ios *) this)->D.47550._M_streambuf_state;


;; Function const _Facet& std::__check_facet(const _Facet*) [with _Facet = ctype<char>] (null)
;; enabled by -tree-original


if (__f == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::__throw_bad_cast () >>>>>;
  }
return <retval> = (const struct ctype &) NON_LVALUE_EXPR <__f>;


;; Function static constexpr std::linear_congruential_engine<_UIntType, __a, __c, __m>::result_type std::linear_congruential_engine<_UIntType, __a, __c, __m>::min() [with _UIntType = long unsigned int; _UIntType __a = 48271; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function static constexpr std::linear_congruential_engine<_UIntType, __a, __c, __m>::result_type std::linear_congruential_engine<_UIntType, __a, __c, __m>::max() [with _UIntType = long unsigned int; _UIntType __a = 48271; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 2147483646;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 1;
  const __uctype __urngmax = 2147483646;
  const __uctype __urngrange = 2147483645;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 1;>>;
  <<cleanup_point   const __uctype __urngmax = 2147483646;>>;
  <<cleanup_point   const __uctype __urngrange = 2147483645;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange <= 2147483644)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              {
                {
                  const __uctype __scaling = 2147483645 / (long unsigned int) __uerange;
                  const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;

                                    const __uctype __scaling = 2147483645 / (long unsigned int) __uerange;
                                    const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;
                  <D.93594>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = (__uctype) std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>::operator() ((struct linear_congruential_engine *) __urng) + 18446744073709551615) >>>>>;
                  if (__ret >= (long unsigned int) __past) goto <D.93594>; else goto <D.93592>;
                  <D.93592>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = __ret / (__uctype) __scaling) >>>>>;
                }
              }
            }
          }
        }
      }
    else
      {
        {
          {
            if (__urange > 2147483645)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.93597>:;
                  {
                    const __uctype __uerngrange = 2147483646;

                    <<cleanup_point                     const __uctype __uerngrange = 2147483646;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = (long unsigned int) std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.93591, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.93591
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 2147483646) >>>>) * 2147483646) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = ((__uctype) std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>::operator() ((struct linear_congruential_engine *) __urng) + __tmp) + 18446744073709551615) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.93597>; else goto <D.93595>;
                  <D.93595>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>::operator() ((struct linear_congruential_engine *) __urng) + 18446744073709551615) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 3; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm3EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::mersenne_twister_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm3EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm3EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.93620, 0>;, std::random_device::random_device (&rd);;, D.93620 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm3EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm3EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm3EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.93623, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.93623 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm3EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.93636>;
    <D.93635>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005> > (&val, (struct mersenne_twister_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.93636>:;
    if (j <= 9) goto <D.93635>; else goto <D.93633>;
    <D.93633>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<4, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char *) __r
   >>>;
__builtin_unreachable ();


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, NON_LVALUE_EXPR <__n>, 1) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, NON_LVALUE_EXPR <__n>) >>>>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) __r>>
   >>>;
__builtin_unreachable ();


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, random_access_iterator_tag) [with _RandomAccessIterator = char*; typename iterator_traits< <template-parameter-1-1> >::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t *) __r
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = const wchar_t; pointer = const wchar_t*; element_type = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = wchar_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, __n * 4, 4) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __n * 4) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char16_t *) __r
   >>>;
__builtin_unreachable ();


;; Function const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; allocator_type = std::__cxx11::basic_string<char16_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char16_t; size_type = long unsigned int; allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__new_allocator<char16_t>::max_size ((const struct __new_allocator *) __a)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(allocator_type&, size_type) [with _Tp = char16_t; pointer = char16_t*; allocator_type = std::allocator<char16_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::__new_allocator<char16_t>::allocate ((struct __new_allocator *) __a, __n, 0B)>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = const char16_t; pointer = const char16_t*; element_type = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char16_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, __n * 2, 2) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __n * 2) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char32_t *) __r
   >>>;
__builtin_unreachable ();


;; Function const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; allocator_type = std::__cxx11::basic_string<char32_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char32_t; size_type = long unsigned int; allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__new_allocator<char32_t>::max_size ((const struct __new_allocator *) __a)>>
   >>>;
__builtin_unreachable ();


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(allocator_type&, size_type) [with _Tp = char32_t; pointer = char32_t*; allocator_type = std::allocator<char32_t>; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::__new_allocator<char32_t>::allocate ((struct __new_allocator *) __a, __n, 0B)>>;


;; Function static _Tp* std::__ptr_traits_ptr_to<_Tp*, _Tp, false>::pointer_to(element_type&) [with _Tp = const char32_t; pointer = const char32_t*; element_type = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char32_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      operator delete ((void *) __p, __n * 4, 4) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __n * 4) >>>>>;


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__euler() [with _Tp = float] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.71828174591064453125e+0
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__bernoulli(int) [with _Tp = float] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__bernoulli_series<float> ((unsigned int) __n)>>;


;; Function static _Tp std::__detail::__numeric_constants<_Tp>::__euler() [with _Tp = long double] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2.7182818284590452354281681079939403389289509505033493042e+0
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__bernoulli(int) [with _Tp = long double] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::__bernoulli_series<long double> ((unsigned int) __n)>>;


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 2147483647; _Tp __a = 16807; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  long unsigned int __res = __x * 16807;

    long unsigned int __res = __x * 16807;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res % 2147483647) >>>>>;
  return <retval> = __res;
}


;; Function void std::linear_congruential_engine<_UIntType, __a, __c, __m>::seed(result_type) [with _UIntType = unsigned int; _UIntType __a = 40014; _UIntType __c = 0; _UIntType __m = 2147483563; result_type = unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__detail::__mod<unsigned int, 2147483563> (0) == 0 && std::__detail::__mod<unsigned int, 2147483563> (__s) == 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct linear_congruential_engine *) this)->_M_x = 1) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct linear_congruential_engine *) this)->_M_x = std::__detail::__mod<unsigned int, 2147483563> (__s)) >>>>>;
  }


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = unsigned int; _Tp __m = 0; _Tp __a = 1; _Tp __c = 0; bool __s = false] (null)
;; enabled by -tree-original


{
  unsigned int __res = NON_LVALUE_EXPR <__x>;

    unsigned int __res = NON_LVALUE_EXPR <__x>;
  if (0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__res = __res % 0) >>>>>;
    }
  return <retval> = __res;
}


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = unsigned int; _Tp __m = 2147483563; _Tp __a = 40014; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<unsigned int, 2147483563, 40014, 0, false, true>::__calc (__x)>>;


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 281474976710656; _Tp __a = 1; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  long unsigned int __res = NON_LVALUE_EXPR <__x>;

    long unsigned int __res = NON_LVALUE_EXPR <__x>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res & 281474976710655) >>>>>;
  return <retval> = __res;
}


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 16777216; _Tp __a = 1; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  long unsigned int __res = NON_LVALUE_EXPR <__x>;

    long unsigned int __res = NON_LVALUE_EXPR <__x>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res & 16777215) >>>>>;
  return <retval> = __res;
}


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 0; _Tp __a = 1; _Tp __c = 0; bool __s = false] (null)
;; enabled by -tree-original


{
  long unsigned int __res = NON_LVALUE_EXPR <__x>;

    long unsigned int __res = NON_LVALUE_EXPR <__x>;
  if (0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__res = __res % 0) >>>>>;
    }
  return <retval> = __res;
}


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 312; _Tp __a = 1; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  long unsigned int __res = NON_LVALUE_EXPR <__x>;

    long unsigned int __res = NON_LVALUE_EXPR <__x>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res % 312) >>>>>;
  return <retval> = __res;
}


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 4294967296; _Tp __a = 1; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  long unsigned int __res = NON_LVALUE_EXPR <__x>;

    long unsigned int __res = NON_LVALUE_EXPR <__x>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res & 4294967295) >>>>>;
  return <retval> = __res;
}


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 624; _Tp __a = 1; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  long unsigned int __res = NON_LVALUE_EXPR <__x>;

    long unsigned int __res = NON_LVALUE_EXPR <__x>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res % 624) >>>>>;
  return <retval> = __res;
}


;; Function std::linear_congruential_engine<_UIntType, __a, __c, __m>::result_type std::linear_congruential_engine<_UIntType, __a, __c, __m>::operator()() [with _UIntType = long unsigned int; _UIntType __a = 48271; _UIntType __c = 0; _UIntType __m = 2147483647; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct linear_congruential_engine *) this)->_M_x = std::__detail::__mod<long unsigned int, 2147483647, 48271, 0> (((struct linear_congruential_engine *) this)->_M_x)) >>>>>;
return <retval> = ((struct linear_congruential_engine *) this)->_M_x;


;; Function static constexpr std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::result_type std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::min() [with _UIntType = long unsigned int; long unsigned int __w = 32; long unsigned int __n = 624; long unsigned int __m = 397; long unsigned int __r = 31; _UIntType __a = 2567483615; long unsigned int __u = 11; _UIntType __d = 4294967295; long unsigned int __s = 7; _UIntType __b = 2636928640; long unsigned int __t = 15; _UIntType __c = 4022730752; long unsigned int __l = 18; _UIntType __f = 1812433253; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::result_type std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::max() [with _UIntType = long unsigned int; long unsigned int __w = 32; long unsigned int __n = 624; long unsigned int __m = 397; long unsigned int __r = 31; _UIntType __a = 2567483615; long unsigned int __u = 11; _UIntType __d = 4294967295; long unsigned int __s = 7; _UIntType __b = 2636928640; long unsigned int __t = 15; _UIntType __c = 4022730752; long unsigned int __l = 18; _UIntType __f = 1812433253; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 4294967295;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 0;
  const __uctype __urngmax = 4294967295;
  const __uctype __urngrange = 4294967295;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 0;>>;
  <<cleanup_point   const __uctype __urngmax = 4294967295;>>;
  <<cleanup_point   const __uctype __urngrange = 4294967295;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange <= 4294967294)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              {
                {
                  unsigned int __u32erange = (unsigned int) __uerange;

                                    unsigned int __u32erange = (unsigned int) __uerange;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = (__uctype) std::uniform_int_distribution<int>::_S_nd<long unsigned int, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, unsigned int> (__urng, __u32erange)) >>>>>;
                }
              }
            }
          }
        }
      }
    else
      {
        {
          {
            if (__urange > 4294967295)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.93777>:;
                  {
                    const __uctype __uerngrange = 4294967296;

                    <<cleanup_point                     const __uctype __uerngrange = 4294967296;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = (long unsigned int) std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.93774, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.93774
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 4294967296) >>>>) * 4294967296) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = (__uctype) std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::operator() ((struct mersenne_twister_engine *) __urng) + __tmp) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.93777>; else goto <D.93775>;
                  <D.93775>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::operator() ((struct mersenne_twister_engine *) __urng)) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 4; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm4EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::subtract_with_carry_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm4EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm4EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.93800, 0>;, std::random_device::random_device (&rd);;, D.93800 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm4EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm4EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm4EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.93803, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.93803 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm4EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.93816>;
    <D.93815>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24> > (&val, (struct subtract_with_carry_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.93816>:;
    if (j <= 9) goto <D.93815>; else goto <D.93813>;
    <D.93813>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<5, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::__new_allocator<_Tp>::size_type std::__new_allocator<_Tp>::_M_max_size() const [with _Tp = char16_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;
__builtin_unreachable ();


;; Function std::__new_allocator<_Tp>::size_type std::__new_allocator<_Tp>::max_size() const [with _Tp = char16_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 4611686018427387903>>
   >>>;
__builtin_unreachable ();


;; Function _Tp* std::__new_allocator<_Tp>::allocate(size_type, const void*) [with _Tp = char16_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (__n > 4611686018427387903, 0) != 0>>)
    {
      if ((signed long) __n < 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 2;

          <<cleanup_point           align_val_t __al = 2;>>;
          <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2)>>;
}


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function constexpr std::__new_allocator<_Tp>::size_type std::__new_allocator<_Tp>::_M_max_size() const [with _Tp = char32_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2305843009213693951
   >>>;
__builtin_unreachable ();


;; Function std::__new_allocator<_Tp>::size_type std::__new_allocator<_Tp>::max_size() const [with _Tp = char32_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = 2305843009213693951>>
   >>>;
__builtin_unreachable ();


;; Function _Tp* std::__new_allocator<_Tp>::allocate(size_type, const void*) [with _Tp = char32_t; size_type = long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (__n > 2305843009213693951, 0) != 0>>)
    {
      if (__n > 4611686018427387903)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 4;

          <<cleanup_point           align_val_t __al = 4;>>;
          <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4)>>;
}


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) __r>>
   >>>;
__builtin_unreachable ();


;; Function _Tp std::__detail::__bernoulli_series(unsigned int) [with _Tp = float] (null)
;; enabled by -tree-original


{
  static const float __num[28] = {1.0e+0, -5.0e-1, 1.6666667163372039794921875e-1, 0.0, -3.33333350718021392822265625e-2, 0.0, 2.380952425301074981689453125e-2, 0.0, -3.33333350718021392822265625e-2, 0.0, 7.575757801532745361328125e-2, 0.0, -2.53113567829132080078125e-1, 0.0, 1.16666662693023681640625e+0, 0.0, -7.092156887054443359375e+0, 0.0, 5.49711761474609375e+1, 0.0, -5.29124267578125e+2, 0.0, 6.192123046875e+3, 0.0, -8.65802578125e+4, 0.0, 1.425517125e+6, 0.0};
  float __fact = 1.0e+0;
  float __sum = 0.0;

  <<cleanup_point   static const float __num[28] = {1.0e+0, -5.0e-1, 1.6666667163372039794921875e-1, 0.0, -3.33333350718021392822265625e-2, 0.0, 2.380952425301074981689453125e-2, 0.0, -3.33333350718021392822265625e-2, 0.0, 7.575757801532745361328125e-2, 0.0, -2.53113567829132080078125e-1, 0.0, 1.16666662693023681640625e+0, 0.0, -7.092156887054443359375e+0, 0.0, 5.49711761474609375e+1, 0.0, -5.29124267578125e+2, 0.0, 6.192123046875e+3, 0.0, -8.65802578125e+4, 0.0, 1.425517125e+6, 0.0};>>;
  if (__n == 0)
    {
      return <retval> = 1.0e+0;
    }
  if (__n == 1)
    {
      return <retval> = -5.0e-1;
    }
  if ((__n & 1) != 0)
    {
      return <retval> = 0.0;
    }
  if (__n <= 27)
    {
      return <retval> = (float) __num[__n];
    }
  <<cleanup_point   float __fact = 1.0e+0;>>;
  if ((__n / 2 & 1) == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__fact = -__fact) >>>>>;
    }
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.93867>;
    <D.93866>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__fact = TARGET_EXPR <D.93860, (float) __k / (std::__detail::__numeric_constants<float>::__pi () * 2.0e+0)>;, __fact * D.93860;) >>>>>;
    <<cleanup_point (void)  ++__k>>;
    <D.93867>:;
    if (__k <= __n) goto <D.93866>; else goto <D.93864>;
    <D.93864>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = __fact * 2.0e+0) >>>>>;
  <<cleanup_point   float __sum = 0.0;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.93871>;
    <D.93870>:;
    {
      float __term;

            float __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = std::pow ((float) __i, -(float) __n)) >>>>>;
      if (__term < 1.1920928955078125e-7) goto <D.93868>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__sum = __sum + __term) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.93871>:;
    if (__i <= 999) goto <D.93870>; else goto <D.93868>;
    <D.93868>:;
  }
  return <retval> = __fact * __sum;
}


;; Function _Tp std::__detail::__bernoulli_series(unsigned int) [with _Tp = long double] (null)
;; enabled by -tree-original


{
  static const long double __num[28] = {1.0e+0, -5.0e-1, 1.66666666666666666671184175718689601808364386670291423798e-1, 0.0, -3.33333333333333333349144615015413606329275353346019983292e-2, 0.0, 2.38095238095238095234868445915221712994025438092648983002e-2, 0.0, -3.33333333333333333349144615015413606329275353346019983292e-2, 0.0, 7.57575757575757575778109889630407280947110848501324653625e-2, 0.0, -2.53113553113553113550412976273662479798076674342155456543e-1, 0.0, 1.16666666666666666663052659425048318553308490663766860962e+0, 0.0, -7.09215686274509803923779549528205734532093629240989685059e+0, 0.0, 5.49711779448621553900711234064146992750465869903564453125e+1, 0.0, -5.291242424242424242653015653559123165905475616455078125e+2, 0.0, 6.19212318840579710155225257040001451969146728515625e+3, 0.0, -8.65802531135531135504379562917165458202362060546875e+4, 0.0, 1.4255171666666666666287710540927946567535400390625e+6, 0.0};
  long double __fact = 1.0e+0;
  long double __sum = 0.0;

  <<cleanup_point   static const long double __num[28] = {1.0e+0, -5.0e-1, 1.66666666666666666671184175718689601808364386670291423798e-1, 0.0, -3.33333333333333333349144615015413606329275353346019983292e-2, 0.0, 2.38095238095238095234868445915221712994025438092648983002e-2, 0.0, -3.33333333333333333349144615015413606329275353346019983292e-2, 0.0, 7.57575757575757575778109889630407280947110848501324653625e-2, 0.0, -2.53113553113553113550412976273662479798076674342155456543e-1, 0.0, 1.16666666666666666663052659425048318553308490663766860962e+0, 0.0, -7.09215686274509803923779549528205734532093629240989685059e+0, 0.0, 5.49711779448621553900711234064146992750465869903564453125e+1, 0.0, -5.291242424242424242653015653559123165905475616455078125e+2, 0.0, 6.19212318840579710155225257040001451969146728515625e+3, 0.0, -8.65802531135531135504379562917165458202362060546875e+4, 0.0, 1.4255171666666666666287710540927946567535400390625e+6, 0.0};>>;
  if (__n == 0)
    {
      return <retval> = 1.0e+0;
    }
  if (__n == 1)
    {
      return <retval> = -5.0e-1;
    }
  if ((__n & 1) != 0)
    {
      return <retval> = 0.0;
    }
  if (__n <= 27)
    {
      return <retval> = (long double) __num[__n];
    }
  <<cleanup_point   long double __fact = 1.0e+0;>>;
  if ((__n / 2 & 1) == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__fact = -__fact) >>>>>;
    }
  {
    unsigned int __k = 1;

    <<cleanup_point     unsigned int __k = 1;>>;
    goto <D.93884>;
    <D.93883>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (__fact = TARGET_EXPR <D.93877, (long double) __k / (std::__detail::__numeric_constants<long double>::__pi () * 2.0e+0)>;, __fact * D.93877;) >>>>>;
    <<cleanup_point (void)  ++__k>>;
    <D.93884>:;
    if (__k <= __n) goto <D.93883>; else goto <D.93881>;
    <D.93881>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__fact = __fact * 2.0e+0) >>>>>;
  <<cleanup_point   long double __sum = 0.0;>>;
  {
    unsigned int __i = 1;

    <<cleanup_point     unsigned int __i = 1;>>;
    goto <D.93888>;
    <D.93887>:;
    {
      long double __term;

            long double __term;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__term = std::pow ((long double) __i, -(long double) __n)) >>>>>;
      if (__term < 1.08420217248550443400745280086994171142578125e-19) goto <D.93885>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__sum = __sum + __term) >>>>>;
    }
    <<cleanup_point (void)  ++__i>>;
    <D.93888>:;
    if (__i <= 999) goto <D.93887>; else goto <D.93885>;
    <D.93885>:;
  }
  return <retval> = __fact * __sum;
}


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = unsigned int; _Tp __m = 2147483563; _Tp __a = 1; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<unsigned int, 2147483563, 1, 0, true, true>::__calc (__x)>>;


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, false, true>::__calc(_Tp) [with _Tp = unsigned int; _Tp __m = 2147483563; _Tp __a = 40014; _Tp __c = 0] (null)
;; enabled by -tree-original


{
  {
    if (0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
          (void) (__x = __x % 2147483563) >>>>>;
      }
    else
      {
        {
          static const unsigned int __q = 53668;
          static const unsigned int __r = 12211;
          unsigned int __t1 = (__x % 53668) * 40014;
          unsigned int __t2 = (__x / 53668) * 12211;

          <<cleanup_point           static const unsigned int __q = 53668;>>;
          <<cleanup_point           static const unsigned int __r = 12211;>>;
                    unsigned int __t1 = (__x % 53668) * 40014;
                    unsigned int __t2 = (__x / 53668) * 12211;
          if (__t1 >= __t2)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__x = __t1 - __t2) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__x = (__t1 - __t2) + 2147483563) >>>>>;
            }
        }
      }
  }
  {
    if (0)
      {
        {
          const unsigned int __d = 2147483563 - __x;

                    const unsigned int __d = 2147483563 - __x;
          if (__d != 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__x = NON_LVALUE_EXPR <__x>) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__x = -(unsigned int) __d) >>>>>;
            }
        }
      }
  }
  return <retval> = __x;
}


;; Function _Tp std::__detail::__mod(_Tp) [with _Tp = long unsigned int; _Tp __m = 2147483647; _Tp __a = 48271; _Tp __c = 0] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__detail::_Mod<long unsigned int, 2147483647, 48271, 0, true, true>::__calc (__x)>>;


;; Function static _Up std::uniform_int_distribution<_IntType>::_S_nd(_Urbg&, _Up) [with _Wp = long unsigned int; _Urbg = std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>; _Up = unsigned int; _IntType = int] (null)
;; enabled by -tree-original


{
  typedef struct _Up_traits _Up_traits;
  typedef struct _Wp_traits _Wp_traits;
  long unsigned int __product;
  unsigned int __low = (unsigned int) __product;

    long unsigned int __product;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__product = (long unsigned int) std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::operator() ((struct mersenne_twister_engine *) __g) * (long unsigned int) __range) >>>>>;
    unsigned int __low = (unsigned int) __product;
  {
    if (__low < __range)
      {
        {
          unsigned int __threshold = -NON_LVALUE_EXPR <__range> % __range;

                    unsigned int __threshold = -NON_LVALUE_EXPR <__range> % __range;
          goto <D.93921>;
          <D.93922>:;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__product = (long unsigned int) std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::operator() ((struct mersenne_twister_engine *) __g) * (long unsigned int) __range) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__low = (unsigned int) __product) >>>>>;
          <D.93921>:;
          if (__low < __threshold) goto <D.93922>; else goto <D.93920>;
          <D.93920>:;
        }
      }
  }
  return <retval> = (unsigned int) (__product >> 32);
}


;; Function std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::result_type std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::operator()() [with _UIntType = long unsigned int; long unsigned int __w = 32; long unsigned int __n = 624; long unsigned int __m = 397; long unsigned int __r = 31; _UIntType __a = 2567483615; long unsigned int __u = 11; _UIntType __d = 4294967295; long unsigned int __s = 7; _UIntType __b = 2636928640; long unsigned int __t = 15; _UIntType __c = 4022730752; long unsigned int __l = 18; _UIntType __f = 1812433253; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  result_type __z;

  if (((struct mersenne_twister_engine *) this)->_M_p > 623)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::_M_gen_rand ((struct mersenne_twister_engine *) this) >>>>>;
    }
    result_type __z;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = ((struct mersenne_twister_engine *) this)->_M_x[((struct mersenne_twister_engine *) this)->_M_p++ ]) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = __z >> 11 & 4294967295 ^ __z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = __z << 7 & 2636928640 ^ __z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = __z << 15 & 4022730752 ^ __z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = __z >> 18 ^ __z) >>>>>;
  return <retval> = __z;
}


;; Function static constexpr std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::result_type std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::min() [with _UIntType = long unsigned int; long unsigned int __w = 64; long unsigned int __n = 312; long unsigned int __m = 156; long unsigned int __r = 31; _UIntType __a = 13043109905998158313; long unsigned int __u = 29; _UIntType __d = 6148914691236517205; long unsigned int __s = 17; _UIntType __b = 8202884508482404352; long unsigned int __t = 37; _UIntType __c = 18444473444759240704; long unsigned int __l = 43; _UIntType __f = 6364136223846793005; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::result_type std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::max() [with _UIntType = long unsigned int; long unsigned int __w = 64; long unsigned int __n = 312; long unsigned int __m = 156; long unsigned int __r = 31; _UIntType __a = 13043109905998158313; long unsigned int __u = 29; _UIntType __d = 6148914691236517205; long unsigned int __s = 17; _UIntType __b = 8202884508482404352; long unsigned int __t = 37; _UIntType __c = 18444473444759240704; long unsigned int __l = 43; _UIntType __f = 6364136223846793005; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 18446744073709551615;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 0;
  const __uctype __urngmax = 18446744073709551615;
  const __uctype __urngrange = 18446744073709551615;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 0;>>;
  <<cleanup_point   const __uctype __urngmax = 18446744073709551615;>>;
  <<cleanup_point   const __uctype __urngrange = 18446744073709551615;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange != 18446744073709551615)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              long unsigned int __u64erange = (__uctype) __uerange;

                            long unsigned int __u64erange = (__uctype) __uerange;
              <<cleanup_point <<< Unknown tree: expr_stmt
                (void) (__ret = std::uniform_int_distribution<int>::_S_nd<__int128 unsigned, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, long unsigned int> (__urng, __u64erange)) >>>>>;
            }
          }
        }
      }
    else
      {
        {
          {
            if (0)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.93950>:;
                  {
                    const __uctype __uerngrange = 0;

                    <<cleanup_point                     const __uctype __uerngrange = 0;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.93947, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.93947
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 0) >>>>);, 0) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = (__uctype) std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::operator() ((struct mersenne_twister_engine *) __urng) + __tmp) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.93950>; else goto <D.93948>;
                  <D.93948>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::operator() ((struct mersenne_twister_engine *) __urng)) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 5; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm5EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::subtract_with_carry_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm5EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm5EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.93973, 0>;, std::random_device::random_device (&rd);;, D.93973 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm5EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm5EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm5EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.93976, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.93976 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm5EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.93989>;
    <D.93988>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12> > (&val, (struct subtract_with_carry_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.93989>:;
    if (j <= 9) goto <D.93988>; else goto <D.93986>;
    <D.93986>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<6, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const wchar_t *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char16_t *) __r
   >>>;
__builtin_unreachable ();


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char32_t *) __r
   >>>;
__builtin_unreachable ();


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = unsigned int; _Tp __m = 2147483563; _Tp __a = 1; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  unsigned int __res = NON_LVALUE_EXPR <__x>;

    unsigned int __res = NON_LVALUE_EXPR <__x>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res % 2147483563) >>>>>;
  return <retval> = __res;
}


;; Function static _Tp std::__detail::_Mod<_Tp, __m, __a, __c, true, __s>::__calc(_Tp) [with _Tp = long unsigned int; _Tp __m = 2147483647; _Tp __a = 48271; _Tp __c = 0; bool __s = true] (null)
;; enabled by -tree-original


{
  long unsigned int __res = __x * 48271;

    long unsigned int __res = __x * 48271;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__res = __res % 2147483647) >>>>>;
  return <retval> = __res;
}


;; Function void std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::_M_gen_rand() [with _UIntType = long unsigned int; long unsigned int __w = 32; long unsigned int __n = 624; long unsigned int __m = 397; long unsigned int __r = 31; _UIntType __a = 2567483615; long unsigned int __u = 11; _UIntType __d = 4294967295; long unsigned int __s = 7; _UIntType __b = 2636928640; long unsigned int __t = 15; _UIntType __c = 4022730752; long unsigned int __l = 18; _UIntType __f = 1812433253] (null)
;; enabled by -tree-original


{
  const long unsigned int __upper_mask = 18446744071562067968;
  const long unsigned int __lower_mask = 2147483647;
  long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[623] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[0] & 2147483647;

  <<cleanup_point   const long unsigned int __upper_mask = 18446744071562067968;>>;
  <<cleanup_point   const long unsigned int __lower_mask = 2147483647;>>;
  {
    size_t __k = 0;

    <<cleanup_point     size_t __k = 0;>>;
    goto <D.94019>;
    <D.94018>:;
    {
      long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[__k] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[__k + 1] & 2147483647;

            long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[__k] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[__k + 1] & 2147483647;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct mersenne_twister_engine *) this)->_M_x[__k] = (((struct mersenne_twister_engine *) this)->_M_x[__k + 397] ^ __y >> 1) ^ ((__y & 1) != 0 ? 2567483615 : 0)) >>>>>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.94019>:;
    if (__k <= 226) goto <D.94018>; else goto <D.94016>;
    <D.94016>:;
  }
  {
    size_t __k = 227;

    <<cleanup_point     size_t __k = 227;>>;
    goto <D.94023>;
    <D.94022>:;
    {
      long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[__k] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[__k + 1] & 2147483647;

            long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[__k] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[__k + 1] & 2147483647;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct mersenne_twister_engine *) this)->_M_x[__k] = (((struct mersenne_twister_engine *) this)->_M_x[__k + 18446744073709551389] ^ __y >> 1) ^ ((__y & 1) != 0 ? 2567483615 : 0)) >>>>>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.94023>:;
    if (__k <= 622) goto <D.94022>; else goto <D.94020>;
    <D.94020>:;
  }
    long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[623] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[0] & 2147483647;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct mersenne_twister_engine *) this)->_M_x[623] = (((struct mersenne_twister_engine *) this)->_M_x[396] ^ __y >> 1) ^ ((__y & 1) != 0 ? 2567483615 : 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct mersenne_twister_engine *) this)->_M_p = 0) >>>>>;
}


;; Function static _Up std::uniform_int_distribution<_IntType>::_S_nd(_Urbg&, _Up) [with _Wp = __int128 unsigned; _Urbg = std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>; _Up = long unsigned int; _IntType = int] (null)
;; enabled by -tree-original


{
  typedef struct _Up_traits _Up_traits;
  typedef struct _Wp_traits _Wp_traits;
  __int128 unsigned __product;
  long unsigned int __low = (long unsigned int) __product;

    __int128 unsigned __product;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__product = (__int128 unsigned) std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::operator() ((struct mersenne_twister_engine *) __g) * (__int128 unsigned) __range) >>>>>;
    long unsigned int __low = (long unsigned int) __product;
  {
    if (__low < __range)
      {
        {
          long unsigned int __threshold = -NON_LVALUE_EXPR <__range> % __range;

                    long unsigned int __threshold = -NON_LVALUE_EXPR <__range> % __range;
          goto <D.94050>;
          <D.94051>:;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__product = (__int128 unsigned) std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::operator() ((struct mersenne_twister_engine *) __g) * (__int128 unsigned) __range) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
            (void) (__low = (long unsigned int) __product) >>>>>;
          <D.94050>:;
          if (__low < __threshold) goto <D.94051>; else goto <D.94049>;
          <D.94049>:;
        }
      }
  }
  return <retval> = (long unsigned int) (__product >> 64);
}


;; Function std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::result_type std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::operator()() [with _UIntType = long unsigned int; long unsigned int __w = 64; long unsigned int __n = 312; long unsigned int __m = 156; long unsigned int __r = 31; _UIntType __a = 13043109905998158313; long unsigned int __u = 29; _UIntType __d = 6148914691236517205; long unsigned int __s = 17; _UIntType __b = 8202884508482404352; long unsigned int __t = 37; _UIntType __c = 18444473444759240704; long unsigned int __l = 43; _UIntType __f = 6364136223846793005; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  result_type __z;

  if (((struct mersenne_twister_engine *) this)->_M_p > 311)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::_M_gen_rand ((struct mersenne_twister_engine *) this) >>>>>;
    }
    result_type __z;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = ((struct mersenne_twister_engine *) this)->_M_x[((struct mersenne_twister_engine *) this)->_M_p++ ]) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = __z >> 29 & 6148914691236517205 ^ __z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = __z << 17 & 8202884508482404352 ^ __z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = __z << 37 & 18444473444759240704 ^ __z) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__z = __z >> 43 ^ __z) >>>>>;
  return <retval> = __z;
}


;; Function static constexpr std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::result_type std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::min() [with _UIntType = long unsigned int; long unsigned int __w = 24; long unsigned int __s = 10; long unsigned int __r = 24; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::result_type std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::max() [with _UIntType = long unsigned int; long unsigned int __w = 24; long unsigned int __s = 10; long unsigned int __r = 24; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 16777215;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 0;
  const __uctype __urngmax = 16777215;
  const __uctype __urngrange = 16777215;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 0;>>;
  <<cleanup_point   const __uctype __urngmax = 16777215;>>;
  <<cleanup_point   const __uctype __urngrange = 16777215;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange <= 16777214)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              {
                {
                  const __uctype __scaling = 16777215 / (long unsigned int) __uerange;
                  const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;

                                    const __uctype __scaling = 16777215 / (long unsigned int) __uerange;
                                    const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;
                  <D.94077>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = (__uctype) std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::operator() ((struct subtract_with_carry_engine *) __urng)) >>>>>;
                  if (__ret >= (long unsigned int) __past) goto <D.94077>; else goto <D.94075>;
                  <D.94075>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = __ret / (__uctype) __scaling) >>>>>;
                }
              }
            }
          }
        }
      }
    else
      {
        {
          {
            if (__urange > 16777215)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.94080>:;
                  {
                    const __uctype __uerngrange = 16777216;

                    <<cleanup_point                     const __uctype __uerngrange = 16777216;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = (long unsigned int) std::uniform_int_distribution<int>::operator()<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.94074, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.94074
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 16777216) >>>>) * 16777216) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = (__uctype) std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::operator() ((struct subtract_with_carry_engine *) __urng) + __tmp) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.94080>; else goto <D.94078>;
                  <D.94078>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::operator() ((struct subtract_with_carry_engine *) __urng)) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 6; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm6EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>::discard_block_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm6EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm6EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.94103, 0>;, std::random_device::random_device (&rd);;, D.94103 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm6EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm6EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm6EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.94106, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.94106 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm6EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.94118>;
    <D.94117>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23> > (&val, (struct discard_block_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.94118>:;
    if (j <= 9) goto <D.94117>; else goto <D.94115>;
    <D.94115>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<7, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function void std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::_M_gen_rand() [with _UIntType = long unsigned int; long unsigned int __w = 64; long unsigned int __n = 312; long unsigned int __m = 156; long unsigned int __r = 31; _UIntType __a = 13043109905998158313; long unsigned int __u = 29; _UIntType __d = 6148914691236517205; long unsigned int __s = 17; _UIntType __b = 8202884508482404352; long unsigned int __t = 37; _UIntType __c = 18444473444759240704; long unsigned int __l = 43; _UIntType __f = 6364136223846793005] (null)
;; enabled by -tree-original


{
  const long unsigned int __upper_mask = 18446744071562067968;
  const long unsigned int __lower_mask = 2147483647;
  long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[311] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[0] & 2147483647;

  <<cleanup_point   const long unsigned int __upper_mask = 18446744071562067968;>>;
  <<cleanup_point   const long unsigned int __lower_mask = 2147483647;>>;
  {
    size_t __k = 0;

    <<cleanup_point     size_t __k = 0;>>;
    goto <D.94130>;
    <D.94129>:;
    {
      long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[__k] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[__k + 1] & 2147483647;

            long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[__k] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[__k + 1] & 2147483647;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct mersenne_twister_engine *) this)->_M_x[__k] = (((struct mersenne_twister_engine *) this)->_M_x[__k + 156] ^ __y >> 1) ^ ((__y & 1) != 0 ? 13043109905998158313 : 0)) >>>>>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.94130>:;
    if (__k <= 155) goto <D.94129>; else goto <D.94127>;
    <D.94127>:;
  }
  {
    size_t __k = 156;

    <<cleanup_point     size_t __k = 156;>>;
    goto <D.94134>;
    <D.94133>:;
    {
      long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[__k] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[__k + 1] & 2147483647;

            long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[__k] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[__k + 1] & 2147483647;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct mersenne_twister_engine *) this)->_M_x[__k] = (((struct mersenne_twister_engine *) this)->_M_x[__k + 18446744073709551460] ^ __y >> 1) ^ ((__y & 1) != 0 ? 13043109905998158313 : 0)) >>>>>;
    }
    <<cleanup_point (void)  ++__k>>;
    <D.94134>:;
    if (__k <= 310) goto <D.94133>; else goto <D.94131>;
    <D.94131>:;
  }
    long unsigned int __y = ((struct mersenne_twister_engine *) this)->_M_x[311] & 18446744071562067968 | ((struct mersenne_twister_engine *) this)->_M_x[0] & 2147483647;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct mersenne_twister_engine *) this)->_M_x[311] = (((struct mersenne_twister_engine *) this)->_M_x[155] ^ __y >> 1) ^ ((__y & 1) != 0 ? 13043109905998158313 : 0)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct mersenne_twister_engine *) this)->_M_p = 0) >>>>>;
}


;; Function std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::result_type std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::operator()() [with _UIntType = long unsigned int; long unsigned int __w = 24; long unsigned int __s = 10; long unsigned int __r = 24; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  long int __ps = (long int) (((struct subtract_with_carry_engine *) this)->_M_p + 18446744073709551606);
  long unsigned int __xi;

    long int __ps = (long int) (((struct subtract_with_carry_engine *) this)->_M_p + 18446744073709551606);
  if (__ps < 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__ps = (long int) ((long unsigned int) __ps + 24)) >>>>>;
    }
    long unsigned int __xi;
  if (((struct subtract_with_carry_engine *) this)->_M_x[__ps] >= ((struct subtract_with_carry_engine *) this)->_M_x[((struct subtract_with_carry_engine *) this)->_M_p] + ((struct subtract_with_carry_engine *) this)->_M_carry)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__xi = (((struct subtract_with_carry_engine *) this)->_M_x[__ps] - ((struct subtract_with_carry_engine *) this)->_M_x[((struct subtract_with_carry_engine *) this)->_M_p]) - ((struct subtract_with_carry_engine *) this)->_M_carry) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct subtract_with_carry_engine *) this)->_M_carry = 0) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__xi = (((struct subtract_with_carry_engine *) this)->_M_x[__ps] - (((struct subtract_with_carry_engine *) this)->_M_x[((struct subtract_with_carry_engine *) this)->_M_p] + ((struct subtract_with_carry_engine *) this)->_M_carry)) + 16777216) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct subtract_with_carry_engine *) this)->_M_carry = 1) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct subtract_with_carry_engine *) this)->_M_x[((struct subtract_with_carry_engine *) this)->_M_p] = __xi) >>>>>;
  if (<<cleanup_point  ++((struct subtract_with_carry_engine *) this)->_M_p > 23>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct subtract_with_carry_engine *) this)->_M_p = 0) >>>>>;
    }
  return <retval> = __xi;
}


;; Function static constexpr std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::result_type std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::min() [with _UIntType = long unsigned int; long unsigned int __w = 48; long unsigned int __s = 5; long unsigned int __r = 12; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static constexpr std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::result_type std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::max() [with _UIntType = long unsigned int; long unsigned int __w = 48; long unsigned int __s = 5; long unsigned int __r = 12; result_type = long unsigned int] (null)
;; enabled by -tree-original


return <retval> = 281474976710655;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 0;
  const __uctype __urngmax = 281474976710655;
  const __uctype __urngrange = 281474976710655;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 0;>>;
  <<cleanup_point   const __uctype __urngmax = 281474976710655;>>;
  <<cleanup_point   const __uctype __urngrange = 281474976710655;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange <= 281474976710654)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              {
                {
                  const __uctype __scaling = 281474976710655 / (long unsigned int) __uerange;
                  const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;

                                    const __uctype __scaling = 281474976710655 / (long unsigned int) __uerange;
                                    const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;
                  <D.94161>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = (__uctype) std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::operator() ((struct subtract_with_carry_engine *) __urng)) >>>>>;
                  if (__ret >= (long unsigned int) __past) goto <D.94161>; else goto <D.94159>;
                  <D.94159>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = __ret / (__uctype) __scaling) >>>>>;
                }
              }
            }
          }
        }
      }
    else
      {
        {
          {
            if (__urange > 281474976710655)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.94164>:;
                  {
                    const __uctype __uerngrange = 281474976710656;

                    <<cleanup_point                     const __uctype __uerngrange = 281474976710656;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = (long unsigned int) std::uniform_int_distribution<int>::operator()<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.94158, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.94158
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 281474976710656) >>>>) * 281474976710656) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = (__uctype) std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::operator() ((struct subtract_with_carry_engine *) __urng) + __tmp) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.94164>; else goto <D.94162>;
                  <D.94162>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::operator() ((struct subtract_with_carry_engine *) __urng)) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function void std::discard_block_engine<_RandomNumberEngine, __p, __r>::seed(result_type) [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>; long unsigned int __p = 223; long unsigned int __r = 23; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::seed (&((struct discard_block_engine *) this)->_M_b, __s) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct discard_block_engine *) this)->_M_n = 0) >>>>>;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 7; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm7EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>::discard_block_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm7EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm7EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.94189, 0>;, std::random_device::random_device (&rd);;, D.94189 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm7EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm7EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm7EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.94192, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.94192 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm7EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.94204>;
    <D.94203>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11> > (&val, (struct discard_block_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.94204>:;
    if (j <= 9) goto <D.94203>; else goto <D.94201>;
    <D.94201>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<8, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::result_type std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::operator()() [with _UIntType = long unsigned int; long unsigned int __w = 48; long unsigned int __s = 5; long unsigned int __r = 12; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  long int __ps = (long int) (((struct subtract_with_carry_engine *) this)->_M_p + 18446744073709551611);
  long unsigned int __xi;

    long int __ps = (long int) (((struct subtract_with_carry_engine *) this)->_M_p + 18446744073709551611);
  if (__ps < 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__ps = (long int) ((long unsigned int) __ps + 12)) >>>>>;
    }
    long unsigned int __xi;
  if (((struct subtract_with_carry_engine *) this)->_M_x[__ps] >= ((struct subtract_with_carry_engine *) this)->_M_x[((struct subtract_with_carry_engine *) this)->_M_p] + ((struct subtract_with_carry_engine *) this)->_M_carry)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__xi = (((struct subtract_with_carry_engine *) this)->_M_x[__ps] - ((struct subtract_with_carry_engine *) this)->_M_x[((struct subtract_with_carry_engine *) this)->_M_p]) - ((struct subtract_with_carry_engine *) this)->_M_carry) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct subtract_with_carry_engine *) this)->_M_carry = 0) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (__xi = (((struct subtract_with_carry_engine *) this)->_M_x[__ps] - (((struct subtract_with_carry_engine *) this)->_M_x[((struct subtract_with_carry_engine *) this)->_M_p] + ((struct subtract_with_carry_engine *) this)->_M_carry)) + 281474976710656) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct subtract_with_carry_engine *) this)->_M_carry = 1) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct subtract_with_carry_engine *) this)->_M_x[((struct subtract_with_carry_engine *) this)->_M_p] = __xi) >>>>>;
  if (<<cleanup_point  ++((struct subtract_with_carry_engine *) this)->_M_p > 11>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
        (void) (((struct subtract_with_carry_engine *) this)->_M_p = 0) >>>>>;
    }
  return <retval> = __xi;
}


;; Function static constexpr std::discard_block_engine<_RandomNumberEngine, __p, __r>::result_type std::discard_block_engine<_RandomNumberEngine, __p, __r>::min() [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>; long unsigned int __p = 223; long unsigned int __r = 23; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 0>>;


;; Function static constexpr std::discard_block_engine<_RandomNumberEngine, __p, __r>::result_type std::discard_block_engine<_RandomNumberEngine, __p, __r>::max() [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>; long unsigned int __p = 223; long unsigned int __r = 23; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 16777215>>;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 0;
  const __uctype __urngmax = 16777215;
  const __uctype __urngrange = 16777215;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 0;>>;
  <<cleanup_point   const __uctype __urngmax = 16777215;>>;
  <<cleanup_point   const __uctype __urngrange = 16777215;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange <= 16777214)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              {
                {
                  const __uctype __scaling = 16777215 / (long unsigned int) __uerange;
                  const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;

                                    const __uctype __scaling = 16777215 / (long unsigned int) __uerange;
                                    const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;
                  <D.94231>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = (__uctype) std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>::operator() ((struct discard_block_engine *) __urng)) >>>>>;
                  if (__ret >= (long unsigned int) __past) goto <D.94231>; else goto <D.94229>;
                  <D.94229>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = __ret / (__uctype) __scaling) >>>>>;
                }
              }
            }
          }
        }
      }
    else
      {
        {
          {
            if (__urange > 16777215)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.94234>:;
                  {
                    const __uctype __uerngrange = 16777216;

                    <<cleanup_point                     const __uctype __uerngrange = 16777216;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = (long unsigned int) std::uniform_int_distribution<int>::operator()<std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.94228, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.94228
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 16777216) >>>>) * 16777216) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = (__uctype) std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>::operator() ((struct discard_block_engine *) __urng) + __tmp) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.94234>; else goto <D.94232>;
                  <D.94232>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>::operator() ((struct discard_block_engine *) __urng)) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function void std::discard_block_engine<_RandomNumberEngine, __p, __r>::seed(result_type) [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>; long unsigned int __p = 389; long unsigned int __r = 11; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::seed (&((struct discard_block_engine *) this)->_M_b, __s) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct discard_block_engine *) this)->_M_n = 0) >>>>>;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 8; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm8EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>::shuffle_order_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm8EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm8EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.94259, 0>;, std::random_device::random_device (&rd);;, D.94259 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm8EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm8EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm8EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.94262, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.94262 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm8EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.94274>;
    <D.94273>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256> > (&val, (struct shuffle_order_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.94274>:;
    if (j <= 9) goto <D.94273>; else goto <D.94271>;
    <D.94271>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<9, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function std::discard_block_engine<_RandomNumberEngine, __p, __r>::result_type std::discard_block_engine<_RandomNumberEngine, __p, __r>::operator()() [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>; long unsigned int __p = 223; long unsigned int __r = 23; result_type = long unsigned int] (null)
;; enabled by -tree-original


if (((struct discard_block_engine *) this)->_M_n > 22)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::discard (&((struct discard_block_engine *) this)->_M_b, (long long unsigned int) (223 - ((struct discard_block_engine *) this)->_M_n)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct discard_block_engine *) this)->_M_n = 0) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct discard_block_engine *) this)->_M_n >>>>>;
<<cleanup_point return <retval> = std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::operator() (&((struct discard_block_engine *) this)->_M_b)>>;


;; Function static constexpr std::discard_block_engine<_RandomNumberEngine, __p, __r>::result_type std::discard_block_engine<_RandomNumberEngine, __p, __r>::min() [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>; long unsigned int __p = 389; long unsigned int __r = 11; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 0>>;


;; Function static constexpr std::discard_block_engine<_RandomNumberEngine, __p, __r>::result_type std::discard_block_engine<_RandomNumberEngine, __p, __r>::max() [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>; long unsigned int __p = 389; long unsigned int __r = 11; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 281474976710655>>;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 0;
  const __uctype __urngmax = 281474976710655;
  const __uctype __urngrange = 281474976710655;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 0;>>;
  <<cleanup_point   const __uctype __urngmax = 281474976710655;>>;
  <<cleanup_point   const __uctype __urngrange = 281474976710655;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange <= 281474976710654)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              {
                {
                  const __uctype __scaling = 281474976710655 / (long unsigned int) __uerange;
                  const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;

                                    const __uctype __scaling = 281474976710655 / (long unsigned int) __uerange;
                                    const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;
                  <D.94299>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = (__uctype) std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>::operator() ((struct discard_block_engine *) __urng)) >>>>>;
                  if (__ret >= (long unsigned int) __past) goto <D.94299>; else goto <D.94297>;
                  <D.94297>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = __ret / (__uctype) __scaling) >>>>>;
                }
              }
            }
          }
        }
      }
    else
      {
        {
          {
            if (__urange > 281474976710655)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.94302>:;
                  {
                    const __uctype __uerngrange = 281474976710656;

                    <<cleanup_point                     const __uctype __uerngrange = 281474976710656;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = (long unsigned int) std::uniform_int_distribution<int>::operator()<std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.94296, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.94296
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 281474976710656) >>>>) * 281474976710656) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = (__uctype) std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>::operator() ((struct discard_block_engine *) __urng) + __tmp) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.94302>; else goto <D.94300>;
                  <D.94300>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>::operator() ((struct discard_block_engine *) __urng)) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function void std::shuffle_order_engine<_RandomNumberEngine, __k>::seed(result_type) [with _RandomNumberEngine = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; long unsigned int __k = 256; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::seed (&((struct shuffle_order_engine *) this)->_M_b, __s) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>::_M_initialize ((struct shuffle_order_engine *) this) >>>>>;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&) [with _UniformRandomBitGenerator = std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::uniform_int_distribution<int>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &((struct uniform_int_distribution *) this)->_M_param)>>;


;; Function typename std::enable_if<(Index < sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 9; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index < sizeof... (Types)), void>::type = void] (_Z8generateILm9EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EE)
;; enabled by -tree-original


{
  typedef struct EngineType EngineType;
  struct EngineType engine;
  static struct random_device rd;
  static struct uniform_int_distribution val;

    struct EngineType engine;
  <<cleanup_point <<< Unknown tree: expr_stmt
    std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::linear_congruential_engine (&engine) >>>>>;
    static struct random_device rd;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm9EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm9EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.94327, 0>;, std::random_device::random_device (&rd);;, D.94327 = 1;;, __cxxabiv1::__cxa_atexit ((void (*<T11d>) (void *)) __dt_comp , (void *) &rd, (void *) &__dso_handle);;, __cxa_guard_release (&_ZGVZ8generateILm9EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE2rd); >>>>>;
        }
    }
    static struct uniform_int_distribution val;
  if (<<cleanup_point __atomic_load_1 (&_ZGVZ8generateILm9EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val, 2) == 0>>)
    {
      if (<<cleanup_point __cxa_guard_acquire (&_ZGVZ8generateILm9EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val) != 0>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
            TARGET_EXPR <D.94330, 0>;, std::uniform_int_distribution<int>::uniform_int_distribution (&val, 1, 9);;, D.94330 = 1;;, __cxa_guard_release (&_ZGVZ8generateILm9EJSt26linear_congruential_engineImLm16807ELm0ELm2147483647EES0_ImLm48271ELm0ELm2147483647EESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EES3_ImLm64ELm312ELm156ELm31ELm13043109905998158313ELm29ELm6148914691236517205ELm17ELm8202884508482404352ELm37ELm18444473444759240704ELm43ELm6364136223846793005EESt26subtract_with_carry_engineImLm24ELm10ELm24EES6_ImLm48ELm5ELm12EESt20discard_block_engineIS7_Lm223ELm23EES9_IS8_Lm389ELm11EESt20shuffle_order_engineIS1_Lm256EES1_EENSt9enable_ifIXltT_sZT0_EvE4typeERSt5tupleIJDpT0_EEE3val); >>>>>;
        }
    }
  {
    int j = 0;

    <<cleanup_point     int j = 0;>>;
    goto <D.94342>;
    <D.94341>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::seed (&engine, (result_type) std::random_device::operator() (&rd)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) std::operator<< <std::char_traits<char> > (std::basic_ostream<char>::operator<< (&cout, std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (&val, (struct linear_congruential_engine &) &engine)), (const char *) " ") >>>>>;
    <<cleanup_point (void)  ++j>>;
    <D.94342>:;
    if (j <= 9) goto <D.94341>; else goto <D.94339>;
    <D.94339>:;
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) std::basic_ostream<char>::operator<< (&cout, endl) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    generate<10, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647> > (t) >>>>>;
}


;; Function void std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::discard(long long unsigned int) [with _UIntType = long unsigned int; long unsigned int __w = 24; long unsigned int __s = 10; long unsigned int __r = 24] (null)
;; enabled by -tree-original


goto <D.94348>;
<D.94347>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>::operator() ((struct subtract_with_carry_engine *) this) >>>>>;
<<cleanup_point (void)  --__z>>;
<D.94348>:;
if (__z != 0) goto <D.94347>; else goto <D.94345>;
<D.94345>:;


;; Function std::discard_block_engine<_RandomNumberEngine, __p, __r>::result_type std::discard_block_engine<_RandomNumberEngine, __p, __r>::operator()() [with _RandomNumberEngine = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>; long unsigned int __p = 389; long unsigned int __r = 11; result_type = long unsigned int] (null)
;; enabled by -tree-original


if (((struct discard_block_engine *) this)->_M_n > 10)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
      std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::discard (&((struct discard_block_engine *) this)->_M_b, (long long unsigned int) (389 - ((struct discard_block_engine *) this)->_M_n)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
      (void) (((struct discard_block_engine *) this)->_M_n = 0) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct discard_block_engine *) this)->_M_n >>>>>;
<<cleanup_point return <retval> = std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::operator() (&((struct discard_block_engine *) this)->_M_b)>>;


;; Function static constexpr std::shuffle_order_engine<_RandomNumberEngine, __k>::result_type std::shuffle_order_engine<_RandomNumberEngine, __k>::min() [with _RandomNumberEngine = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; long unsigned int __k = 256; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 1>>;


;; Function static constexpr std::shuffle_order_engine<_RandomNumberEngine, __k>::result_type std::shuffle_order_engine<_RandomNumberEngine, __k>::max() [with _RandomNumberEngine = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; long unsigned int __k = 256; result_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = 2147483646>>;


;; Function std::uniform_int_distribution<_IntType>::result_type std::uniform_int_distribution<_IntType>::operator()(_UniformRandomBitGenerator&, const param_type&) [with _UniformRandomBitGenerator = std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>; _IntType = int; result_type = int] (null)
;; enabled by -tree-original


{
  typedef _Gresult_type _Gresult_type;
  typedef __utype __utype;
  typedef __uctype __uctype;
  const __uctype __urngmin = 1;
  const __uctype __urngmax = 2147483646;
  const __uctype __urngrange = 2147483645;
  const __uctype __urange;
  __uctype __ret;

  <<cleanup_point   const __uctype __urngmin = 1;>>;
  <<cleanup_point   const __uctype __urngmax = 2147483646;>>;
  <<cleanup_point   const __uctype __urngrange = 2147483645;>>;
    const __uctype __urange;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__urange = (__uctype) std::uniform_int_distribution<int>::param_type::b ((const struct param_type *) __param) - (__uctype) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param)) >>>>>;
    __uctype __ret;
  {
    if (__urange <= 2147483644)
      {
        {
          const __uctype __uerange = (long unsigned int) __urange + 1;

                    const __uctype __uerange = (long unsigned int) __urange + 1;
          {
            {
              {
                {
                  const __uctype __scaling = 2147483645 / (long unsigned int) __uerange;
                  const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;

                                    const __uctype __scaling = 2147483645 / (long unsigned int) __uerange;
                                    const __uctype __past = (long unsigned int) __uerange * (long unsigned int) __scaling;
                  <D.94373>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = (__uctype) std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>::operator() ((struct shuffle_order_engine *) __urng) + 18446744073709551615) >>>>>;
                  if (__ret >= (long unsigned int) __past) goto <D.94373>; else goto <D.94371>;
                  <D.94371>:;
                  <<cleanup_point <<< Unknown tree: expr_stmt
                    (void) (__ret = __ret / (__uctype) __scaling) >>>>>;
                }
              }
            }
          }
        }
      }
    else
      {
        {
          {
            if (__urange > 2147483645)
              {
                {
                  __uctype __tmp;

                                    __uctype __tmp;
                  <D.94376>:;
                  {
                    const __uctype __uerngrange = 2147483646;

                    <<cleanup_point                     const __uctype __uerngrange = 2147483646;>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__tmp = (long unsigned int) std::uniform_int_distribution<int>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256> > ((struct uniform_int_distribution *) this, __urng, (const struct param_type &) &TARGET_EXPR <D.94370, <<< Unknown tree: aggr_init_expr
                        6
                        __ct_comp 
                        D.94370
                        (struct param_type *) <<< Unknown tree: void_cst >>>
                        0
                        (int) ((long unsigned int) __urange / 2147483646) >>>>) * 2147483646) >>>>>;
                    <<cleanup_point <<< Unknown tree: expr_stmt
                      (void) (__ret = ((__uctype) std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>::operator() ((struct shuffle_order_engine *) __urng) + __tmp) + 18446744073709551615) >>>>>;
                  }
                  if (__ret > (long unsigned int) __urange || __ret < __tmp) goto <D.94376>; else goto <D.94374>;
                  <D.94374>:;
                }
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
                  (void) (__ret = (__uctype) std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>::operator() ((struct shuffle_order_engine *) __urng) + 18446744073709551615) >>>>>;
              }
          }
        }
      }
  }
  <<cleanup_point return <retval> = (result_type) ((unsigned int) std::uniform_int_distribution<int>::param_type::a ((const struct param_type *) __param) + (unsigned int) __ret)>>;
}


;; Function typename std::enable_if<(Index == sizeof... (Types)), void>::type generate(std::tuple<_Elements ...>&) [with long unsigned int Index = 10; Types = {std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, std::linear_congruential_engine<long unsigned int, 48271, 0, 2147483647>, std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, std::mersenne_twister_engine<long unsigned int, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>, std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 24, 10, 24>, 223, 23>, std::discard_block_engine<std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>, 389, 11>, std::shuffle_order_engine<std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>, 256>, std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>}; typename std::enable_if<(Index == sizeof... (Types)), void>::type = void] (null)
;; enabled by -tree-original





;; Function void std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::discard(long long unsigned int) [with _UIntType = long unsigned int; long unsigned int __w = 48; long unsigned int __s = 5; long unsigned int __r = 12] (null)
;; enabled by -tree-original


goto <D.94384>;
<D.94383>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::subtract_with_carry_engine<long unsigned int, 48, 5, 12>::operator() ((struct subtract_with_carry_engine *) this) >>>>>;
<<cleanup_point (void)  --__z>>;
<D.94384>:;
if (__z != 0) goto <D.94383>; else goto <D.94381>;
<D.94381>:;


;; Function constexpr bool std::__detail::__p1_representable_as_double(_Tp) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __x != 18446744073709551615 && std::__detail::__representable_as_double<long unsigned int> (__x + 1)>>
   >>>;
__builtin_unreachable ();


;; Function constexpr bool std::__detail::__representable_as_double(_Tp) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __x <= 9007199254740992 || (__x & 1) == 0 && std::__detail::__representable_as_double<long unsigned int> (__x >> 1)>>
   >>>;
__builtin_unreachable ();


;; Function std::shuffle_order_engine<_RandomNumberEngine, __k>::result_type std::shuffle_order_engine<_RandomNumberEngine, __k>::operator()() [with _RandomNumberEngine = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>; long unsigned int __k = 256; result_type = long unsigned int] (null)
;; enabled by -tree-original


{
  const result_type __range = 2147483645;
  size_t __j = 256;
  const result_type __y = ((struct shuffle_order_engine *) this)->_M_y + 18446744073709551615;

  <<cleanup_point   const result_type __range = 2147483645;>>;
  <<cleanup_point   size_t __j = 256;>>;
    const result_type __y = ((struct shuffle_order_engine *) this)->_M_y + 18446744073709551615;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (__j = (size_t) ((double) __j * ((double) __y / 2.147483646e+9))) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct shuffle_order_engine *) this)->_M_y = ((struct shuffle_order_engine *) this)->_M_v[__j]) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
    (void) (((struct shuffle_order_engine *) this)->_M_v[__j] = std::linear_congruential_engine<long unsigned int, 16807, 0, 2147483647>::operator() (&((struct shuffle_order_engine *) this)->_M_b)) >>>>>;
  return <retval> = ((struct shuffle_order_engine *) this)->_M_y;
}

